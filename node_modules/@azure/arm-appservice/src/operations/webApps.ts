/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { WebApps } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { WebSiteManagementClient } from "../webSiteManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  Site,
  WebAppsListNextOptionalParams,
  WebAppsListOptionalParams,
  WebAppsListResponse,
  WebAppsListByResourceGroupNextOptionalParams,
  WebAppsListByResourceGroupOptionalParams,
  WebAppsListByResourceGroupResponse,
  BackupItem,
  WebAppsListBackupsNextOptionalParams,
  WebAppsListBackupsOptionalParams,
  WebAppsListBackupsResponse,
  CsmPublishingCredentialsPoliciesEntity,
  WebAppsListBasicPublishingCredentialsPoliciesNextOptionalParams,
  WebAppsListBasicPublishingCredentialsPoliciesOptionalParams,
  WebAppsListBasicPublishingCredentialsPoliciesResponse,
  SiteConfigResource,
  WebAppsListConfigurationsNextOptionalParams,
  WebAppsListConfigurationsOptionalParams,
  WebAppsListConfigurationsResponse,
  ApiKVReference,
  WebAppsGetAppSettingsKeyVaultReferencesNextOptionalParams,
  WebAppsGetAppSettingsKeyVaultReferencesOptionalParams,
  WebAppsGetAppSettingsKeyVaultReferencesResponse,
  WebAppsGetSiteConnectionStringKeyVaultReferencesNextOptionalParams,
  WebAppsGetSiteConnectionStringKeyVaultReferencesOptionalParams,
  WebAppsGetSiteConnectionStringKeyVaultReferencesResponse,
  SiteConfigurationSnapshotInfo,
  WebAppsListConfigurationSnapshotInfoNextOptionalParams,
  WebAppsListConfigurationSnapshotInfoOptionalParams,
  WebAppsListConfigurationSnapshotInfoResponse,
  ContinuousWebJob,
  WebAppsListContinuousWebJobsNextOptionalParams,
  WebAppsListContinuousWebJobsOptionalParams,
  WebAppsListContinuousWebJobsResponse,
  CsmDeploymentStatus,
  WebAppsListProductionSiteDeploymentStatusesNextOptionalParams,
  WebAppsListProductionSiteDeploymentStatusesOptionalParams,
  WebAppsListProductionSiteDeploymentStatusesResponse,
  Deployment,
  WebAppsListDeploymentsNextOptionalParams,
  WebAppsListDeploymentsOptionalParams,
  WebAppsListDeploymentsResponse,
  Identifier,
  WebAppsListDomainOwnershipIdentifiersNextOptionalParams,
  WebAppsListDomainOwnershipIdentifiersOptionalParams,
  WebAppsListDomainOwnershipIdentifiersResponse,
  FunctionEnvelope,
  WebAppsListFunctionsNextOptionalParams,
  WebAppsListFunctionsOptionalParams,
  WebAppsListFunctionsResponse,
  HostNameBinding,
  WebAppsListHostNameBindingsNextOptionalParams,
  WebAppsListHostNameBindingsOptionalParams,
  WebAppsListHostNameBindingsResponse,
  WebSiteInstanceStatus,
  WebAppsListInstanceIdentifiersNextOptionalParams,
  WebAppsListInstanceIdentifiersOptionalParams,
  WebAppsListInstanceIdentifiersResponse,
  ProcessInfo,
  WebAppsListInstanceProcessesNextOptionalParams,
  WebAppsListInstanceProcessesOptionalParams,
  WebAppsListInstanceProcessesResponse,
  ProcessModuleInfo,
  WebAppsListInstanceProcessModulesNextOptionalParams,
  WebAppsListInstanceProcessModulesOptionalParams,
  WebAppsListInstanceProcessModulesResponse,
  ProcessThreadInfo,
  WebAppsListInstanceProcessThreadsNextOptionalParams,
  WebAppsListInstanceProcessThreadsOptionalParams,
  WebAppsListInstanceProcessThreadsResponse,
  WebAppsListSiteBackupsNextOptionalParams,
  WebAppsListSiteBackupsOptionalParams,
  WebAppsListSiteBackupsResponse,
  PerfMonResponse,
  WebAppsListPerfMonCountersNextOptionalParams,
  WebAppsListPerfMonCountersOptionalParams,
  WebAppsListPerfMonCountersResponse,
  RemotePrivateEndpointConnectionARMResource,
  WebAppsGetPrivateEndpointConnectionListNextOptionalParams,
  WebAppsGetPrivateEndpointConnectionListOptionalParams,
  WebAppsGetPrivateEndpointConnectionListResponse,
  WebAppsListProcessesNextOptionalParams,
  WebAppsListProcessesOptionalParams,
  WebAppsListProcessesResponse,
  WebAppsListProcessModulesNextOptionalParams,
  WebAppsListProcessModulesOptionalParams,
  WebAppsListProcessModulesResponse,
  WebAppsListProcessThreadsNextOptionalParams,
  WebAppsListProcessThreadsOptionalParams,
  WebAppsListProcessThreadsResponse,
  PublicCertificate,
  WebAppsListPublicCertificatesNextOptionalParams,
  WebAppsListPublicCertificatesOptionalParams,
  WebAppsListPublicCertificatesResponse,
  SiteExtensionInfo,
  WebAppsListSiteExtensionsNextOptionalParams,
  WebAppsListSiteExtensionsOptionalParams,
  WebAppsListSiteExtensionsResponse,
  WebAppsListSlotsNextOptionalParams,
  WebAppsListSlotsOptionalParams,
  WebAppsListSlotsResponse,
  WebAppsListBackupsSlotNextOptionalParams,
  WebAppsListBackupsSlotOptionalParams,
  WebAppsListBackupsSlotResponse,
  WebAppsListBasicPublishingCredentialsPoliciesSlotNextOptionalParams,
  WebAppsListBasicPublishingCredentialsPoliciesSlotOptionalParams,
  WebAppsListBasicPublishingCredentialsPoliciesSlotResponse,
  WebAppsListConfigurationsSlotNextOptionalParams,
  WebAppsListConfigurationsSlotOptionalParams,
  WebAppsListConfigurationsSlotResponse,
  WebAppsGetAppSettingsKeyVaultReferencesSlotNextOptionalParams,
  WebAppsGetAppSettingsKeyVaultReferencesSlotOptionalParams,
  WebAppsGetAppSettingsKeyVaultReferencesSlotResponse,
  WebAppsGetSiteConnectionStringKeyVaultReferencesSlotNextOptionalParams,
  WebAppsGetSiteConnectionStringKeyVaultReferencesSlotOptionalParams,
  WebAppsGetSiteConnectionStringKeyVaultReferencesSlotResponse,
  WebAppsListConfigurationSnapshotInfoSlotNextOptionalParams,
  WebAppsListConfigurationSnapshotInfoSlotOptionalParams,
  WebAppsListConfigurationSnapshotInfoSlotResponse,
  WebAppsListContinuousWebJobsSlotNextOptionalParams,
  WebAppsListContinuousWebJobsSlotOptionalParams,
  WebAppsListContinuousWebJobsSlotResponse,
  WebAppsListSlotSiteDeploymentStatusesSlotNextOptionalParams,
  WebAppsListSlotSiteDeploymentStatusesSlotOptionalParams,
  WebAppsListSlotSiteDeploymentStatusesSlotResponse,
  WebAppsListDeploymentsSlotNextOptionalParams,
  WebAppsListDeploymentsSlotOptionalParams,
  WebAppsListDeploymentsSlotResponse,
  WebAppsListDomainOwnershipIdentifiersSlotNextOptionalParams,
  WebAppsListDomainOwnershipIdentifiersSlotOptionalParams,
  WebAppsListDomainOwnershipIdentifiersSlotResponse,
  WebAppsListInstanceFunctionsSlotNextOptionalParams,
  WebAppsListInstanceFunctionsSlotOptionalParams,
  WebAppsListInstanceFunctionsSlotResponse,
  WebAppsListHostNameBindingsSlotNextOptionalParams,
  WebAppsListHostNameBindingsSlotOptionalParams,
  WebAppsListHostNameBindingsSlotResponse,
  WebAppsListInstanceIdentifiersSlotNextOptionalParams,
  WebAppsListInstanceIdentifiersSlotOptionalParams,
  WebAppsListInstanceIdentifiersSlotResponse,
  WebAppsListInstanceProcessesSlotNextOptionalParams,
  WebAppsListInstanceProcessesSlotOptionalParams,
  WebAppsListInstanceProcessesSlotResponse,
  WebAppsListInstanceProcessModulesSlotNextOptionalParams,
  WebAppsListInstanceProcessModulesSlotOptionalParams,
  WebAppsListInstanceProcessModulesSlotResponse,
  WebAppsListInstanceProcessThreadsSlotNextOptionalParams,
  WebAppsListInstanceProcessThreadsSlotOptionalParams,
  WebAppsListInstanceProcessThreadsSlotResponse,
  WebAppsListSiteBackupsSlotNextOptionalParams,
  WebAppsListSiteBackupsSlotOptionalParams,
  WebAppsListSiteBackupsSlotResponse,
  WebAppsListPerfMonCountersSlotNextOptionalParams,
  WebAppsListPerfMonCountersSlotOptionalParams,
  WebAppsListPerfMonCountersSlotResponse,
  WebAppsGetPrivateEndpointConnectionListSlotNextOptionalParams,
  WebAppsGetPrivateEndpointConnectionListSlotOptionalParams,
  WebAppsGetPrivateEndpointConnectionListSlotResponse,
  WebAppsListProcessesSlotNextOptionalParams,
  WebAppsListProcessesSlotOptionalParams,
  WebAppsListProcessesSlotResponse,
  WebAppsListProcessModulesSlotNextOptionalParams,
  WebAppsListProcessModulesSlotOptionalParams,
  WebAppsListProcessModulesSlotResponse,
  WebAppsListProcessThreadsSlotNextOptionalParams,
  WebAppsListProcessThreadsSlotOptionalParams,
  WebAppsListProcessThreadsSlotResponse,
  WebAppsListPublicCertificatesSlotNextOptionalParams,
  WebAppsListPublicCertificatesSlotOptionalParams,
  WebAppsListPublicCertificatesSlotResponse,
  WebAppsListSiteExtensionsSlotNextOptionalParams,
  WebAppsListSiteExtensionsSlotOptionalParams,
  WebAppsListSiteExtensionsSlotResponse,
  SlotDifference,
  CsmSlotEntity,
  WebAppsListSlotDifferencesSlotNextOptionalParams,
  WebAppsListSlotDifferencesSlotOptionalParams,
  WebAppsListSlotDifferencesSlotResponse,
  Snapshot,
  WebAppsListSnapshotsSlotNextOptionalParams,
  WebAppsListSnapshotsSlotOptionalParams,
  WebAppsListSnapshotsSlotResponse,
  WebAppsListSnapshotsFromDRSecondarySlotNextOptionalParams,
  WebAppsListSnapshotsFromDRSecondarySlotOptionalParams,
  WebAppsListSnapshotsFromDRSecondarySlotResponse,
  TriggeredWebJob,
  WebAppsListTriggeredWebJobsSlotNextOptionalParams,
  WebAppsListTriggeredWebJobsSlotOptionalParams,
  WebAppsListTriggeredWebJobsSlotResponse,
  TriggeredJobHistory,
  WebAppsListTriggeredWebJobHistorySlotNextOptionalParams,
  WebAppsListTriggeredWebJobHistorySlotOptionalParams,
  WebAppsListTriggeredWebJobHistorySlotResponse,
  CsmUsageQuota,
  WebAppsListUsagesSlotNextOptionalParams,
  WebAppsListUsagesSlotOptionalParams,
  WebAppsListUsagesSlotResponse,
  WebJob,
  WebAppsListWebJobsSlotNextOptionalParams,
  WebAppsListWebJobsSlotOptionalParams,
  WebAppsListWebJobsSlotResponse,
  WebAppsListSlotDifferencesFromProductionNextOptionalParams,
  WebAppsListSlotDifferencesFromProductionOptionalParams,
  WebAppsListSlotDifferencesFromProductionResponse,
  WebAppsListSnapshotsNextOptionalParams,
  WebAppsListSnapshotsOptionalParams,
  WebAppsListSnapshotsResponse,
  WebAppsListSnapshotsFromDRSecondaryNextOptionalParams,
  WebAppsListSnapshotsFromDRSecondaryOptionalParams,
  WebAppsListSnapshotsFromDRSecondaryResponse,
  WebAppsListTriggeredWebJobsNextOptionalParams,
  WebAppsListTriggeredWebJobsOptionalParams,
  WebAppsListTriggeredWebJobsResponse,
  WebAppsListTriggeredWebJobHistoryNextOptionalParams,
  WebAppsListTriggeredWebJobHistoryOptionalParams,
  WebAppsListTriggeredWebJobHistoryResponse,
  WebAppsListUsagesNextOptionalParams,
  WebAppsListUsagesOptionalParams,
  WebAppsListUsagesResponse,
  WebAppsListWebJobsNextOptionalParams,
  WebAppsListWebJobsOptionalParams,
  WebAppsListWebJobsResponse,
  WebAppsGetOptionalParams,
  WebAppsGetResponse,
  WebAppsCreateOrUpdateOptionalParams,
  WebAppsCreateOrUpdateResponse,
  WebAppsDeleteOptionalParams,
  SitePatchResource,
  WebAppsUpdateOptionalParams,
  WebAppsUpdateResponse,
  WebAppsAnalyzeCustomHostnameOptionalParams,
  WebAppsAnalyzeCustomHostnameResponse,
  WebAppsApplySlotConfigToProductionOptionalParams,
  BackupRequest,
  WebAppsBackupOptionalParams,
  WebAppsBackupResponse,
  WebAppsGetBackupStatusOptionalParams,
  WebAppsGetBackupStatusResponse,
  WebAppsDeleteBackupOptionalParams,
  WebAppsListBackupStatusSecretsOptionalParams,
  WebAppsListBackupStatusSecretsResponse,
  RestoreRequest,
  WebAppsRestoreOptionalParams,
  WebAppsGetFtpAllowedOptionalParams,
  WebAppsGetFtpAllowedResponse,
  WebAppsUpdateFtpAllowedOptionalParams,
  WebAppsUpdateFtpAllowedResponse,
  WebAppsGetScmAllowedOptionalParams,
  WebAppsGetScmAllowedResponse,
  WebAppsUpdateScmAllowedOptionalParams,
  WebAppsUpdateScmAllowedResponse,
  StringDictionary,
  WebAppsUpdateApplicationSettingsOptionalParams,
  WebAppsUpdateApplicationSettingsResponse,
  WebAppsListApplicationSettingsOptionalParams,
  WebAppsListApplicationSettingsResponse,
  SiteAuthSettings,
  WebAppsUpdateAuthSettingsOptionalParams,
  WebAppsUpdateAuthSettingsResponse,
  WebAppsGetAuthSettingsOptionalParams,
  WebAppsGetAuthSettingsResponse,
  WebAppsGetAuthSettingsV2WithoutSecretsOptionalParams,
  WebAppsGetAuthSettingsV2WithoutSecretsResponse,
  SiteAuthSettingsV2,
  WebAppsUpdateAuthSettingsV2OptionalParams,
  WebAppsUpdateAuthSettingsV2Response,
  WebAppsGetAuthSettingsV2OptionalParams,
  WebAppsGetAuthSettingsV2Response,
  AzureStoragePropertyDictionaryResource,
  WebAppsUpdateAzureStorageAccountsOptionalParams,
  WebAppsUpdateAzureStorageAccountsResponse,
  WebAppsListAzureStorageAccountsOptionalParams,
  WebAppsListAzureStorageAccountsResponse,
  WebAppsUpdateBackupConfigurationOptionalParams,
  WebAppsUpdateBackupConfigurationResponse,
  WebAppsDeleteBackupConfigurationOptionalParams,
  WebAppsGetBackupConfigurationOptionalParams,
  WebAppsGetBackupConfigurationResponse,
  WebAppsGetAppSettingKeyVaultReferenceOptionalParams,
  WebAppsGetAppSettingKeyVaultReferenceResponse,
  WebAppsGetSiteConnectionStringKeyVaultReferenceOptionalParams,
  WebAppsGetSiteConnectionStringKeyVaultReferenceResponse,
  ConnectionStringDictionary,
  WebAppsUpdateConnectionStringsOptionalParams,
  WebAppsUpdateConnectionStringsResponse,
  WebAppsListConnectionStringsOptionalParams,
  WebAppsListConnectionStringsResponse,
  WebAppsGetDiagnosticLogsConfigurationOptionalParams,
  WebAppsGetDiagnosticLogsConfigurationResponse,
  SiteLogsConfig,
  WebAppsUpdateDiagnosticLogsConfigOptionalParams,
  WebAppsUpdateDiagnosticLogsConfigResponse,
  WebAppsUpdateMetadataOptionalParams,
  WebAppsUpdateMetadataResponse,
  WebAppsListMetadataOptionalParams,
  WebAppsListMetadataResponse,
  WebAppsListPublishingCredentialsOptionalParams,
  WebAppsListPublishingCredentialsResponse,
  PushSettings,
  WebAppsUpdateSitePushSettingsOptionalParams,
  WebAppsUpdateSitePushSettingsResponse,
  WebAppsListSitePushSettingsOptionalParams,
  WebAppsListSitePushSettingsResponse,
  WebAppsListSlotConfigurationNamesOptionalParams,
  WebAppsListSlotConfigurationNamesResponse,
  SlotConfigNamesResource,
  WebAppsUpdateSlotConfigurationNamesOptionalParams,
  WebAppsUpdateSlotConfigurationNamesResponse,
  WebAppsGetConfigurationOptionalParams,
  WebAppsGetConfigurationResponse,
  WebAppsCreateOrUpdateConfigurationOptionalParams,
  WebAppsCreateOrUpdateConfigurationResponse,
  WebAppsUpdateConfigurationOptionalParams,
  WebAppsUpdateConfigurationResponse,
  WebAppsGetConfigurationSnapshotOptionalParams,
  WebAppsGetConfigurationSnapshotResponse,
  WebAppsRecoverSiteConfigurationSnapshotOptionalParams,
  WebAppsGetWebSiteContainerLogsOptionalParams,
  WebAppsGetWebSiteContainerLogsResponse,
  WebAppsGetContainerLogsZipOptionalParams,
  WebAppsGetContainerLogsZipResponse,
  WebAppsGetContinuousWebJobOptionalParams,
  WebAppsGetContinuousWebJobResponse,
  WebAppsDeleteContinuousWebJobOptionalParams,
  WebAppsStartContinuousWebJobOptionalParams,
  WebAppsStopContinuousWebJobOptionalParams,
  WebAppsGetProductionSiteDeploymentStatusOptionalParams,
  WebAppsGetProductionSiteDeploymentStatusResponse,
  WebAppsGetDeploymentOptionalParams,
  WebAppsGetDeploymentResponse,
  WebAppsCreateDeploymentOptionalParams,
  WebAppsCreateDeploymentResponse,
  WebAppsDeleteDeploymentOptionalParams,
  WebAppsListDeploymentLogOptionalParams,
  WebAppsListDeploymentLogResponse,
  WebAppsDiscoverBackupOptionalParams,
  WebAppsDiscoverBackupResponse,
  WebAppsGetDomainOwnershipIdentifierOptionalParams,
  WebAppsGetDomainOwnershipIdentifierResponse,
  WebAppsCreateOrUpdateDomainOwnershipIdentifierOptionalParams,
  WebAppsCreateOrUpdateDomainOwnershipIdentifierResponse,
  WebAppsDeleteDomainOwnershipIdentifierOptionalParams,
  WebAppsUpdateDomainOwnershipIdentifierOptionalParams,
  WebAppsUpdateDomainOwnershipIdentifierResponse,
  WebAppsGetMSDeployStatusOptionalParams,
  WebAppsGetMSDeployStatusResponse,
  MSDeploy,
  WebAppsCreateMSDeployOperationOptionalParams,
  WebAppsCreateMSDeployOperationResponse,
  WebAppsGetMSDeployLogOptionalParams,
  WebAppsGetMSDeployLogResponse,
  WebAppsGetOneDeployStatusOptionalParams,
  WebAppsGetOneDeployStatusResponse,
  WebAppsCreateOneDeployOperationOptionalParams,
  WebAppsCreateOneDeployOperationResponse,
  WebAppsGetFunctionsAdminTokenOptionalParams,
  WebAppsGetFunctionsAdminTokenResponse,
  WebAppsGetFunctionOptionalParams,
  WebAppsGetFunctionResponse,
  WebAppsCreateFunctionOptionalParams,
  WebAppsCreateFunctionResponse,
  WebAppsDeleteFunctionOptionalParams,
  KeyInfo,
  WebAppsCreateOrUpdateFunctionSecretOptionalParams,
  WebAppsCreateOrUpdateFunctionSecretResponse,
  WebAppsDeleteFunctionSecretOptionalParams,
  WebAppsListFunctionKeysOptionalParams,
  WebAppsListFunctionKeysResponse,
  WebAppsListFunctionSecretsOptionalParams,
  WebAppsListFunctionSecretsResponse,
  WebAppsListHostKeysOptionalParams,
  WebAppsListHostKeysResponse,
  WebAppsListSyncStatusOptionalParams,
  WebAppsSyncFunctionsOptionalParams,
  WebAppsCreateOrUpdateHostSecretOptionalParams,
  WebAppsCreateOrUpdateHostSecretResponse,
  WebAppsDeleteHostSecretOptionalParams,
  WebAppsGetHostNameBindingOptionalParams,
  WebAppsGetHostNameBindingResponse,
  WebAppsCreateOrUpdateHostNameBindingOptionalParams,
  WebAppsCreateOrUpdateHostNameBindingResponse,
  WebAppsDeleteHostNameBindingOptionalParams,
  WebAppsGetHybridConnectionOptionalParams,
  WebAppsGetHybridConnectionResponse,
  HybridConnection,
  WebAppsCreateOrUpdateHybridConnectionOptionalParams,
  WebAppsCreateOrUpdateHybridConnectionResponse,
  WebAppsDeleteHybridConnectionOptionalParams,
  WebAppsUpdateHybridConnectionOptionalParams,
  WebAppsUpdateHybridConnectionResponse,
  WebAppsListHybridConnectionsOptionalParams,
  WebAppsListHybridConnectionsResponse,
  WebAppsListRelayServiceConnectionsOptionalParams,
  WebAppsListRelayServiceConnectionsResponse,
  WebAppsGetRelayServiceConnectionOptionalParams,
  WebAppsGetRelayServiceConnectionResponse,
  RelayServiceConnectionEntity,
  WebAppsCreateOrUpdateRelayServiceConnectionOptionalParams,
  WebAppsCreateOrUpdateRelayServiceConnectionResponse,
  WebAppsDeleteRelayServiceConnectionOptionalParams,
  WebAppsUpdateRelayServiceConnectionOptionalParams,
  WebAppsUpdateRelayServiceConnectionResponse,
  WebAppsGetInstanceInfoOptionalParams,
  WebAppsGetInstanceInfoResponse,
  WebAppsGetInstanceMsDeployStatusOptionalParams,
  WebAppsGetInstanceMsDeployStatusResponse,
  WebAppsCreateInstanceMSDeployOperationOptionalParams,
  WebAppsCreateInstanceMSDeployOperationResponse,
  WebAppsGetInstanceMSDeployLogOptionalParams,
  WebAppsGetInstanceMSDeployLogResponse,
  WebAppsGetInstanceProcessOptionalParams,
  WebAppsGetInstanceProcessResponse,
  WebAppsDeleteInstanceProcessOptionalParams,
  WebAppsGetInstanceProcessDumpOptionalParams,
  WebAppsGetInstanceProcessDumpResponse,
  WebAppsGetInstanceProcessModuleOptionalParams,
  WebAppsGetInstanceProcessModuleResponse,
  WebAppsIsCloneableOptionalParams,
  WebAppsIsCloneableResponse,
  WebAppsListSyncFunctionTriggersOptionalParams,
  WebAppsListSyncFunctionTriggersResponse,
  StorageMigrationOptions,
  WebAppsMigrateStorageOptionalParams,
  WebAppsMigrateStorageResponse,
  MigrateMySqlRequest,
  WebAppsMigrateMySqlOptionalParams,
  WebAppsMigrateMySqlResponse,
  WebAppsGetMigrateMySqlStatusOptionalParams,
  WebAppsGetMigrateMySqlStatusResponse,
  WebAppsGetSwiftVirtualNetworkConnectionOptionalParams,
  WebAppsGetSwiftVirtualNetworkConnectionResponse,
  SwiftVirtualNetwork,
  WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionWithCheckOptionalParams,
  WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionWithCheckResponse,
  WebAppsDeleteSwiftVirtualNetworkOptionalParams,
  WebAppsUpdateSwiftVirtualNetworkConnectionWithCheckOptionalParams,
  WebAppsUpdateSwiftVirtualNetworkConnectionWithCheckResponse,
  WebAppsListNetworkFeaturesOptionalParams,
  WebAppsListNetworkFeaturesResponse,
  WebAppsGetNetworkTraceOperationOptionalParams,
  WebAppsGetNetworkTraceOperationResponse,
  WebAppsStartWebSiteNetworkTraceOptionalParams,
  WebAppsStartWebSiteNetworkTraceResponse,
  WebAppsStartWebSiteNetworkTraceOperationOptionalParams,
  WebAppsStartWebSiteNetworkTraceOperationResponse,
  WebAppsStopWebSiteNetworkTraceOptionalParams,
  WebAppsGetNetworkTracesOptionalParams,
  WebAppsGetNetworkTracesResponse,
  WebAppsGetNetworkTraceOperationV2OptionalParams,
  WebAppsGetNetworkTraceOperationV2Response,
  WebAppsGetNetworkTracesV2OptionalParams,
  WebAppsGetNetworkTracesV2Response,
  WebAppsGenerateNewSitePublishingPasswordOptionalParams,
  WebAppsGetSitePhpErrorLogFlagOptionalParams,
  WebAppsGetSitePhpErrorLogFlagResponse,
  WebAppsListPremierAddOnsOptionalParams,
  WebAppsListPremierAddOnsResponse,
  WebAppsGetPremierAddOnOptionalParams,
  WebAppsGetPremierAddOnResponse,
  PremierAddOn,
  WebAppsAddPremierAddOnOptionalParams,
  WebAppsAddPremierAddOnResponse,
  WebAppsDeletePremierAddOnOptionalParams,
  PremierAddOnPatchResource,
  WebAppsUpdatePremierAddOnOptionalParams,
  WebAppsUpdatePremierAddOnResponse,
  WebAppsGetPrivateAccessOptionalParams,
  WebAppsGetPrivateAccessResponse,
  PrivateAccess,
  WebAppsPutPrivateAccessVnetOptionalParams,
  WebAppsPutPrivateAccessVnetResponse,
  WebAppsGetPrivateEndpointConnectionOptionalParams,
  WebAppsGetPrivateEndpointConnectionResponse,
  PrivateLinkConnectionApprovalRequestResource,
  WebAppsApproveOrRejectPrivateEndpointConnectionOptionalParams,
  WebAppsApproveOrRejectPrivateEndpointConnectionResponse,
  WebAppsDeletePrivateEndpointConnectionOptionalParams,
  WebAppsDeletePrivateEndpointConnectionResponse,
  WebAppsGetPrivateLinkResourcesOptionalParams,
  WebAppsGetPrivateLinkResourcesResponse,
  WebAppsGetProcessOptionalParams,
  WebAppsGetProcessResponse,
  WebAppsDeleteProcessOptionalParams,
  WebAppsGetProcessDumpOptionalParams,
  WebAppsGetProcessDumpResponse,
  WebAppsGetProcessModuleOptionalParams,
  WebAppsGetProcessModuleResponse,
  WebAppsGetPublicCertificateOptionalParams,
  WebAppsGetPublicCertificateResponse,
  WebAppsCreateOrUpdatePublicCertificateOptionalParams,
  WebAppsCreateOrUpdatePublicCertificateResponse,
  WebAppsDeletePublicCertificateOptionalParams,
  CsmPublishingProfileOptions,
  WebAppsListPublishingProfileXmlWithSecretsOptionalParams,
  WebAppsListPublishingProfileXmlWithSecretsResponse,
  WebAppsResetProductionSlotConfigOptionalParams,
  WebAppsRestartOptionalParams,
  WebAppsRestoreFromBackupBlobOptionalParams,
  DeletedAppRestoreRequest,
  WebAppsRestoreFromDeletedAppOptionalParams,
  SnapshotRestoreRequest,
  WebAppsRestoreSnapshotOptionalParams,
  WebAppsGetSiteExtensionOptionalParams,
  WebAppsGetSiteExtensionResponse,
  WebAppsInstallSiteExtensionOptionalParams,
  WebAppsInstallSiteExtensionResponse,
  WebAppsDeleteSiteExtensionOptionalParams,
  WebAppsGetSlotOptionalParams,
  WebAppsGetSlotResponse,
  WebAppsCreateOrUpdateSlotOptionalParams,
  WebAppsCreateOrUpdateSlotResponse,
  WebAppsDeleteSlotOptionalParams,
  WebAppsUpdateSlotOptionalParams,
  WebAppsUpdateSlotResponse,
  WebAppsAnalyzeCustomHostnameSlotOptionalParams,
  WebAppsAnalyzeCustomHostnameSlotResponse,
  WebAppsApplySlotConfigurationSlotOptionalParams,
  WebAppsBackupSlotOptionalParams,
  WebAppsBackupSlotResponse,
  WebAppsGetBackupStatusSlotOptionalParams,
  WebAppsGetBackupStatusSlotResponse,
  WebAppsDeleteBackupSlotOptionalParams,
  WebAppsListBackupStatusSecretsSlotOptionalParams,
  WebAppsListBackupStatusSecretsSlotResponse,
  WebAppsRestoreSlotOptionalParams,
  WebAppsGetFtpAllowedSlotOptionalParams,
  WebAppsGetFtpAllowedSlotResponse,
  WebAppsUpdateFtpAllowedSlotOptionalParams,
  WebAppsUpdateFtpAllowedSlotResponse,
  WebAppsGetScmAllowedSlotOptionalParams,
  WebAppsGetScmAllowedSlotResponse,
  WebAppsUpdateScmAllowedSlotOptionalParams,
  WebAppsUpdateScmAllowedSlotResponse,
  WebAppsUpdateApplicationSettingsSlotOptionalParams,
  WebAppsUpdateApplicationSettingsSlotResponse,
  WebAppsListApplicationSettingsSlotOptionalParams,
  WebAppsListApplicationSettingsSlotResponse,
  WebAppsUpdateAuthSettingsSlotOptionalParams,
  WebAppsUpdateAuthSettingsSlotResponse,
  WebAppsGetAuthSettingsSlotOptionalParams,
  WebAppsGetAuthSettingsSlotResponse,
  WebAppsGetAuthSettingsV2WithoutSecretsSlotOptionalParams,
  WebAppsGetAuthSettingsV2WithoutSecretsSlotResponse,
  WebAppsUpdateAuthSettingsV2SlotOptionalParams,
  WebAppsUpdateAuthSettingsV2SlotResponse,
  WebAppsGetAuthSettingsV2SlotOptionalParams,
  WebAppsGetAuthSettingsV2SlotResponse,
  WebAppsUpdateAzureStorageAccountsSlotOptionalParams,
  WebAppsUpdateAzureStorageAccountsSlotResponse,
  WebAppsListAzureStorageAccountsSlotOptionalParams,
  WebAppsListAzureStorageAccountsSlotResponse,
  WebAppsUpdateBackupConfigurationSlotOptionalParams,
  WebAppsUpdateBackupConfigurationSlotResponse,
  WebAppsDeleteBackupConfigurationSlotOptionalParams,
  WebAppsGetBackupConfigurationSlotOptionalParams,
  WebAppsGetBackupConfigurationSlotResponse,
  WebAppsGetAppSettingKeyVaultReferenceSlotOptionalParams,
  WebAppsGetAppSettingKeyVaultReferenceSlotResponse,
  WebAppsGetSiteConnectionStringKeyVaultReferenceSlotOptionalParams,
  WebAppsGetSiteConnectionStringKeyVaultReferenceSlotResponse,
  WebAppsUpdateConnectionStringsSlotOptionalParams,
  WebAppsUpdateConnectionStringsSlotResponse,
  WebAppsListConnectionStringsSlotOptionalParams,
  WebAppsListConnectionStringsSlotResponse,
  WebAppsGetDiagnosticLogsConfigurationSlotOptionalParams,
  WebAppsGetDiagnosticLogsConfigurationSlotResponse,
  WebAppsUpdateDiagnosticLogsConfigSlotOptionalParams,
  WebAppsUpdateDiagnosticLogsConfigSlotResponse,
  WebAppsUpdateMetadataSlotOptionalParams,
  WebAppsUpdateMetadataSlotResponse,
  WebAppsListMetadataSlotOptionalParams,
  WebAppsListMetadataSlotResponse,
  WebAppsListPublishingCredentialsSlotOptionalParams,
  WebAppsListPublishingCredentialsSlotResponse,
  WebAppsUpdateSitePushSettingsSlotOptionalParams,
  WebAppsUpdateSitePushSettingsSlotResponse,
  WebAppsListSitePushSettingsSlotOptionalParams,
  WebAppsListSitePushSettingsSlotResponse,
  WebAppsGetConfigurationSlotOptionalParams,
  WebAppsGetConfigurationSlotResponse,
  WebAppsCreateOrUpdateConfigurationSlotOptionalParams,
  WebAppsCreateOrUpdateConfigurationSlotResponse,
  WebAppsUpdateConfigurationSlotOptionalParams,
  WebAppsUpdateConfigurationSlotResponse,
  WebAppsGetConfigurationSnapshotSlotOptionalParams,
  WebAppsGetConfigurationSnapshotSlotResponse,
  WebAppsRecoverSiteConfigurationSnapshotSlotOptionalParams,
  WebAppsGetWebSiteContainerLogsSlotOptionalParams,
  WebAppsGetWebSiteContainerLogsSlotResponse,
  WebAppsGetContainerLogsZipSlotOptionalParams,
  WebAppsGetContainerLogsZipSlotResponse,
  WebAppsGetContinuousWebJobSlotOptionalParams,
  WebAppsGetContinuousWebJobSlotResponse,
  WebAppsDeleteContinuousWebJobSlotOptionalParams,
  WebAppsStartContinuousWebJobSlotOptionalParams,
  WebAppsStopContinuousWebJobSlotOptionalParams,
  WebAppsGetSlotSiteDeploymentStatusSlotOptionalParams,
  WebAppsGetSlotSiteDeploymentStatusSlotResponse,
  WebAppsGetDeploymentSlotOptionalParams,
  WebAppsGetDeploymentSlotResponse,
  WebAppsCreateDeploymentSlotOptionalParams,
  WebAppsCreateDeploymentSlotResponse,
  WebAppsDeleteDeploymentSlotOptionalParams,
  WebAppsListDeploymentLogSlotOptionalParams,
  WebAppsListDeploymentLogSlotResponse,
  WebAppsDiscoverBackupSlotOptionalParams,
  WebAppsDiscoverBackupSlotResponse,
  WebAppsGetDomainOwnershipIdentifierSlotOptionalParams,
  WebAppsGetDomainOwnershipIdentifierSlotResponse,
  WebAppsCreateOrUpdateDomainOwnershipIdentifierSlotOptionalParams,
  WebAppsCreateOrUpdateDomainOwnershipIdentifierSlotResponse,
  WebAppsDeleteDomainOwnershipIdentifierSlotOptionalParams,
  WebAppsUpdateDomainOwnershipIdentifierSlotOptionalParams,
  WebAppsUpdateDomainOwnershipIdentifierSlotResponse,
  WebAppsGetMSDeployStatusSlotOptionalParams,
  WebAppsGetMSDeployStatusSlotResponse,
  WebAppsCreateMSDeployOperationSlotOptionalParams,
  WebAppsCreateMSDeployOperationSlotResponse,
  WebAppsGetMSDeployLogSlotOptionalParams,
  WebAppsGetMSDeployLogSlotResponse,
  WebAppsGetFunctionsAdminTokenSlotOptionalParams,
  WebAppsGetFunctionsAdminTokenSlotResponse,
  WebAppsGetInstanceFunctionSlotOptionalParams,
  WebAppsGetInstanceFunctionSlotResponse,
  WebAppsCreateInstanceFunctionSlotOptionalParams,
  WebAppsCreateInstanceFunctionSlotResponse,
  WebAppsDeleteInstanceFunctionSlotOptionalParams,
  WebAppsCreateOrUpdateFunctionSecretSlotOptionalParams,
  WebAppsCreateOrUpdateFunctionSecretSlotResponse,
  WebAppsDeleteFunctionSecretSlotOptionalParams,
  WebAppsListFunctionKeysSlotOptionalParams,
  WebAppsListFunctionKeysSlotResponse,
  WebAppsListFunctionSecretsSlotOptionalParams,
  WebAppsListFunctionSecretsSlotResponse,
  WebAppsListHostKeysSlotOptionalParams,
  WebAppsListHostKeysSlotResponse,
  WebAppsListSyncStatusSlotOptionalParams,
  WebAppsSyncFunctionsSlotOptionalParams,
  WebAppsCreateOrUpdateHostSecretSlotOptionalParams,
  WebAppsCreateOrUpdateHostSecretSlotResponse,
  WebAppsDeleteHostSecretSlotOptionalParams,
  WebAppsGetHostNameBindingSlotOptionalParams,
  WebAppsGetHostNameBindingSlotResponse,
  WebAppsCreateOrUpdateHostNameBindingSlotOptionalParams,
  WebAppsCreateOrUpdateHostNameBindingSlotResponse,
  WebAppsDeleteHostNameBindingSlotOptionalParams,
  WebAppsGetHybridConnectionSlotOptionalParams,
  WebAppsGetHybridConnectionSlotResponse,
  WebAppsCreateOrUpdateHybridConnectionSlotOptionalParams,
  WebAppsCreateOrUpdateHybridConnectionSlotResponse,
  WebAppsDeleteHybridConnectionSlotOptionalParams,
  WebAppsUpdateHybridConnectionSlotOptionalParams,
  WebAppsUpdateHybridConnectionSlotResponse,
  WebAppsListHybridConnectionsSlotOptionalParams,
  WebAppsListHybridConnectionsSlotResponse,
  WebAppsListRelayServiceConnectionsSlotOptionalParams,
  WebAppsListRelayServiceConnectionsSlotResponse,
  WebAppsGetRelayServiceConnectionSlotOptionalParams,
  WebAppsGetRelayServiceConnectionSlotResponse,
  WebAppsCreateOrUpdateRelayServiceConnectionSlotOptionalParams,
  WebAppsCreateOrUpdateRelayServiceConnectionSlotResponse,
  WebAppsDeleteRelayServiceConnectionSlotOptionalParams,
  WebAppsUpdateRelayServiceConnectionSlotOptionalParams,
  WebAppsUpdateRelayServiceConnectionSlotResponse,
  WebAppsGetInstanceInfoSlotOptionalParams,
  WebAppsGetInstanceInfoSlotResponse,
  WebAppsGetInstanceMsDeployStatusSlotOptionalParams,
  WebAppsGetInstanceMsDeployStatusSlotResponse,
  WebAppsCreateInstanceMSDeployOperationSlotOptionalParams,
  WebAppsCreateInstanceMSDeployOperationSlotResponse,
  WebAppsGetInstanceMSDeployLogSlotOptionalParams,
  WebAppsGetInstanceMSDeployLogSlotResponse,
  WebAppsGetInstanceProcessSlotOptionalParams,
  WebAppsGetInstanceProcessSlotResponse,
  WebAppsDeleteInstanceProcessSlotOptionalParams,
  WebAppsGetInstanceProcessDumpSlotOptionalParams,
  WebAppsGetInstanceProcessDumpSlotResponse,
  WebAppsGetInstanceProcessModuleSlotOptionalParams,
  WebAppsGetInstanceProcessModuleSlotResponse,
  WebAppsIsCloneableSlotOptionalParams,
  WebAppsIsCloneableSlotResponse,
  WebAppsListSyncFunctionTriggersSlotOptionalParams,
  WebAppsListSyncFunctionTriggersSlotResponse,
  WebAppsGetMigrateMySqlStatusSlotOptionalParams,
  WebAppsGetMigrateMySqlStatusSlotResponse,
  WebAppsGetSwiftVirtualNetworkConnectionSlotOptionalParams,
  WebAppsGetSwiftVirtualNetworkConnectionSlotResponse,
  WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionWithCheckSlotOptionalParams,
  WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionWithCheckSlotResponse,
  WebAppsDeleteSwiftVirtualNetworkSlotOptionalParams,
  WebAppsUpdateSwiftVirtualNetworkConnectionWithCheckSlotOptionalParams,
  WebAppsUpdateSwiftVirtualNetworkConnectionWithCheckSlotResponse,
  WebAppsListNetworkFeaturesSlotOptionalParams,
  WebAppsListNetworkFeaturesSlotResponse,
  WebAppsGetNetworkTraceOperationSlotOptionalParams,
  WebAppsGetNetworkTraceOperationSlotResponse,
  WebAppsStartWebSiteNetworkTraceSlotOptionalParams,
  WebAppsStartWebSiteNetworkTraceSlotResponse,
  WebAppsStartWebSiteNetworkTraceOperationSlotOptionalParams,
  WebAppsStartWebSiteNetworkTraceOperationSlotResponse,
  WebAppsStopWebSiteNetworkTraceSlotOptionalParams,
  WebAppsGetNetworkTracesSlotOptionalParams,
  WebAppsGetNetworkTracesSlotResponse,
  WebAppsGetNetworkTraceOperationSlotV2OptionalParams,
  WebAppsGetNetworkTraceOperationSlotV2Response,
  WebAppsGetNetworkTracesSlotV2OptionalParams,
  WebAppsGetNetworkTracesSlotV2Response,
  WebAppsGenerateNewSitePublishingPasswordSlotOptionalParams,
  WebAppsGetSitePhpErrorLogFlagSlotOptionalParams,
  WebAppsGetSitePhpErrorLogFlagSlotResponse,
  WebAppsListPremierAddOnsSlotOptionalParams,
  WebAppsListPremierAddOnsSlotResponse,
  WebAppsGetPremierAddOnSlotOptionalParams,
  WebAppsGetPremierAddOnSlotResponse,
  WebAppsAddPremierAddOnSlotOptionalParams,
  WebAppsAddPremierAddOnSlotResponse,
  WebAppsDeletePremierAddOnSlotOptionalParams,
  WebAppsUpdatePremierAddOnSlotOptionalParams,
  WebAppsUpdatePremierAddOnSlotResponse,
  WebAppsGetPrivateAccessSlotOptionalParams,
  WebAppsGetPrivateAccessSlotResponse,
  WebAppsPutPrivateAccessVnetSlotOptionalParams,
  WebAppsPutPrivateAccessVnetSlotResponse,
  WebAppsGetPrivateEndpointConnectionSlotOptionalParams,
  WebAppsGetPrivateEndpointConnectionSlotResponse,
  WebAppsApproveOrRejectPrivateEndpointConnectionSlotOptionalParams,
  WebAppsApproveOrRejectPrivateEndpointConnectionSlotResponse,
  WebAppsDeletePrivateEndpointConnectionSlotOptionalParams,
  WebAppsDeletePrivateEndpointConnectionSlotResponse,
  WebAppsGetPrivateLinkResourcesSlotOptionalParams,
  WebAppsGetPrivateLinkResourcesSlotResponse,
  WebAppsGetProcessSlotOptionalParams,
  WebAppsGetProcessSlotResponse,
  WebAppsDeleteProcessSlotOptionalParams,
  WebAppsGetProcessDumpSlotOptionalParams,
  WebAppsGetProcessDumpSlotResponse,
  WebAppsGetProcessModuleSlotOptionalParams,
  WebAppsGetProcessModuleSlotResponse,
  WebAppsGetPublicCertificateSlotOptionalParams,
  WebAppsGetPublicCertificateSlotResponse,
  WebAppsCreateOrUpdatePublicCertificateSlotOptionalParams,
  WebAppsCreateOrUpdatePublicCertificateSlotResponse,
  WebAppsDeletePublicCertificateSlotOptionalParams,
  WebAppsListPublishingProfileXmlWithSecretsSlotOptionalParams,
  WebAppsListPublishingProfileXmlWithSecretsSlotResponse,
  WebAppsResetSlotConfigurationSlotOptionalParams,
  WebAppsRestartSlotOptionalParams,
  WebAppsRestoreFromBackupBlobSlotOptionalParams,
  WebAppsRestoreFromDeletedAppSlotOptionalParams,
  WebAppsRestoreSnapshotSlotOptionalParams,
  WebAppsGetSiteExtensionSlotOptionalParams,
  WebAppsGetSiteExtensionSlotResponse,
  WebAppsInstallSiteExtensionSlotOptionalParams,
  WebAppsInstallSiteExtensionSlotResponse,
  WebAppsDeleteSiteExtensionSlotOptionalParams,
  WebAppsSwapSlotOptionalParams,
  WebAppsGetSourceControlSlotOptionalParams,
  WebAppsGetSourceControlSlotResponse,
  SiteSourceControl,
  WebAppsCreateOrUpdateSourceControlSlotOptionalParams,
  WebAppsCreateOrUpdateSourceControlSlotResponse,
  WebAppsDeleteSourceControlSlotOptionalParams,
  WebAppsUpdateSourceControlSlotOptionalParams,
  WebAppsUpdateSourceControlSlotResponse,
  WebAppsStartSlotOptionalParams,
  WebAppsStartNetworkTraceSlotOptionalParams,
  WebAppsStartNetworkTraceSlotResponse,
  WebAppsStopSlotOptionalParams,
  WebAppsStopNetworkTraceSlotOptionalParams,
  WebAppsSyncRepositorySlotOptionalParams,
  WebAppsSyncFunctionTriggersSlotOptionalParams,
  WebAppsGetTriggeredWebJobSlotOptionalParams,
  WebAppsGetTriggeredWebJobSlotResponse,
  WebAppsDeleteTriggeredWebJobSlotOptionalParams,
  WebAppsGetTriggeredWebJobHistorySlotOptionalParams,
  WebAppsGetTriggeredWebJobHistorySlotResponse,
  WebAppsRunTriggeredWebJobSlotOptionalParams,
  WebAppsListVnetConnectionsSlotOptionalParams,
  WebAppsListVnetConnectionsSlotResponse,
  WebAppsGetVnetConnectionSlotOptionalParams,
  WebAppsGetVnetConnectionSlotResponse,
  VnetInfoResource,
  WebAppsCreateOrUpdateVnetConnectionSlotOptionalParams,
  WebAppsCreateOrUpdateVnetConnectionSlotResponse,
  WebAppsDeleteVnetConnectionSlotOptionalParams,
  WebAppsUpdateVnetConnectionSlotOptionalParams,
  WebAppsUpdateVnetConnectionSlotResponse,
  WebAppsGetVnetConnectionGatewaySlotOptionalParams,
  WebAppsGetVnetConnectionGatewaySlotResponse,
  VnetGateway,
  WebAppsCreateOrUpdateVnetConnectionGatewaySlotOptionalParams,
  WebAppsCreateOrUpdateVnetConnectionGatewaySlotResponse,
  WebAppsUpdateVnetConnectionGatewaySlotOptionalParams,
  WebAppsUpdateVnetConnectionGatewaySlotResponse,
  WebAppsGetWebJobSlotOptionalParams,
  WebAppsGetWebJobSlotResponse,
  WebAppsSwapSlotWithProductionOptionalParams,
  WebAppsGetSourceControlOptionalParams,
  WebAppsGetSourceControlResponse,
  WebAppsCreateOrUpdateSourceControlOptionalParams,
  WebAppsCreateOrUpdateSourceControlResponse,
  WebAppsDeleteSourceControlOptionalParams,
  WebAppsUpdateSourceControlOptionalParams,
  WebAppsUpdateSourceControlResponse,
  WebAppsStartOptionalParams,
  WebAppsStartNetworkTraceOptionalParams,
  WebAppsStartNetworkTraceResponse,
  WebAppsStopOptionalParams,
  WebAppsStopNetworkTraceOptionalParams,
  WebAppsSyncRepositoryOptionalParams,
  WebAppsSyncFunctionTriggersOptionalParams,
  WebAppsGetTriggeredWebJobOptionalParams,
  WebAppsGetTriggeredWebJobResponse,
  WebAppsDeleteTriggeredWebJobOptionalParams,
  WebAppsGetTriggeredWebJobHistoryOptionalParams,
  WebAppsGetTriggeredWebJobHistoryResponse,
  WebAppsRunTriggeredWebJobOptionalParams,
  WebAppsListVnetConnectionsOptionalParams,
  WebAppsListVnetConnectionsResponse,
  WebAppsGetVnetConnectionOptionalParams,
  WebAppsGetVnetConnectionResponse,
  WebAppsCreateOrUpdateVnetConnectionOptionalParams,
  WebAppsCreateOrUpdateVnetConnectionResponse,
  WebAppsDeleteVnetConnectionOptionalParams,
  WebAppsUpdateVnetConnectionOptionalParams,
  WebAppsUpdateVnetConnectionResponse,
  WebAppsGetVnetConnectionGatewayOptionalParams,
  WebAppsGetVnetConnectionGatewayResponse,
  WebAppsCreateOrUpdateVnetConnectionGatewayOptionalParams,
  WebAppsCreateOrUpdateVnetConnectionGatewayResponse,
  WebAppsUpdateVnetConnectionGatewayOptionalParams,
  WebAppsUpdateVnetConnectionGatewayResponse,
  WebAppsGetWebJobOptionalParams,
  WebAppsGetWebJobResponse,
  WebAppsListNextResponse,
  WebAppsListByResourceGroupNextResponse,
  WebAppsListBackupsNextResponse,
  WebAppsListBasicPublishingCredentialsPoliciesNextResponse,
  WebAppsListConfigurationsNextResponse,
  WebAppsGetAppSettingsKeyVaultReferencesNextResponse,
  WebAppsGetSiteConnectionStringKeyVaultReferencesNextResponse,
  WebAppsListConfigurationSnapshotInfoNextResponse,
  WebAppsListContinuousWebJobsNextResponse,
  WebAppsListProductionSiteDeploymentStatusesNextResponse,
  WebAppsListDeploymentsNextResponse,
  WebAppsListDomainOwnershipIdentifiersNextResponse,
  WebAppsListFunctionsNextResponse,
  WebAppsListHostNameBindingsNextResponse,
  WebAppsListInstanceIdentifiersNextResponse,
  WebAppsListInstanceProcessesNextResponse,
  WebAppsListInstanceProcessModulesNextResponse,
  WebAppsListInstanceProcessThreadsNextResponse,
  WebAppsListSiteBackupsNextResponse,
  WebAppsListPerfMonCountersNextResponse,
  WebAppsGetPrivateEndpointConnectionListNextResponse,
  WebAppsListProcessesNextResponse,
  WebAppsListProcessModulesNextResponse,
  WebAppsListProcessThreadsNextResponse,
  WebAppsListPublicCertificatesNextResponse,
  WebAppsListSiteExtensionsNextResponse,
  WebAppsListSlotsNextResponse,
  WebAppsListBackupsSlotNextResponse,
  WebAppsListBasicPublishingCredentialsPoliciesSlotNextResponse,
  WebAppsListConfigurationsSlotNextResponse,
  WebAppsGetAppSettingsKeyVaultReferencesSlotNextResponse,
  WebAppsGetSiteConnectionStringKeyVaultReferencesSlotNextResponse,
  WebAppsListConfigurationSnapshotInfoSlotNextResponse,
  WebAppsListContinuousWebJobsSlotNextResponse,
  WebAppsListSlotSiteDeploymentStatusesSlotNextResponse,
  WebAppsListDeploymentsSlotNextResponse,
  WebAppsListDomainOwnershipIdentifiersSlotNextResponse,
  WebAppsListInstanceFunctionsSlotNextResponse,
  WebAppsListHostNameBindingsSlotNextResponse,
  WebAppsListInstanceIdentifiersSlotNextResponse,
  WebAppsListInstanceProcessesSlotNextResponse,
  WebAppsListInstanceProcessModulesSlotNextResponse,
  WebAppsListInstanceProcessThreadsSlotNextResponse,
  WebAppsListSiteBackupsSlotNextResponse,
  WebAppsListPerfMonCountersSlotNextResponse,
  WebAppsGetPrivateEndpointConnectionListSlotNextResponse,
  WebAppsListProcessesSlotNextResponse,
  WebAppsListProcessModulesSlotNextResponse,
  WebAppsListProcessThreadsSlotNextResponse,
  WebAppsListPublicCertificatesSlotNextResponse,
  WebAppsListSiteExtensionsSlotNextResponse,
  WebAppsListSlotDifferencesSlotNextResponse,
  WebAppsListSnapshotsSlotNextResponse,
  WebAppsListSnapshotsFromDRSecondarySlotNextResponse,
  WebAppsListTriggeredWebJobsSlotNextResponse,
  WebAppsListTriggeredWebJobHistorySlotNextResponse,
  WebAppsListUsagesSlotNextResponse,
  WebAppsListWebJobsSlotNextResponse,
  WebAppsListSlotDifferencesFromProductionNextResponse,
  WebAppsListSnapshotsNextResponse,
  WebAppsListSnapshotsFromDRSecondaryNextResponse,
  WebAppsListTriggeredWebJobsNextResponse,
  WebAppsListTriggeredWebJobHistoryNextResponse,
  WebAppsListUsagesNextResponse,
  WebAppsListWebJobsNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing WebApps operations. */
export class WebAppsImpl implements WebApps {
  private readonly client: WebSiteManagementClient;

  /**
   * Initialize a new instance of the class WebApps class.
   * @param client Reference to the service client
   */
  constructor(client: WebSiteManagementClient) {
    this.client = client;
  }

  /**
   * Description for Get all apps for a subscription.
   * @param options The options parameters.
   */
  public list(
    options?: WebAppsListOptionalParams
  ): PagedAsyncIterableIterator<Site> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(options, settings);
      }
    };
  }

  private async *listPagingPage(
    options?: WebAppsListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Site[]> {
    let result: WebAppsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    options?: WebAppsListOptionalParams
  ): AsyncIterableIterator<Site> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Description for Gets all web, mobile, and API apps in the specified resource group.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: WebAppsListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<Site> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: WebAppsListByResourceGroupOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Site[]> {
    let result: WebAppsListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: WebAppsListByResourceGroupOptionalParams
  ): AsyncIterableIterator<Site> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Gets existing backups of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  public listBackups(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListBackupsOptionalParams
  ): PagedAsyncIterableIterator<BackupItem> {
    const iter = this.listBackupsPagingAll(resourceGroupName, name, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBackupsPagingPage(
          resourceGroupName,
          name,
          options,
          settings
        );
      }
    };
  }

  private async *listBackupsPagingPage(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListBackupsOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<BackupItem[]> {
    let result: WebAppsListBackupsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBackups(resourceGroupName, name, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBackupsNext(
        resourceGroupName,
        name,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBackupsPagingAll(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListBackupsOptionalParams
  ): AsyncIterableIterator<BackupItem> {
    for await (const page of this.listBackupsPagingPage(
      resourceGroupName,
      name,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Returns whether Scm basic auth is allowed and whether Ftp is allowed for a given
   * site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  public listBasicPublishingCredentialsPolicies(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListBasicPublishingCredentialsPoliciesOptionalParams
  ): PagedAsyncIterableIterator<CsmPublishingCredentialsPoliciesEntity> {
    const iter = this.listBasicPublishingCredentialsPoliciesPagingAll(
      resourceGroupName,
      name,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBasicPublishingCredentialsPoliciesPagingPage(
          resourceGroupName,
          name,
          options,
          settings
        );
      }
    };
  }

  private async *listBasicPublishingCredentialsPoliciesPagingPage(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListBasicPublishingCredentialsPoliciesOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<CsmPublishingCredentialsPoliciesEntity[]> {
    let result: WebAppsListBasicPublishingCredentialsPoliciesResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBasicPublishingCredentialsPolicies(
        resourceGroupName,
        name,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBasicPublishingCredentialsPoliciesNext(
        resourceGroupName,
        name,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBasicPublishingCredentialsPoliciesPagingAll(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListBasicPublishingCredentialsPoliciesOptionalParams
  ): AsyncIterableIterator<CsmPublishingCredentialsPoliciesEntity> {
    for await (const page of this.listBasicPublishingCredentialsPoliciesPagingPage(
      resourceGroupName,
      name,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for List the configurations of an app
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  public listConfigurations(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListConfigurationsOptionalParams
  ): PagedAsyncIterableIterator<SiteConfigResource> {
    const iter = this.listConfigurationsPagingAll(
      resourceGroupName,
      name,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listConfigurationsPagingPage(
          resourceGroupName,
          name,
          options,
          settings
        );
      }
    };
  }

  private async *listConfigurationsPagingPage(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListConfigurationsOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<SiteConfigResource[]> {
    let result: WebAppsListConfigurationsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listConfigurations(resourceGroupName, name, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listConfigurationsNext(
        resourceGroupName,
        name,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listConfigurationsPagingAll(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListConfigurationsOptionalParams
  ): AsyncIterableIterator<SiteConfigResource> {
    for await (const page of this.listConfigurationsPagingPage(
      resourceGroupName,
      name,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Gets the config reference app settings and status of an app
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  public listAppSettingsKeyVaultReferences(
    resourceGroupName: string,
    name: string,
    options?: WebAppsGetAppSettingsKeyVaultReferencesOptionalParams
  ): PagedAsyncIterableIterator<ApiKVReference> {
    const iter = this.getAppSettingsKeyVaultReferencesPagingAll(
      resourceGroupName,
      name,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.getAppSettingsKeyVaultReferencesPagingPage(
          resourceGroupName,
          name,
          options,
          settings
        );
      }
    };
  }

  private async *getAppSettingsKeyVaultReferencesPagingPage(
    resourceGroupName: string,
    name: string,
    options?: WebAppsGetAppSettingsKeyVaultReferencesOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ApiKVReference[]> {
    let result: WebAppsGetAppSettingsKeyVaultReferencesResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._getAppSettingsKeyVaultReferences(
        resourceGroupName,
        name,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._getAppSettingsKeyVaultReferencesNext(
        resourceGroupName,
        name,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *getAppSettingsKeyVaultReferencesPagingAll(
    resourceGroupName: string,
    name: string,
    options?: WebAppsGetAppSettingsKeyVaultReferencesOptionalParams
  ): AsyncIterableIterator<ApiKVReference> {
    for await (const page of this.getAppSettingsKeyVaultReferencesPagingPage(
      resourceGroupName,
      name,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Gets the config reference app settings and status of an app
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  public listSiteConnectionStringKeyVaultReferences(
    resourceGroupName: string,
    name: string,
    options?: WebAppsGetSiteConnectionStringKeyVaultReferencesOptionalParams
  ): PagedAsyncIterableIterator<ApiKVReference> {
    const iter = this.getSiteConnectionStringKeyVaultReferencesPagingAll(
      resourceGroupName,
      name,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.getSiteConnectionStringKeyVaultReferencesPagingPage(
          resourceGroupName,
          name,
          options,
          settings
        );
      }
    };
  }

  private async *getSiteConnectionStringKeyVaultReferencesPagingPage(
    resourceGroupName: string,
    name: string,
    options?: WebAppsGetSiteConnectionStringKeyVaultReferencesOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ApiKVReference[]> {
    let result: WebAppsGetSiteConnectionStringKeyVaultReferencesResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._getSiteConnectionStringKeyVaultReferences(
        resourceGroupName,
        name,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._getSiteConnectionStringKeyVaultReferencesNext(
        resourceGroupName,
        name,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *getSiteConnectionStringKeyVaultReferencesPagingAll(
    resourceGroupName: string,
    name: string,
    options?: WebAppsGetSiteConnectionStringKeyVaultReferencesOptionalParams
  ): AsyncIterableIterator<ApiKVReference> {
    for await (const page of this.getSiteConnectionStringKeyVaultReferencesPagingPage(
      resourceGroupName,
      name,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Gets a list of web app configuration snapshots identifiers. Each element of the list
   * contains a timestamp and the ID of the snapshot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  public listConfigurationSnapshotInfo(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListConfigurationSnapshotInfoOptionalParams
  ): PagedAsyncIterableIterator<SiteConfigurationSnapshotInfo> {
    const iter = this.listConfigurationSnapshotInfoPagingAll(
      resourceGroupName,
      name,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listConfigurationSnapshotInfoPagingPage(
          resourceGroupName,
          name,
          options,
          settings
        );
      }
    };
  }

  private async *listConfigurationSnapshotInfoPagingPage(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListConfigurationSnapshotInfoOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<SiteConfigurationSnapshotInfo[]> {
    let result: WebAppsListConfigurationSnapshotInfoResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listConfigurationSnapshotInfo(
        resourceGroupName,
        name,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listConfigurationSnapshotInfoNext(
        resourceGroupName,
        name,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listConfigurationSnapshotInfoPagingAll(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListConfigurationSnapshotInfoOptionalParams
  ): AsyncIterableIterator<SiteConfigurationSnapshotInfo> {
    for await (const page of this.listConfigurationSnapshotInfoPagingPage(
      resourceGroupName,
      name,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for List continuous web jobs for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param options The options parameters.
   */
  public listContinuousWebJobs(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListContinuousWebJobsOptionalParams
  ): PagedAsyncIterableIterator<ContinuousWebJob> {
    const iter = this.listContinuousWebJobsPagingAll(
      resourceGroupName,
      name,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listContinuousWebJobsPagingPage(
          resourceGroupName,
          name,
          options,
          settings
        );
      }
    };
  }

  private async *listContinuousWebJobsPagingPage(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListContinuousWebJobsOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ContinuousWebJob[]> {
    let result: WebAppsListContinuousWebJobsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listContinuousWebJobs(
        resourceGroupName,
        name,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listContinuousWebJobsNext(
        resourceGroupName,
        name,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listContinuousWebJobsPagingAll(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListContinuousWebJobsOptionalParams
  ): AsyncIterableIterator<ContinuousWebJob> {
    for await (const page of this.listContinuousWebJobsPagingPage(
      resourceGroupName,
      name,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List deployment statuses for an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  public listProductionSiteDeploymentStatuses(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListProductionSiteDeploymentStatusesOptionalParams
  ): PagedAsyncIterableIterator<CsmDeploymentStatus> {
    const iter = this.listProductionSiteDeploymentStatusesPagingAll(
      resourceGroupName,
      name,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listProductionSiteDeploymentStatusesPagingPage(
          resourceGroupName,
          name,
          options,
          settings
        );
      }
    };
  }

  private async *listProductionSiteDeploymentStatusesPagingPage(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListProductionSiteDeploymentStatusesOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<CsmDeploymentStatus[]> {
    let result: WebAppsListProductionSiteDeploymentStatusesResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listProductionSiteDeploymentStatuses(
        resourceGroupName,
        name,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listProductionSiteDeploymentStatusesNext(
        resourceGroupName,
        name,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listProductionSiteDeploymentStatusesPagingAll(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListProductionSiteDeploymentStatusesOptionalParams
  ): AsyncIterableIterator<CsmDeploymentStatus> {
    for await (const page of this.listProductionSiteDeploymentStatusesPagingPage(
      resourceGroupName,
      name,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for List deployments for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  public listDeployments(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListDeploymentsOptionalParams
  ): PagedAsyncIterableIterator<Deployment> {
    const iter = this.listDeploymentsPagingAll(
      resourceGroupName,
      name,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listDeploymentsPagingPage(
          resourceGroupName,
          name,
          options,
          settings
        );
      }
    };
  }

  private async *listDeploymentsPagingPage(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListDeploymentsOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Deployment[]> {
    let result: WebAppsListDeploymentsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listDeployments(resourceGroupName, name, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listDeploymentsNext(
        resourceGroupName,
        name,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listDeploymentsPagingAll(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListDeploymentsOptionalParams
  ): AsyncIterableIterator<Deployment> {
    for await (const page of this.listDeploymentsPagingPage(
      resourceGroupName,
      name,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Lists ownership identifiers for domain associated with web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  public listDomainOwnershipIdentifiers(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListDomainOwnershipIdentifiersOptionalParams
  ): PagedAsyncIterableIterator<Identifier> {
    const iter = this.listDomainOwnershipIdentifiersPagingAll(
      resourceGroupName,
      name,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listDomainOwnershipIdentifiersPagingPage(
          resourceGroupName,
          name,
          options,
          settings
        );
      }
    };
  }

  private async *listDomainOwnershipIdentifiersPagingPage(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListDomainOwnershipIdentifiersOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Identifier[]> {
    let result: WebAppsListDomainOwnershipIdentifiersResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listDomainOwnershipIdentifiers(
        resourceGroupName,
        name,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listDomainOwnershipIdentifiersNext(
        resourceGroupName,
        name,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listDomainOwnershipIdentifiersPagingAll(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListDomainOwnershipIdentifiersOptionalParams
  ): AsyncIterableIterator<Identifier> {
    for await (const page of this.listDomainOwnershipIdentifiersPagingPage(
      resourceGroupName,
      name,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for List the functions for a web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param options The options parameters.
   */
  public listFunctions(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListFunctionsOptionalParams
  ): PagedAsyncIterableIterator<FunctionEnvelope> {
    const iter = this.listFunctionsPagingAll(resourceGroupName, name, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listFunctionsPagingPage(
          resourceGroupName,
          name,
          options,
          settings
        );
      }
    };
  }

  private async *listFunctionsPagingPage(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListFunctionsOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<FunctionEnvelope[]> {
    let result: WebAppsListFunctionsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listFunctions(resourceGroupName, name, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listFunctionsNext(
        resourceGroupName,
        name,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listFunctionsPagingAll(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListFunctionsOptionalParams
  ): AsyncIterableIterator<FunctionEnvelope> {
    for await (const page of this.listFunctionsPagingPage(
      resourceGroupName,
      name,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Get hostname bindings for an app or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  public listHostNameBindings(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListHostNameBindingsOptionalParams
  ): PagedAsyncIterableIterator<HostNameBinding> {
    const iter = this.listHostNameBindingsPagingAll(
      resourceGroupName,
      name,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listHostNameBindingsPagingPage(
          resourceGroupName,
          name,
          options,
          settings
        );
      }
    };
  }

  private async *listHostNameBindingsPagingPage(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListHostNameBindingsOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<HostNameBinding[]> {
    let result: WebAppsListHostNameBindingsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listHostNameBindings(
        resourceGroupName,
        name,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listHostNameBindingsNext(
        resourceGroupName,
        name,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listHostNameBindingsPagingAll(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListHostNameBindingsOptionalParams
  ): AsyncIterableIterator<HostNameBinding> {
    for await (const page of this.listHostNameBindingsPagingPage(
      resourceGroupName,
      name,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Gets all scale-out instances of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  public listInstanceIdentifiers(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListInstanceIdentifiersOptionalParams
  ): PagedAsyncIterableIterator<WebSiteInstanceStatus> {
    const iter = this.listInstanceIdentifiersPagingAll(
      resourceGroupName,
      name,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listInstanceIdentifiersPagingPage(
          resourceGroupName,
          name,
          options,
          settings
        );
      }
    };
  }

  private async *listInstanceIdentifiersPagingPage(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListInstanceIdentifiersOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<WebSiteInstanceStatus[]> {
    let result: WebAppsListInstanceIdentifiersResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listInstanceIdentifiers(
        resourceGroupName,
        name,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listInstanceIdentifiersNext(
        resourceGroupName,
        name,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listInstanceIdentifiersPagingAll(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListInstanceIdentifiersOptionalParams
  ): AsyncIterableIterator<WebSiteInstanceStatus> {
    for await (const page of this.listInstanceIdentifiersPagingPage(
      resourceGroupName,
      name,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Get list of processes for a web site, or a deployment slot, or for a specific
   * scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in
   *                   the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The options parameters.
   */
  public listInstanceProcesses(
    resourceGroupName: string,
    name: string,
    instanceId: string,
    options?: WebAppsListInstanceProcessesOptionalParams
  ): PagedAsyncIterableIterator<ProcessInfo> {
    const iter = this.listInstanceProcessesPagingAll(
      resourceGroupName,
      name,
      instanceId,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listInstanceProcessesPagingPage(
          resourceGroupName,
          name,
          instanceId,
          options,
          settings
        );
      }
    };
  }

  private async *listInstanceProcessesPagingPage(
    resourceGroupName: string,
    name: string,
    instanceId: string,
    options?: WebAppsListInstanceProcessesOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ProcessInfo[]> {
    let result: WebAppsListInstanceProcessesResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listInstanceProcesses(
        resourceGroupName,
        name,
        instanceId,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listInstanceProcessesNext(
        resourceGroupName,
        name,
        instanceId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listInstanceProcessesPagingAll(
    resourceGroupName: string,
    name: string,
    instanceId: string,
    options?: WebAppsListInstanceProcessesOptionalParams
  ): AsyncIterableIterator<ProcessInfo> {
    for await (const page of this.listInstanceProcessesPagingPage(
      resourceGroupName,
      name,
      instanceId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for List module information for a process by its ID for a specific scaled-out instance
   * in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in
   *                   the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The options parameters.
   */
  public listInstanceProcessModules(
    resourceGroupName: string,
    name: string,
    processId: string,
    instanceId: string,
    options?: WebAppsListInstanceProcessModulesOptionalParams
  ): PagedAsyncIterableIterator<ProcessModuleInfo> {
    const iter = this.listInstanceProcessModulesPagingAll(
      resourceGroupName,
      name,
      processId,
      instanceId,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listInstanceProcessModulesPagingPage(
          resourceGroupName,
          name,
          processId,
          instanceId,
          options,
          settings
        );
      }
    };
  }

  private async *listInstanceProcessModulesPagingPage(
    resourceGroupName: string,
    name: string,
    processId: string,
    instanceId: string,
    options?: WebAppsListInstanceProcessModulesOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ProcessModuleInfo[]> {
    let result: WebAppsListInstanceProcessModulesResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listInstanceProcessModules(
        resourceGroupName,
        name,
        processId,
        instanceId,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listInstanceProcessModulesNext(
        resourceGroupName,
        name,
        processId,
        instanceId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listInstanceProcessModulesPagingAll(
    resourceGroupName: string,
    name: string,
    processId: string,
    instanceId: string,
    options?: WebAppsListInstanceProcessModulesOptionalParams
  ): AsyncIterableIterator<ProcessModuleInfo> {
    for await (const page of this.listInstanceProcessModulesPagingPage(
      resourceGroupName,
      name,
      processId,
      instanceId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for List the threads in a process by its ID for a specific scaled-out instance in a web
   * site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in
   *                   the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The options parameters.
   */
  public listInstanceProcessThreads(
    resourceGroupName: string,
    name: string,
    processId: string,
    instanceId: string,
    options?: WebAppsListInstanceProcessThreadsOptionalParams
  ): PagedAsyncIterableIterator<ProcessThreadInfo> {
    const iter = this.listInstanceProcessThreadsPagingAll(
      resourceGroupName,
      name,
      processId,
      instanceId,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listInstanceProcessThreadsPagingPage(
          resourceGroupName,
          name,
          processId,
          instanceId,
          options,
          settings
        );
      }
    };
  }

  private async *listInstanceProcessThreadsPagingPage(
    resourceGroupName: string,
    name: string,
    processId: string,
    instanceId: string,
    options?: WebAppsListInstanceProcessThreadsOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ProcessThreadInfo[]> {
    let result: WebAppsListInstanceProcessThreadsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listInstanceProcessThreads(
        resourceGroupName,
        name,
        processId,
        instanceId,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listInstanceProcessThreadsNext(
        resourceGroupName,
        name,
        processId,
        instanceId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listInstanceProcessThreadsPagingAll(
    resourceGroupName: string,
    name: string,
    processId: string,
    instanceId: string,
    options?: WebAppsListInstanceProcessThreadsOptionalParams
  ): AsyncIterableIterator<ProcessThreadInfo> {
    for await (const page of this.listInstanceProcessThreadsPagingPage(
      resourceGroupName,
      name,
      processId,
      instanceId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Gets existing backups of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  public listSiteBackups(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListSiteBackupsOptionalParams
  ): PagedAsyncIterableIterator<BackupItem> {
    const iter = this.listSiteBackupsPagingAll(
      resourceGroupName,
      name,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listSiteBackupsPagingPage(
          resourceGroupName,
          name,
          options,
          settings
        );
      }
    };
  }

  private async *listSiteBackupsPagingPage(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListSiteBackupsOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<BackupItem[]> {
    let result: WebAppsListSiteBackupsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listSiteBackups(resourceGroupName, name, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listSiteBackupsNext(
        resourceGroupName,
        name,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listSiteBackupsPagingAll(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListSiteBackupsOptionalParams
  ): AsyncIterableIterator<BackupItem> {
    for await (const page of this.listSiteBackupsPagingPage(
      resourceGroupName,
      name,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Gets perfmon counters for web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param options The options parameters.
   */
  public listPerfMonCounters(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListPerfMonCountersOptionalParams
  ): PagedAsyncIterableIterator<PerfMonResponse> {
    const iter = this.listPerfMonCountersPagingAll(
      resourceGroupName,
      name,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPerfMonCountersPagingPage(
          resourceGroupName,
          name,
          options,
          settings
        );
      }
    };
  }

  private async *listPerfMonCountersPagingPage(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListPerfMonCountersOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<PerfMonResponse[]> {
    let result: WebAppsListPerfMonCountersResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listPerfMonCounters(
        resourceGroupName,
        name,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listPerfMonCountersNext(
        resourceGroupName,
        name,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPerfMonCountersPagingAll(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListPerfMonCountersOptionalParams
  ): AsyncIterableIterator<PerfMonResponse> {
    for await (const page of this.listPerfMonCountersPagingPage(
      resourceGroupName,
      name,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Gets the list of private endpoint connections associated with a site
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the site.
   * @param options The options parameters.
   */
  public listPrivateEndpointConnectionList(
    resourceGroupName: string,
    name: string,
    options?: WebAppsGetPrivateEndpointConnectionListOptionalParams
  ): PagedAsyncIterableIterator<RemotePrivateEndpointConnectionARMResource> {
    const iter = this.getPrivateEndpointConnectionListPagingAll(
      resourceGroupName,
      name,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.getPrivateEndpointConnectionListPagingPage(
          resourceGroupName,
          name,
          options,
          settings
        );
      }
    };
  }

  private async *getPrivateEndpointConnectionListPagingPage(
    resourceGroupName: string,
    name: string,
    options?: WebAppsGetPrivateEndpointConnectionListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<RemotePrivateEndpointConnectionARMResource[]> {
    let result: WebAppsGetPrivateEndpointConnectionListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._getPrivateEndpointConnectionList(
        resourceGroupName,
        name,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._getPrivateEndpointConnectionListNext(
        resourceGroupName,
        name,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *getPrivateEndpointConnectionListPagingAll(
    resourceGroupName: string,
    name: string,
    options?: WebAppsGetPrivateEndpointConnectionListOptionalParams
  ): AsyncIterableIterator<RemotePrivateEndpointConnectionARMResource> {
    for await (const page of this.getPrivateEndpointConnectionListPagingPage(
      resourceGroupName,
      name,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Get list of processes for a web site, or a deployment slot, or for a specific
   * scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param options The options parameters.
   */
  public listProcesses(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListProcessesOptionalParams
  ): PagedAsyncIterableIterator<ProcessInfo> {
    const iter = this.listProcessesPagingAll(resourceGroupName, name, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listProcessesPagingPage(
          resourceGroupName,
          name,
          options,
          settings
        );
      }
    };
  }

  private async *listProcessesPagingPage(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListProcessesOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ProcessInfo[]> {
    let result: WebAppsListProcessesResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listProcesses(resourceGroupName, name, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listProcessesNext(
        resourceGroupName,
        name,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listProcessesPagingAll(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListProcessesOptionalParams
  ): AsyncIterableIterator<ProcessInfo> {
    for await (const page of this.listProcessesPagingPage(
      resourceGroupName,
      name,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for List module information for a process by its ID for a specific scaled-out instance
   * in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param options The options parameters.
   */
  public listProcessModules(
    resourceGroupName: string,
    name: string,
    processId: string,
    options?: WebAppsListProcessModulesOptionalParams
  ): PagedAsyncIterableIterator<ProcessModuleInfo> {
    const iter = this.listProcessModulesPagingAll(
      resourceGroupName,
      name,
      processId,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listProcessModulesPagingPage(
          resourceGroupName,
          name,
          processId,
          options,
          settings
        );
      }
    };
  }

  private async *listProcessModulesPagingPage(
    resourceGroupName: string,
    name: string,
    processId: string,
    options?: WebAppsListProcessModulesOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ProcessModuleInfo[]> {
    let result: WebAppsListProcessModulesResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listProcessModules(
        resourceGroupName,
        name,
        processId,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listProcessModulesNext(
        resourceGroupName,
        name,
        processId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listProcessModulesPagingAll(
    resourceGroupName: string,
    name: string,
    processId: string,
    options?: WebAppsListProcessModulesOptionalParams
  ): AsyncIterableIterator<ProcessModuleInfo> {
    for await (const page of this.listProcessModulesPagingPage(
      resourceGroupName,
      name,
      processId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for List the threads in a process by its ID for a specific scaled-out instance in a web
   * site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param options The options parameters.
   */
  public listProcessThreads(
    resourceGroupName: string,
    name: string,
    processId: string,
    options?: WebAppsListProcessThreadsOptionalParams
  ): PagedAsyncIterableIterator<ProcessThreadInfo> {
    const iter = this.listProcessThreadsPagingAll(
      resourceGroupName,
      name,
      processId,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listProcessThreadsPagingPage(
          resourceGroupName,
          name,
          processId,
          options,
          settings
        );
      }
    };
  }

  private async *listProcessThreadsPagingPage(
    resourceGroupName: string,
    name: string,
    processId: string,
    options?: WebAppsListProcessThreadsOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ProcessThreadInfo[]> {
    let result: WebAppsListProcessThreadsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listProcessThreads(
        resourceGroupName,
        name,
        processId,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listProcessThreadsNext(
        resourceGroupName,
        name,
        processId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listProcessThreadsPagingAll(
    resourceGroupName: string,
    name: string,
    processId: string,
    options?: WebAppsListProcessThreadsOptionalParams
  ): AsyncIterableIterator<ProcessThreadInfo> {
    for await (const page of this.listProcessThreadsPagingPage(
      resourceGroupName,
      name,
      processId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Get public certificates for an app or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  public listPublicCertificates(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListPublicCertificatesOptionalParams
  ): PagedAsyncIterableIterator<PublicCertificate> {
    const iter = this.listPublicCertificatesPagingAll(
      resourceGroupName,
      name,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPublicCertificatesPagingPage(
          resourceGroupName,
          name,
          options,
          settings
        );
      }
    };
  }

  private async *listPublicCertificatesPagingPage(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListPublicCertificatesOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<PublicCertificate[]> {
    let result: WebAppsListPublicCertificatesResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listPublicCertificates(
        resourceGroupName,
        name,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listPublicCertificatesNext(
        resourceGroupName,
        name,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPublicCertificatesPagingAll(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListPublicCertificatesOptionalParams
  ): AsyncIterableIterator<PublicCertificate> {
    for await (const page of this.listPublicCertificatesPagingPage(
      resourceGroupName,
      name,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Get list of siteextensions for a web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param options The options parameters.
   */
  public listSiteExtensions(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListSiteExtensionsOptionalParams
  ): PagedAsyncIterableIterator<SiteExtensionInfo> {
    const iter = this.listSiteExtensionsPagingAll(
      resourceGroupName,
      name,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listSiteExtensionsPagingPage(
          resourceGroupName,
          name,
          options,
          settings
        );
      }
    };
  }

  private async *listSiteExtensionsPagingPage(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListSiteExtensionsOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<SiteExtensionInfo[]> {
    let result: WebAppsListSiteExtensionsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listSiteExtensions(resourceGroupName, name, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listSiteExtensionsNext(
        resourceGroupName,
        name,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listSiteExtensionsPagingAll(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListSiteExtensionsOptionalParams
  ): AsyncIterableIterator<SiteExtensionInfo> {
    for await (const page of this.listSiteExtensionsPagingPage(
      resourceGroupName,
      name,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Gets an app's deployment slots.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  public listSlots(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListSlotsOptionalParams
  ): PagedAsyncIterableIterator<Site> {
    const iter = this.listSlotsPagingAll(resourceGroupName, name, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listSlotsPagingPage(
          resourceGroupName,
          name,
          options,
          settings
        );
      }
    };
  }

  private async *listSlotsPagingPage(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListSlotsOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Site[]> {
    let result: WebAppsListSlotsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listSlots(resourceGroupName, name, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listSlotsNext(
        resourceGroupName,
        name,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listSlotsPagingAll(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListSlotsOptionalParams
  ): AsyncIterableIterator<Site> {
    for await (const page of this.listSlotsPagingPage(
      resourceGroupName,
      name,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Gets existing backups of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get backups of the
   *             production slot.
   * @param options The options parameters.
   */
  public listBackupsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListBackupsSlotOptionalParams
  ): PagedAsyncIterableIterator<BackupItem> {
    const iter = this.listBackupsSlotPagingAll(
      resourceGroupName,
      name,
      slot,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBackupsSlotPagingPage(
          resourceGroupName,
          name,
          slot,
          options,
          settings
        );
      }
    };
  }

  private async *listBackupsSlotPagingPage(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListBackupsSlotOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<BackupItem[]> {
    let result: WebAppsListBackupsSlotResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBackupsSlot(
        resourceGroupName,
        name,
        slot,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBackupsSlotNext(
        resourceGroupName,
        name,
        slot,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBackupsSlotPagingAll(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListBackupsSlotOptionalParams
  ): AsyncIterableIterator<BackupItem> {
    for await (const page of this.listBackupsSlotPagingPage(
      resourceGroupName,
      name,
      slot,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Returns whether Scm basic auth is allowed and whether Ftp is allowed for a given
   * site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot
   * @param options The options parameters.
   */
  public listBasicPublishingCredentialsPoliciesSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListBasicPublishingCredentialsPoliciesSlotOptionalParams
  ): PagedAsyncIterableIterator<CsmPublishingCredentialsPoliciesEntity> {
    const iter = this.listBasicPublishingCredentialsPoliciesSlotPagingAll(
      resourceGroupName,
      name,
      slot,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBasicPublishingCredentialsPoliciesSlotPagingPage(
          resourceGroupName,
          name,
          slot,
          options,
          settings
        );
      }
    };
  }

  private async *listBasicPublishingCredentialsPoliciesSlotPagingPage(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListBasicPublishingCredentialsPoliciesSlotOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<CsmPublishingCredentialsPoliciesEntity[]> {
    let result: WebAppsListBasicPublishingCredentialsPoliciesSlotResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBasicPublishingCredentialsPoliciesSlot(
        resourceGroupName,
        name,
        slot,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBasicPublishingCredentialsPoliciesSlotNext(
        resourceGroupName,
        name,
        slot,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBasicPublishingCredentialsPoliciesSlotPagingAll(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListBasicPublishingCredentialsPoliciesSlotOptionalParams
  ): AsyncIterableIterator<CsmPublishingCredentialsPoliciesEntity> {
    for await (const page of this.listBasicPublishingCredentialsPoliciesSlotPagingPage(
      resourceGroupName,
      name,
      slot,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for List the configurations of an app
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will return
   *             configuration for the production slot.
   * @param options The options parameters.
   */
  public listConfigurationsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListConfigurationsSlotOptionalParams
  ): PagedAsyncIterableIterator<SiteConfigResource> {
    const iter = this.listConfigurationsSlotPagingAll(
      resourceGroupName,
      name,
      slot,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listConfigurationsSlotPagingPage(
          resourceGroupName,
          name,
          slot,
          options,
          settings
        );
      }
    };
  }

  private async *listConfigurationsSlotPagingPage(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListConfigurationsSlotOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<SiteConfigResource[]> {
    let result: WebAppsListConfigurationsSlotResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listConfigurationsSlot(
        resourceGroupName,
        name,
        slot,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listConfigurationsSlotNext(
        resourceGroupName,
        name,
        slot,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listConfigurationsSlotPagingAll(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListConfigurationsSlotOptionalParams
  ): AsyncIterableIterator<SiteConfigResource> {
    for await (const page of this.listConfigurationsSlotPagingPage(
      resourceGroupName,
      name,
      slot,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Gets the config reference app settings and status of an app
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot
   * @param options The options parameters.
   */
  public listAppSettingsKeyVaultReferencesSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsGetAppSettingsKeyVaultReferencesSlotOptionalParams
  ): PagedAsyncIterableIterator<ApiKVReference> {
    const iter = this.getAppSettingsKeyVaultReferencesSlotPagingAll(
      resourceGroupName,
      name,
      slot,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.getAppSettingsKeyVaultReferencesSlotPagingPage(
          resourceGroupName,
          name,
          slot,
          options,
          settings
        );
      }
    };
  }

  private async *getAppSettingsKeyVaultReferencesSlotPagingPage(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsGetAppSettingsKeyVaultReferencesSlotOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ApiKVReference[]> {
    let result: WebAppsGetAppSettingsKeyVaultReferencesSlotResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._getAppSettingsKeyVaultReferencesSlot(
        resourceGroupName,
        name,
        slot,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._getAppSettingsKeyVaultReferencesSlotNext(
        resourceGroupName,
        name,
        slot,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *getAppSettingsKeyVaultReferencesSlotPagingAll(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsGetAppSettingsKeyVaultReferencesSlotOptionalParams
  ): AsyncIterableIterator<ApiKVReference> {
    for await (const page of this.getAppSettingsKeyVaultReferencesSlotPagingPage(
      resourceGroupName,
      name,
      slot,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Gets the config reference app settings and status of an app
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot
   * @param options The options parameters.
   */
  public listSiteConnectionStringKeyVaultReferencesSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsGetSiteConnectionStringKeyVaultReferencesSlotOptionalParams
  ): PagedAsyncIterableIterator<ApiKVReference> {
    const iter = this.getSiteConnectionStringKeyVaultReferencesSlotPagingAll(
      resourceGroupName,
      name,
      slot,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.getSiteConnectionStringKeyVaultReferencesSlotPagingPage(
          resourceGroupName,
          name,
          slot,
          options,
          settings
        );
      }
    };
  }

  private async *getSiteConnectionStringKeyVaultReferencesSlotPagingPage(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsGetSiteConnectionStringKeyVaultReferencesSlotOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ApiKVReference[]> {
    let result: WebAppsGetSiteConnectionStringKeyVaultReferencesSlotResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._getSiteConnectionStringKeyVaultReferencesSlot(
        resourceGroupName,
        name,
        slot,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._getSiteConnectionStringKeyVaultReferencesSlotNext(
        resourceGroupName,
        name,
        slot,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *getSiteConnectionStringKeyVaultReferencesSlotPagingAll(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsGetSiteConnectionStringKeyVaultReferencesSlotOptionalParams
  ): AsyncIterableIterator<ApiKVReference> {
    for await (const page of this.getSiteConnectionStringKeyVaultReferencesSlotPagingPage(
      resourceGroupName,
      name,
      slot,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Gets a list of web app configuration snapshots identifiers. Each element of the list
   * contains a timestamp and the ID of the snapshot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will return
   *             configuration for the production slot.
   * @param options The options parameters.
   */
  public listConfigurationSnapshotInfoSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListConfigurationSnapshotInfoSlotOptionalParams
  ): PagedAsyncIterableIterator<SiteConfigurationSnapshotInfo> {
    const iter = this.listConfigurationSnapshotInfoSlotPagingAll(
      resourceGroupName,
      name,
      slot,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listConfigurationSnapshotInfoSlotPagingPage(
          resourceGroupName,
          name,
          slot,
          options,
          settings
        );
      }
    };
  }

  private async *listConfigurationSnapshotInfoSlotPagingPage(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListConfigurationSnapshotInfoSlotOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<SiteConfigurationSnapshotInfo[]> {
    let result: WebAppsListConfigurationSnapshotInfoSlotResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listConfigurationSnapshotInfoSlot(
        resourceGroupName,
        name,
        slot,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listConfigurationSnapshotInfoSlotNext(
        resourceGroupName,
        name,
        slot,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listConfigurationSnapshotInfoSlotPagingAll(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListConfigurationSnapshotInfoSlotOptionalParams
  ): AsyncIterableIterator<SiteConfigurationSnapshotInfo> {
    for await (const page of this.listConfigurationSnapshotInfoSlotPagingPage(
      resourceGroupName,
      name,
      slot,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for List continuous web jobs for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment
   *             for the production slot.
   * @param options The options parameters.
   */
  public listContinuousWebJobsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListContinuousWebJobsSlotOptionalParams
  ): PagedAsyncIterableIterator<ContinuousWebJob> {
    const iter = this.listContinuousWebJobsSlotPagingAll(
      resourceGroupName,
      name,
      slot,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listContinuousWebJobsSlotPagingPage(
          resourceGroupName,
          name,
          slot,
          options,
          settings
        );
      }
    };
  }

  private async *listContinuousWebJobsSlotPagingPage(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListContinuousWebJobsSlotOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ContinuousWebJob[]> {
    let result: WebAppsListContinuousWebJobsSlotResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listContinuousWebJobsSlot(
        resourceGroupName,
        name,
        slot,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listContinuousWebJobsSlotNext(
        resourceGroupName,
        name,
        slot,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listContinuousWebJobsSlotPagingAll(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListContinuousWebJobsSlotOptionalParams
  ): AsyncIterableIterator<ContinuousWebJob> {
    for await (const page of this.listContinuousWebJobsSlotPagingPage(
      resourceGroupName,
      name,
      slot,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List deployment statuses for an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the deployment
   *             status for the production slot.
   * @param options The options parameters.
   */
  public listSlotSiteDeploymentStatusesSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListSlotSiteDeploymentStatusesSlotOptionalParams
  ): PagedAsyncIterableIterator<CsmDeploymentStatus> {
    const iter = this.listSlotSiteDeploymentStatusesSlotPagingAll(
      resourceGroupName,
      name,
      slot,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listSlotSiteDeploymentStatusesSlotPagingPage(
          resourceGroupName,
          name,
          slot,
          options,
          settings
        );
      }
    };
  }

  private async *listSlotSiteDeploymentStatusesSlotPagingPage(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListSlotSiteDeploymentStatusesSlotOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<CsmDeploymentStatus[]> {
    let result: WebAppsListSlotSiteDeploymentStatusesSlotResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listSlotSiteDeploymentStatusesSlot(
        resourceGroupName,
        name,
        slot,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listSlotSiteDeploymentStatusesSlotNext(
        resourceGroupName,
        name,
        slot,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listSlotSiteDeploymentStatusesSlotPagingAll(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListSlotSiteDeploymentStatusesSlotOptionalParams
  ): AsyncIterableIterator<CsmDeploymentStatus> {
    for await (const page of this.listSlotSiteDeploymentStatusesSlotPagingPage(
      resourceGroupName,
      name,
      slot,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for List deployments for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for
   *             the production slot.
   * @param options The options parameters.
   */
  public listDeploymentsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListDeploymentsSlotOptionalParams
  ): PagedAsyncIterableIterator<Deployment> {
    const iter = this.listDeploymentsSlotPagingAll(
      resourceGroupName,
      name,
      slot,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listDeploymentsSlotPagingPage(
          resourceGroupName,
          name,
          slot,
          options,
          settings
        );
      }
    };
  }

  private async *listDeploymentsSlotPagingPage(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListDeploymentsSlotOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Deployment[]> {
    let result: WebAppsListDeploymentsSlotResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listDeploymentsSlot(
        resourceGroupName,
        name,
        slot,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listDeploymentsSlotNext(
        resourceGroupName,
        name,
        slot,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listDeploymentsSlotPagingAll(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListDeploymentsSlotOptionalParams
  ): AsyncIterableIterator<Deployment> {
    for await (const page of this.listDeploymentsSlotPagingPage(
      resourceGroupName,
      name,
      slot,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Lists ownership identifiers for domain associated with web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding
   *             for the production slot.
   * @param options The options parameters.
   */
  public listDomainOwnershipIdentifiersSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListDomainOwnershipIdentifiersSlotOptionalParams
  ): PagedAsyncIterableIterator<Identifier> {
    const iter = this.listDomainOwnershipIdentifiersSlotPagingAll(
      resourceGroupName,
      name,
      slot,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listDomainOwnershipIdentifiersSlotPagingPage(
          resourceGroupName,
          name,
          slot,
          options,
          settings
        );
      }
    };
  }

  private async *listDomainOwnershipIdentifiersSlotPagingPage(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListDomainOwnershipIdentifiersSlotOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Identifier[]> {
    let result: WebAppsListDomainOwnershipIdentifiersSlotResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listDomainOwnershipIdentifiersSlot(
        resourceGroupName,
        name,
        slot,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listDomainOwnershipIdentifiersSlotNext(
        resourceGroupName,
        name,
        slot,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listDomainOwnershipIdentifiersSlotPagingAll(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListDomainOwnershipIdentifiersSlotOptionalParams
  ): AsyncIterableIterator<Identifier> {
    for await (const page of this.listDomainOwnershipIdentifiersSlotPagingPage(
      resourceGroupName,
      name,
      slot,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for List the functions for a web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot.
   * @param options The options parameters.
   */
  public listInstanceFunctionsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListInstanceFunctionsSlotOptionalParams
  ): PagedAsyncIterableIterator<FunctionEnvelope> {
    const iter = this.listInstanceFunctionsSlotPagingAll(
      resourceGroupName,
      name,
      slot,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listInstanceFunctionsSlotPagingPage(
          resourceGroupName,
          name,
          slot,
          options,
          settings
        );
      }
    };
  }

  private async *listInstanceFunctionsSlotPagingPage(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListInstanceFunctionsSlotOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<FunctionEnvelope[]> {
    let result: WebAppsListInstanceFunctionsSlotResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listInstanceFunctionsSlot(
        resourceGroupName,
        name,
        slot,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listInstanceFunctionsSlotNext(
        resourceGroupName,
        name,
        slot,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listInstanceFunctionsSlotPagingAll(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListInstanceFunctionsSlotOptionalParams
  ): AsyncIterableIterator<FunctionEnvelope> {
    for await (const page of this.listInstanceFunctionsSlotPagingPage(
      resourceGroupName,
      name,
      slot,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Get hostname bindings for an app or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API gets hostname bindings
   *             for the production slot.
   * @param options The options parameters.
   */
  public listHostNameBindingsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListHostNameBindingsSlotOptionalParams
  ): PagedAsyncIterableIterator<HostNameBinding> {
    const iter = this.listHostNameBindingsSlotPagingAll(
      resourceGroupName,
      name,
      slot,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listHostNameBindingsSlotPagingPage(
          resourceGroupName,
          name,
          slot,
          options,
          settings
        );
      }
    };
  }

  private async *listHostNameBindingsSlotPagingPage(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListHostNameBindingsSlotOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<HostNameBinding[]> {
    let result: WebAppsListHostNameBindingsSlotResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listHostNameBindingsSlot(
        resourceGroupName,
        name,
        slot,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listHostNameBindingsSlotNext(
        resourceGroupName,
        name,
        slot,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listHostNameBindingsSlotPagingAll(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListHostNameBindingsSlotOptionalParams
  ): AsyncIterableIterator<HostNameBinding> {
    for await (const page of this.listHostNameBindingsSlotPagingPage(
      resourceGroupName,
      name,
      slot,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Gets all scale-out instances of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API gets the production
   *             slot instances.
   * @param options The options parameters.
   */
  public listInstanceIdentifiersSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListInstanceIdentifiersSlotOptionalParams
  ): PagedAsyncIterableIterator<WebSiteInstanceStatus> {
    const iter = this.listInstanceIdentifiersSlotPagingAll(
      resourceGroupName,
      name,
      slot,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listInstanceIdentifiersSlotPagingPage(
          resourceGroupName,
          name,
          slot,
          options,
          settings
        );
      }
    };
  }

  private async *listInstanceIdentifiersSlotPagingPage(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListInstanceIdentifiersSlotOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<WebSiteInstanceStatus[]> {
    let result: WebAppsListInstanceIdentifiersSlotResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listInstanceIdentifiersSlot(
        resourceGroupName,
        name,
        slot,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listInstanceIdentifiersSlotNext(
        resourceGroupName,
        name,
        slot,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listInstanceIdentifiersSlotPagingAll(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListInstanceIdentifiersSlotOptionalParams
  ): AsyncIterableIterator<WebSiteInstanceStatus> {
    for await (const page of this.listInstanceIdentifiersSlotPagingPage(
      resourceGroupName,
      name,
      slot,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Get list of processes for a web site, or a deployment slot, or for a specific
   * scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for
   *             the production slot.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in
   *                   the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The options parameters.
   */
  public listInstanceProcessesSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    instanceId: string,
    options?: WebAppsListInstanceProcessesSlotOptionalParams
  ): PagedAsyncIterableIterator<ProcessInfo> {
    const iter = this.listInstanceProcessesSlotPagingAll(
      resourceGroupName,
      name,
      slot,
      instanceId,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listInstanceProcessesSlotPagingPage(
          resourceGroupName,
          name,
          slot,
          instanceId,
          options,
          settings
        );
      }
    };
  }

  private async *listInstanceProcessesSlotPagingPage(
    resourceGroupName: string,
    name: string,
    slot: string,
    instanceId: string,
    options?: WebAppsListInstanceProcessesSlotOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ProcessInfo[]> {
    let result: WebAppsListInstanceProcessesSlotResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listInstanceProcessesSlot(
        resourceGroupName,
        name,
        slot,
        instanceId,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listInstanceProcessesSlotNext(
        resourceGroupName,
        name,
        slot,
        instanceId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listInstanceProcessesSlotPagingAll(
    resourceGroupName: string,
    name: string,
    slot: string,
    instanceId: string,
    options?: WebAppsListInstanceProcessesSlotOptionalParams
  ): AsyncIterableIterator<ProcessInfo> {
    for await (const page of this.listInstanceProcessesSlotPagingPage(
      resourceGroupName,
      name,
      slot,
      instanceId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for List module information for a process by its ID for a specific scaled-out instance
   * in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for
   *             the production slot.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in
   *                   the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The options parameters.
   */
  public listInstanceProcessModulesSlot(
    resourceGroupName: string,
    name: string,
    processId: string,
    slot: string,
    instanceId: string,
    options?: WebAppsListInstanceProcessModulesSlotOptionalParams
  ): PagedAsyncIterableIterator<ProcessModuleInfo> {
    const iter = this.listInstanceProcessModulesSlotPagingAll(
      resourceGroupName,
      name,
      processId,
      slot,
      instanceId,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listInstanceProcessModulesSlotPagingPage(
          resourceGroupName,
          name,
          processId,
          slot,
          instanceId,
          options,
          settings
        );
      }
    };
  }

  private async *listInstanceProcessModulesSlotPagingPage(
    resourceGroupName: string,
    name: string,
    processId: string,
    slot: string,
    instanceId: string,
    options?: WebAppsListInstanceProcessModulesSlotOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ProcessModuleInfo[]> {
    let result: WebAppsListInstanceProcessModulesSlotResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listInstanceProcessModulesSlot(
        resourceGroupName,
        name,
        processId,
        slot,
        instanceId,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listInstanceProcessModulesSlotNext(
        resourceGroupName,
        name,
        processId,
        slot,
        instanceId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listInstanceProcessModulesSlotPagingAll(
    resourceGroupName: string,
    name: string,
    processId: string,
    slot: string,
    instanceId: string,
    options?: WebAppsListInstanceProcessModulesSlotOptionalParams
  ): AsyncIterableIterator<ProcessModuleInfo> {
    for await (const page of this.listInstanceProcessModulesSlotPagingPage(
      resourceGroupName,
      name,
      processId,
      slot,
      instanceId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for List the threads in a process by its ID for a specific scaled-out instance in a web
   * site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for
   *             the production slot.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in
   *                   the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The options parameters.
   */
  public listInstanceProcessThreadsSlot(
    resourceGroupName: string,
    name: string,
    processId: string,
    slot: string,
    instanceId: string,
    options?: WebAppsListInstanceProcessThreadsSlotOptionalParams
  ): PagedAsyncIterableIterator<ProcessThreadInfo> {
    const iter = this.listInstanceProcessThreadsSlotPagingAll(
      resourceGroupName,
      name,
      processId,
      slot,
      instanceId,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listInstanceProcessThreadsSlotPagingPage(
          resourceGroupName,
          name,
          processId,
          slot,
          instanceId,
          options,
          settings
        );
      }
    };
  }

  private async *listInstanceProcessThreadsSlotPagingPage(
    resourceGroupName: string,
    name: string,
    processId: string,
    slot: string,
    instanceId: string,
    options?: WebAppsListInstanceProcessThreadsSlotOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ProcessThreadInfo[]> {
    let result: WebAppsListInstanceProcessThreadsSlotResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listInstanceProcessThreadsSlot(
        resourceGroupName,
        name,
        processId,
        slot,
        instanceId,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listInstanceProcessThreadsSlotNext(
        resourceGroupName,
        name,
        processId,
        slot,
        instanceId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listInstanceProcessThreadsSlotPagingAll(
    resourceGroupName: string,
    name: string,
    processId: string,
    slot: string,
    instanceId: string,
    options?: WebAppsListInstanceProcessThreadsSlotOptionalParams
  ): AsyncIterableIterator<ProcessThreadInfo> {
    for await (const page of this.listInstanceProcessThreadsSlotPagingPage(
      resourceGroupName,
      name,
      processId,
      slot,
      instanceId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Gets existing backups of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get backups of the
   *             production slot.
   * @param options The options parameters.
   */
  public listSiteBackupsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListSiteBackupsSlotOptionalParams
  ): PagedAsyncIterableIterator<BackupItem> {
    const iter = this.listSiteBackupsSlotPagingAll(
      resourceGroupName,
      name,
      slot,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listSiteBackupsSlotPagingPage(
          resourceGroupName,
          name,
          slot,
          options,
          settings
        );
      }
    };
  }

  private async *listSiteBackupsSlotPagingPage(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListSiteBackupsSlotOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<BackupItem[]> {
    let result: WebAppsListSiteBackupsSlotResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listSiteBackupsSlot(
        resourceGroupName,
        name,
        slot,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listSiteBackupsSlotNext(
        resourceGroupName,
        name,
        slot,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listSiteBackupsSlotPagingAll(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListSiteBackupsSlotOptionalParams
  ): AsyncIterableIterator<BackupItem> {
    for await (const page of this.listSiteBackupsSlotPagingPage(
      resourceGroupName,
      name,
      slot,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Gets perfmon counters for web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The options parameters.
   */
  public listPerfMonCountersSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListPerfMonCountersSlotOptionalParams
  ): PagedAsyncIterableIterator<PerfMonResponse> {
    const iter = this.listPerfMonCountersSlotPagingAll(
      resourceGroupName,
      name,
      slot,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPerfMonCountersSlotPagingPage(
          resourceGroupName,
          name,
          slot,
          options,
          settings
        );
      }
    };
  }

  private async *listPerfMonCountersSlotPagingPage(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListPerfMonCountersSlotOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<PerfMonResponse[]> {
    let result: WebAppsListPerfMonCountersSlotResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listPerfMonCountersSlot(
        resourceGroupName,
        name,
        slot,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listPerfMonCountersSlotNext(
        resourceGroupName,
        name,
        slot,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPerfMonCountersSlotPagingAll(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListPerfMonCountersSlotOptionalParams
  ): AsyncIterableIterator<PerfMonResponse> {
    for await (const page of this.listPerfMonCountersSlotPagingPage(
      resourceGroupName,
      name,
      slot,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Gets the list of private endpoint connections associated with a site
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the site.
   * @param slot Name of the site deployment slot.
   * @param options The options parameters.
   */
  public listPrivateEndpointConnectionListSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsGetPrivateEndpointConnectionListSlotOptionalParams
  ): PagedAsyncIterableIterator<RemotePrivateEndpointConnectionARMResource> {
    const iter = this.getPrivateEndpointConnectionListSlotPagingAll(
      resourceGroupName,
      name,
      slot,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.getPrivateEndpointConnectionListSlotPagingPage(
          resourceGroupName,
          name,
          slot,
          options,
          settings
        );
      }
    };
  }

  private async *getPrivateEndpointConnectionListSlotPagingPage(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsGetPrivateEndpointConnectionListSlotOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<RemotePrivateEndpointConnectionARMResource[]> {
    let result: WebAppsGetPrivateEndpointConnectionListSlotResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._getPrivateEndpointConnectionListSlot(
        resourceGroupName,
        name,
        slot,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._getPrivateEndpointConnectionListSlotNext(
        resourceGroupName,
        name,
        slot,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *getPrivateEndpointConnectionListSlotPagingAll(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsGetPrivateEndpointConnectionListSlotOptionalParams
  ): AsyncIterableIterator<RemotePrivateEndpointConnectionARMResource> {
    for await (const page of this.getPrivateEndpointConnectionListSlotPagingPage(
      resourceGroupName,
      name,
      slot,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Get list of processes for a web site, or a deployment slot, or for a specific
   * scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for
   *             the production slot.
   * @param options The options parameters.
   */
  public listProcessesSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListProcessesSlotOptionalParams
  ): PagedAsyncIterableIterator<ProcessInfo> {
    const iter = this.listProcessesSlotPagingAll(
      resourceGroupName,
      name,
      slot,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listProcessesSlotPagingPage(
          resourceGroupName,
          name,
          slot,
          options,
          settings
        );
      }
    };
  }

  private async *listProcessesSlotPagingPage(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListProcessesSlotOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ProcessInfo[]> {
    let result: WebAppsListProcessesSlotResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listProcessesSlot(
        resourceGroupName,
        name,
        slot,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listProcessesSlotNext(
        resourceGroupName,
        name,
        slot,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listProcessesSlotPagingAll(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListProcessesSlotOptionalParams
  ): AsyncIterableIterator<ProcessInfo> {
    for await (const page of this.listProcessesSlotPagingPage(
      resourceGroupName,
      name,
      slot,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for List module information for a process by its ID for a specific scaled-out instance
   * in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for
   *             the production slot.
   * @param options The options parameters.
   */
  public listProcessModulesSlot(
    resourceGroupName: string,
    name: string,
    processId: string,
    slot: string,
    options?: WebAppsListProcessModulesSlotOptionalParams
  ): PagedAsyncIterableIterator<ProcessModuleInfo> {
    const iter = this.listProcessModulesSlotPagingAll(
      resourceGroupName,
      name,
      processId,
      slot,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listProcessModulesSlotPagingPage(
          resourceGroupName,
          name,
          processId,
          slot,
          options,
          settings
        );
      }
    };
  }

  private async *listProcessModulesSlotPagingPage(
    resourceGroupName: string,
    name: string,
    processId: string,
    slot: string,
    options?: WebAppsListProcessModulesSlotOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ProcessModuleInfo[]> {
    let result: WebAppsListProcessModulesSlotResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listProcessModulesSlot(
        resourceGroupName,
        name,
        processId,
        slot,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listProcessModulesSlotNext(
        resourceGroupName,
        name,
        processId,
        slot,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listProcessModulesSlotPagingAll(
    resourceGroupName: string,
    name: string,
    processId: string,
    slot: string,
    options?: WebAppsListProcessModulesSlotOptionalParams
  ): AsyncIterableIterator<ProcessModuleInfo> {
    for await (const page of this.listProcessModulesSlotPagingPage(
      resourceGroupName,
      name,
      processId,
      slot,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for List the threads in a process by its ID for a specific scaled-out instance in a web
   * site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for
   *             the production slot.
   * @param options The options parameters.
   */
  public listProcessThreadsSlot(
    resourceGroupName: string,
    name: string,
    processId: string,
    slot: string,
    options?: WebAppsListProcessThreadsSlotOptionalParams
  ): PagedAsyncIterableIterator<ProcessThreadInfo> {
    const iter = this.listProcessThreadsSlotPagingAll(
      resourceGroupName,
      name,
      processId,
      slot,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listProcessThreadsSlotPagingPage(
          resourceGroupName,
          name,
          processId,
          slot,
          options,
          settings
        );
      }
    };
  }

  private async *listProcessThreadsSlotPagingPage(
    resourceGroupName: string,
    name: string,
    processId: string,
    slot: string,
    options?: WebAppsListProcessThreadsSlotOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ProcessThreadInfo[]> {
    let result: WebAppsListProcessThreadsSlotResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listProcessThreadsSlot(
        resourceGroupName,
        name,
        processId,
        slot,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listProcessThreadsSlotNext(
        resourceGroupName,
        name,
        processId,
        slot,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listProcessThreadsSlotPagingAll(
    resourceGroupName: string,
    name: string,
    processId: string,
    slot: string,
    options?: WebAppsListProcessThreadsSlotOptionalParams
  ): AsyncIterableIterator<ProcessThreadInfo> {
    for await (const page of this.listProcessThreadsSlotPagingPage(
      resourceGroupName,
      name,
      processId,
      slot,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Get public certificates for an app or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API gets hostname bindings
   *             for the production slot.
   * @param options The options parameters.
   */
  public listPublicCertificatesSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListPublicCertificatesSlotOptionalParams
  ): PagedAsyncIterableIterator<PublicCertificate> {
    const iter = this.listPublicCertificatesSlotPagingAll(
      resourceGroupName,
      name,
      slot,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPublicCertificatesSlotPagingPage(
          resourceGroupName,
          name,
          slot,
          options,
          settings
        );
      }
    };
  }

  private async *listPublicCertificatesSlotPagingPage(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListPublicCertificatesSlotOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<PublicCertificate[]> {
    let result: WebAppsListPublicCertificatesSlotResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listPublicCertificatesSlot(
        resourceGroupName,
        name,
        slot,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listPublicCertificatesSlotNext(
        resourceGroupName,
        name,
        slot,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPublicCertificatesSlotPagingAll(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListPublicCertificatesSlotOptionalParams
  ): AsyncIterableIterator<PublicCertificate> {
    for await (const page of this.listPublicCertificatesSlotPagingPage(
      resourceGroupName,
      name,
      slot,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Get list of siteextensions for a web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API uses the production
   *             slot.
   * @param options The options parameters.
   */
  public listSiteExtensionsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListSiteExtensionsSlotOptionalParams
  ): PagedAsyncIterableIterator<SiteExtensionInfo> {
    const iter = this.listSiteExtensionsSlotPagingAll(
      resourceGroupName,
      name,
      slot,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listSiteExtensionsSlotPagingPage(
          resourceGroupName,
          name,
          slot,
          options,
          settings
        );
      }
    };
  }

  private async *listSiteExtensionsSlotPagingPage(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListSiteExtensionsSlotOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<SiteExtensionInfo[]> {
    let result: WebAppsListSiteExtensionsSlotResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listSiteExtensionsSlot(
        resourceGroupName,
        name,
        slot,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listSiteExtensionsSlotNext(
        resourceGroupName,
        name,
        slot,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listSiteExtensionsSlotPagingAll(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListSiteExtensionsSlotOptionalParams
  ): AsyncIterableIterator<SiteExtensionInfo> {
    for await (const page of this.listSiteExtensionsSlotPagingPage(
      resourceGroupName,
      name,
      slot,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Get the difference in configuration settings between two web app slots.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the source slot. If a slot is not specified, the production slot is used as the
   *             source slot.
   * @param slotSwapEntity JSON object that contains the target slot name. See example.
   * @param options The options parameters.
   */
  public listSlotDifferencesSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    slotSwapEntity: CsmSlotEntity,
    options?: WebAppsListSlotDifferencesSlotOptionalParams
  ): PagedAsyncIterableIterator<SlotDifference> {
    const iter = this.listSlotDifferencesSlotPagingAll(
      resourceGroupName,
      name,
      slot,
      slotSwapEntity,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listSlotDifferencesSlotPagingPage(
          resourceGroupName,
          name,
          slot,
          slotSwapEntity,
          options,
          settings
        );
      }
    };
  }

  private async *listSlotDifferencesSlotPagingPage(
    resourceGroupName: string,
    name: string,
    slot: string,
    slotSwapEntity: CsmSlotEntity,
    options?: WebAppsListSlotDifferencesSlotOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<SlotDifference[]> {
    let result: WebAppsListSlotDifferencesSlotResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listSlotDifferencesSlot(
        resourceGroupName,
        name,
        slot,
        slotSwapEntity,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listSlotDifferencesSlotNext(
        resourceGroupName,
        name,
        slot,
        slotSwapEntity,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listSlotDifferencesSlotPagingAll(
    resourceGroupName: string,
    name: string,
    slot: string,
    slotSwapEntity: CsmSlotEntity,
    options?: WebAppsListSlotDifferencesSlotOptionalParams
  ): AsyncIterableIterator<SlotDifference> {
    for await (const page of this.listSlotDifferencesSlotPagingPage(
      resourceGroupName,
      name,
      slot,
      slotSwapEntity,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Returns all Snapshots to the user.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Website Name.
   * @param slot Website Slot.
   * @param options The options parameters.
   */
  public listSnapshotsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListSnapshotsSlotOptionalParams
  ): PagedAsyncIterableIterator<Snapshot> {
    const iter = this.listSnapshotsSlotPagingAll(
      resourceGroupName,
      name,
      slot,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listSnapshotsSlotPagingPage(
          resourceGroupName,
          name,
          slot,
          options,
          settings
        );
      }
    };
  }

  private async *listSnapshotsSlotPagingPage(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListSnapshotsSlotOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Snapshot[]> {
    let result: WebAppsListSnapshotsSlotResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listSnapshotsSlot(
        resourceGroupName,
        name,
        slot,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listSnapshotsSlotNext(
        resourceGroupName,
        name,
        slot,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listSnapshotsSlotPagingAll(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListSnapshotsSlotOptionalParams
  ): AsyncIterableIterator<Snapshot> {
    for await (const page of this.listSnapshotsSlotPagingPage(
      resourceGroupName,
      name,
      slot,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Returns all Snapshots to the user from DRSecondary endpoint.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Website Name.
   * @param slot Website Slot.
   * @param options The options parameters.
   */
  public listSnapshotsFromDRSecondarySlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListSnapshotsFromDRSecondarySlotOptionalParams
  ): PagedAsyncIterableIterator<Snapshot> {
    const iter = this.listSnapshotsFromDRSecondarySlotPagingAll(
      resourceGroupName,
      name,
      slot,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listSnapshotsFromDRSecondarySlotPagingPage(
          resourceGroupName,
          name,
          slot,
          options,
          settings
        );
      }
    };
  }

  private async *listSnapshotsFromDRSecondarySlotPagingPage(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListSnapshotsFromDRSecondarySlotOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Snapshot[]> {
    let result: WebAppsListSnapshotsFromDRSecondarySlotResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listSnapshotsFromDRSecondarySlot(
        resourceGroupName,
        name,
        slot,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listSnapshotsFromDRSecondarySlotNext(
        resourceGroupName,
        name,
        slot,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listSnapshotsFromDRSecondarySlotPagingAll(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListSnapshotsFromDRSecondarySlotOptionalParams
  ): AsyncIterableIterator<Snapshot> {
    for await (const page of this.listSnapshotsFromDRSecondarySlotPagingPage(
      resourceGroupName,
      name,
      slot,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for List triggered web jobs for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment
   *             for the production slot.
   * @param options The options parameters.
   */
  public listTriggeredWebJobsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListTriggeredWebJobsSlotOptionalParams
  ): PagedAsyncIterableIterator<TriggeredWebJob> {
    const iter = this.listTriggeredWebJobsSlotPagingAll(
      resourceGroupName,
      name,
      slot,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listTriggeredWebJobsSlotPagingPage(
          resourceGroupName,
          name,
          slot,
          options,
          settings
        );
      }
    };
  }

  private async *listTriggeredWebJobsSlotPagingPage(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListTriggeredWebJobsSlotOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<TriggeredWebJob[]> {
    let result: WebAppsListTriggeredWebJobsSlotResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listTriggeredWebJobsSlot(
        resourceGroupName,
        name,
        slot,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listTriggeredWebJobsSlotNext(
        resourceGroupName,
        name,
        slot,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listTriggeredWebJobsSlotPagingAll(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListTriggeredWebJobsSlotOptionalParams
  ): AsyncIterableIterator<TriggeredWebJob> {
    for await (const page of this.listTriggeredWebJobsSlotPagingPage(
      resourceGroupName,
      name,
      slot,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for List a triggered web job's history for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param slot Name of the deployment slot. If a slot is not specified, the API uses the production
   *             slot.
   * @param options The options parameters.
   */
  public listTriggeredWebJobHistorySlot(
    resourceGroupName: string,
    name: string,
    webJobName: string,
    slot: string,
    options?: WebAppsListTriggeredWebJobHistorySlotOptionalParams
  ): PagedAsyncIterableIterator<TriggeredJobHistory> {
    const iter = this.listTriggeredWebJobHistorySlotPagingAll(
      resourceGroupName,
      name,
      webJobName,
      slot,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listTriggeredWebJobHistorySlotPagingPage(
          resourceGroupName,
          name,
          webJobName,
          slot,
          options,
          settings
        );
      }
    };
  }

  private async *listTriggeredWebJobHistorySlotPagingPage(
    resourceGroupName: string,
    name: string,
    webJobName: string,
    slot: string,
    options?: WebAppsListTriggeredWebJobHistorySlotOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<TriggeredJobHistory[]> {
    let result: WebAppsListTriggeredWebJobHistorySlotResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listTriggeredWebJobHistorySlot(
        resourceGroupName,
        name,
        webJobName,
        slot,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listTriggeredWebJobHistorySlotNext(
        resourceGroupName,
        name,
        webJobName,
        slot,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listTriggeredWebJobHistorySlotPagingAll(
    resourceGroupName: string,
    name: string,
    webJobName: string,
    slot: string,
    options?: WebAppsListTriggeredWebJobHistorySlotOptionalParams
  ): AsyncIterableIterator<TriggeredJobHistory> {
    for await (const page of this.listTriggeredWebJobHistorySlotPagingPage(
      resourceGroupName,
      name,
      webJobName,
      slot,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Gets the quota usage information of an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get quota
   *             information of the production slot.
   * @param options The options parameters.
   */
  public listUsagesSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListUsagesSlotOptionalParams
  ): PagedAsyncIterableIterator<CsmUsageQuota> {
    const iter = this.listUsagesSlotPagingAll(
      resourceGroupName,
      name,
      slot,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listUsagesSlotPagingPage(
          resourceGroupName,
          name,
          slot,
          options,
          settings
        );
      }
    };
  }

  private async *listUsagesSlotPagingPage(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListUsagesSlotOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<CsmUsageQuota[]> {
    let result: WebAppsListUsagesSlotResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listUsagesSlot(
        resourceGroupName,
        name,
        slot,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listUsagesSlotNext(
        resourceGroupName,
        name,
        slot,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listUsagesSlotPagingAll(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListUsagesSlotOptionalParams
  ): AsyncIterableIterator<CsmUsageQuota> {
    for await (const page of this.listUsagesSlotPagingPage(
      resourceGroupName,
      name,
      slot,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for List webjobs for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for
   *             the production slot.
   * @param options The options parameters.
   */
  public listWebJobsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListWebJobsSlotOptionalParams
  ): PagedAsyncIterableIterator<WebJob> {
    const iter = this.listWebJobsSlotPagingAll(
      resourceGroupName,
      name,
      slot,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listWebJobsSlotPagingPage(
          resourceGroupName,
          name,
          slot,
          options,
          settings
        );
      }
    };
  }

  private async *listWebJobsSlotPagingPage(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListWebJobsSlotOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<WebJob[]> {
    let result: WebAppsListWebJobsSlotResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listWebJobsSlot(
        resourceGroupName,
        name,
        slot,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listWebJobsSlotNext(
        resourceGroupName,
        name,
        slot,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listWebJobsSlotPagingAll(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListWebJobsSlotOptionalParams
  ): AsyncIterableIterator<WebJob> {
    for await (const page of this.listWebJobsSlotPagingPage(
      resourceGroupName,
      name,
      slot,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Get the difference in configuration settings between two web app slots.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slotSwapEntity JSON object that contains the target slot name. See example.
   * @param options The options parameters.
   */
  public listSlotDifferencesFromProduction(
    resourceGroupName: string,
    name: string,
    slotSwapEntity: CsmSlotEntity,
    options?: WebAppsListSlotDifferencesFromProductionOptionalParams
  ): PagedAsyncIterableIterator<SlotDifference> {
    const iter = this.listSlotDifferencesFromProductionPagingAll(
      resourceGroupName,
      name,
      slotSwapEntity,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listSlotDifferencesFromProductionPagingPage(
          resourceGroupName,
          name,
          slotSwapEntity,
          options,
          settings
        );
      }
    };
  }

  private async *listSlotDifferencesFromProductionPagingPage(
    resourceGroupName: string,
    name: string,
    slotSwapEntity: CsmSlotEntity,
    options?: WebAppsListSlotDifferencesFromProductionOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<SlotDifference[]> {
    let result: WebAppsListSlotDifferencesFromProductionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listSlotDifferencesFromProduction(
        resourceGroupName,
        name,
        slotSwapEntity,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listSlotDifferencesFromProductionNext(
        resourceGroupName,
        name,
        slotSwapEntity,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listSlotDifferencesFromProductionPagingAll(
    resourceGroupName: string,
    name: string,
    slotSwapEntity: CsmSlotEntity,
    options?: WebAppsListSlotDifferencesFromProductionOptionalParams
  ): AsyncIterableIterator<SlotDifference> {
    for await (const page of this.listSlotDifferencesFromProductionPagingPage(
      resourceGroupName,
      name,
      slotSwapEntity,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Returns all Snapshots to the user.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Website Name.
   * @param options The options parameters.
   */
  public listSnapshots(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListSnapshotsOptionalParams
  ): PagedAsyncIterableIterator<Snapshot> {
    const iter = this.listSnapshotsPagingAll(resourceGroupName, name, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listSnapshotsPagingPage(
          resourceGroupName,
          name,
          options,
          settings
        );
      }
    };
  }

  private async *listSnapshotsPagingPage(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListSnapshotsOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Snapshot[]> {
    let result: WebAppsListSnapshotsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listSnapshots(resourceGroupName, name, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listSnapshotsNext(
        resourceGroupName,
        name,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listSnapshotsPagingAll(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListSnapshotsOptionalParams
  ): AsyncIterableIterator<Snapshot> {
    for await (const page of this.listSnapshotsPagingPage(
      resourceGroupName,
      name,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Returns all Snapshots to the user from DRSecondary endpoint.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Website Name.
   * @param options The options parameters.
   */
  public listSnapshotsFromDRSecondary(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListSnapshotsFromDRSecondaryOptionalParams
  ): PagedAsyncIterableIterator<Snapshot> {
    const iter = this.listSnapshotsFromDRSecondaryPagingAll(
      resourceGroupName,
      name,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listSnapshotsFromDRSecondaryPagingPage(
          resourceGroupName,
          name,
          options,
          settings
        );
      }
    };
  }

  private async *listSnapshotsFromDRSecondaryPagingPage(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListSnapshotsFromDRSecondaryOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Snapshot[]> {
    let result: WebAppsListSnapshotsFromDRSecondaryResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listSnapshotsFromDRSecondary(
        resourceGroupName,
        name,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listSnapshotsFromDRSecondaryNext(
        resourceGroupName,
        name,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listSnapshotsFromDRSecondaryPagingAll(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListSnapshotsFromDRSecondaryOptionalParams
  ): AsyncIterableIterator<Snapshot> {
    for await (const page of this.listSnapshotsFromDRSecondaryPagingPage(
      resourceGroupName,
      name,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for List triggered web jobs for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param options The options parameters.
   */
  public listTriggeredWebJobs(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListTriggeredWebJobsOptionalParams
  ): PagedAsyncIterableIterator<TriggeredWebJob> {
    const iter = this.listTriggeredWebJobsPagingAll(
      resourceGroupName,
      name,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listTriggeredWebJobsPagingPage(
          resourceGroupName,
          name,
          options,
          settings
        );
      }
    };
  }

  private async *listTriggeredWebJobsPagingPage(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListTriggeredWebJobsOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<TriggeredWebJob[]> {
    let result: WebAppsListTriggeredWebJobsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listTriggeredWebJobs(
        resourceGroupName,
        name,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listTriggeredWebJobsNext(
        resourceGroupName,
        name,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listTriggeredWebJobsPagingAll(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListTriggeredWebJobsOptionalParams
  ): AsyncIterableIterator<TriggeredWebJob> {
    for await (const page of this.listTriggeredWebJobsPagingPage(
      resourceGroupName,
      name,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for List a triggered web job's history for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param options The options parameters.
   */
  public listTriggeredWebJobHistory(
    resourceGroupName: string,
    name: string,
    webJobName: string,
    options?: WebAppsListTriggeredWebJobHistoryOptionalParams
  ): PagedAsyncIterableIterator<TriggeredJobHistory> {
    const iter = this.listTriggeredWebJobHistoryPagingAll(
      resourceGroupName,
      name,
      webJobName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listTriggeredWebJobHistoryPagingPage(
          resourceGroupName,
          name,
          webJobName,
          options,
          settings
        );
      }
    };
  }

  private async *listTriggeredWebJobHistoryPagingPage(
    resourceGroupName: string,
    name: string,
    webJobName: string,
    options?: WebAppsListTriggeredWebJobHistoryOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<TriggeredJobHistory[]> {
    let result: WebAppsListTriggeredWebJobHistoryResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listTriggeredWebJobHistory(
        resourceGroupName,
        name,
        webJobName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listTriggeredWebJobHistoryNext(
        resourceGroupName,
        name,
        webJobName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listTriggeredWebJobHistoryPagingAll(
    resourceGroupName: string,
    name: string,
    webJobName: string,
    options?: WebAppsListTriggeredWebJobHistoryOptionalParams
  ): AsyncIterableIterator<TriggeredJobHistory> {
    for await (const page of this.listTriggeredWebJobHistoryPagingPage(
      resourceGroupName,
      name,
      webJobName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Gets the quota usage information of an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  public listUsages(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListUsagesOptionalParams
  ): PagedAsyncIterableIterator<CsmUsageQuota> {
    const iter = this.listUsagesPagingAll(resourceGroupName, name, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listUsagesPagingPage(
          resourceGroupName,
          name,
          options,
          settings
        );
      }
    };
  }

  private async *listUsagesPagingPage(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListUsagesOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<CsmUsageQuota[]> {
    let result: WebAppsListUsagesResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listUsages(resourceGroupName, name, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listUsagesNext(
        resourceGroupName,
        name,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listUsagesPagingAll(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListUsagesOptionalParams
  ): AsyncIterableIterator<CsmUsageQuota> {
    for await (const page of this.listUsagesPagingPage(
      resourceGroupName,
      name,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for List webjobs for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param options The options parameters.
   */
  public listWebJobs(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListWebJobsOptionalParams
  ): PagedAsyncIterableIterator<WebJob> {
    const iter = this.listWebJobsPagingAll(resourceGroupName, name, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listWebJobsPagingPage(
          resourceGroupName,
          name,
          options,
          settings
        );
      }
    };
  }

  private async *listWebJobsPagingPage(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListWebJobsOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<WebJob[]> {
    let result: WebAppsListWebJobsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listWebJobs(resourceGroupName, name, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listWebJobsNext(
        resourceGroupName,
        name,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listWebJobsPagingAll(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListWebJobsOptionalParams
  ): AsyncIterableIterator<WebJob> {
    for await (const page of this.listWebJobsPagingPage(
      resourceGroupName,
      name,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Description for Get all apps for a subscription.
   * @param options The options parameters.
   */
  private _list(
    options?: WebAppsListOptionalParams
  ): Promise<WebAppsListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * Description for Gets all web, mobile, and API apps in the specified resource group.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: WebAppsListByResourceGroupOptionalParams
  ): Promise<WebAppsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Description for Gets the details of a web, mobile, or API app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    name: string,
    options?: WebAppsGetOptionalParams
  ): Promise<WebAppsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      getOperationSpec
    );
  }

  /**
   * Description for Creates a new web, mobile, or API app in an existing resource group, or updates an
   * existing app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Unique name of the app to create or update. To create or update a deployment slot, use
   *             the {slot} parameter.
   * @param siteEnvelope A JSON representation of the app properties. See example.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    name: string,
    siteEnvelope: Site,
    options?: WebAppsCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<WebAppsCreateOrUpdateResponse>,
      WebAppsCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<WebAppsCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, name, siteEnvelope, options },
      createOrUpdateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Description for Creates a new web, mobile, or API app in an existing resource group, or updates an
   * existing app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Unique name of the app to create or update. To create or update a deployment slot, use
   *             the {slot} parameter.
   * @param siteEnvelope A JSON representation of the app properties. See example.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    name: string,
    siteEnvelope: Site,
    options?: WebAppsCreateOrUpdateOptionalParams
  ): Promise<WebAppsCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      name,
      siteEnvelope,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Description for Deletes a web, mobile, or API app, or one of the deployment slots.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app to delete.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    name: string,
    options?: WebAppsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      deleteOperationSpec
    );
  }

  /**
   * Description for Creates a new web, mobile, or API app in an existing resource group, or updates an
   * existing app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Unique name of the app to create or update. To create or update a deployment slot, use
   *             the {slot} parameter.
   * @param siteEnvelope A JSON representation of the app properties. See example.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    name: string,
    siteEnvelope: SitePatchResource,
    options?: WebAppsUpdateOptionalParams
  ): Promise<WebAppsUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, siteEnvelope, options },
      updateOperationSpec
    );
  }

  /**
   * Description for Analyze a custom hostname.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param options The options parameters.
   */
  analyzeCustomHostname(
    resourceGroupName: string,
    name: string,
    options?: WebAppsAnalyzeCustomHostnameOptionalParams
  ): Promise<WebAppsAnalyzeCustomHostnameResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      analyzeCustomHostnameOperationSpec
    );
  }

  /**
   * Description for Applies the configuration settings from the target slot onto the current slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slotSwapEntity JSON object that contains the target slot name. See example.
   * @param options The options parameters.
   */
  applySlotConfigToProduction(
    resourceGroupName: string,
    name: string,
    slotSwapEntity: CsmSlotEntity,
    options?: WebAppsApplySlotConfigToProductionOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slotSwapEntity, options },
      applySlotConfigToProductionOperationSpec
    );
  }

  /**
   * Description for Creates a backup of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param request Backup configuration. You can use the JSON response from the POST action as input
   *                here.
   * @param options The options parameters.
   */
  backup(
    resourceGroupName: string,
    name: string,
    request: BackupRequest,
    options?: WebAppsBackupOptionalParams
  ): Promise<WebAppsBackupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, request, options },
      backupOperationSpec
    );
  }

  /**
   * Description for Gets existing backups of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  private _listBackups(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListBackupsOptionalParams
  ): Promise<WebAppsListBackupsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      listBackupsOperationSpec
    );
  }

  /**
   * Description for Gets a backup of an app by its ID.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param backupId ID of the backup.
   * @param options The options parameters.
   */
  getBackupStatus(
    resourceGroupName: string,
    name: string,
    backupId: string,
    options?: WebAppsGetBackupStatusOptionalParams
  ): Promise<WebAppsGetBackupStatusResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, backupId, options },
      getBackupStatusOperationSpec
    );
  }

  /**
   * Description for Deletes a backup of an app by its ID.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param backupId ID of the backup.
   * @param options The options parameters.
   */
  deleteBackup(
    resourceGroupName: string,
    name: string,
    backupId: string,
    options?: WebAppsDeleteBackupOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, backupId, options },
      deleteBackupOperationSpec
    );
  }

  /**
   * Description for Gets status of a web app backup that may be in progress, including secrets
   * associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS
   * URL for the backup if a new URL is passed in the request body.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param backupId ID of backup.
   * @param request Information on backup request.
   * @param options The options parameters.
   */
  listBackupStatusSecrets(
    resourceGroupName: string,
    name: string,
    backupId: string,
    request: BackupRequest,
    options?: WebAppsListBackupStatusSecretsOptionalParams
  ): Promise<WebAppsListBackupStatusSecretsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, backupId, request, options },
      listBackupStatusSecretsOperationSpec
    );
  }

  /**
   * Description for Restores a specific backup to another app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param backupId ID of the backup.
   * @param request Information on restore request .
   * @param options The options parameters.
   */
  async beginRestore(
    resourceGroupName: string,
    name: string,
    backupId: string,
    request: RestoreRequest,
    options?: WebAppsRestoreOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, name, backupId, request, options },
      restoreOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Description for Restores a specific backup to another app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param backupId ID of the backup.
   * @param request Information on restore request .
   * @param options The options parameters.
   */
  async beginRestoreAndWait(
    resourceGroupName: string,
    name: string,
    backupId: string,
    request: RestoreRequest,
    options?: WebAppsRestoreOptionalParams
  ): Promise<void> {
    const poller = await this.beginRestore(
      resourceGroupName,
      name,
      backupId,
      request,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Description for Returns whether Scm basic auth is allowed and whether Ftp is allowed for a given
   * site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  private _listBasicPublishingCredentialsPolicies(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListBasicPublishingCredentialsPoliciesOptionalParams
  ): Promise<WebAppsListBasicPublishingCredentialsPoliciesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      listBasicPublishingCredentialsPoliciesOperationSpec
    );
  }

  /**
   * Description for Returns whether FTP is allowed on the site or not.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  getFtpAllowed(
    resourceGroupName: string,
    name: string,
    options?: WebAppsGetFtpAllowedOptionalParams
  ): Promise<WebAppsGetFtpAllowedResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      getFtpAllowedOperationSpec
    );
  }

  /**
   * Description for Updates whether FTP is allowed on the site or not.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param csmPublishingAccessPoliciesEntity Publishing Credentials Policies parameters.
   * @param options The options parameters.
   */
  updateFtpAllowed(
    resourceGroupName: string,
    name: string,
    csmPublishingAccessPoliciesEntity: CsmPublishingCredentialsPoliciesEntity,
    options?: WebAppsUpdateFtpAllowedOptionalParams
  ): Promise<WebAppsUpdateFtpAllowedResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, csmPublishingAccessPoliciesEntity, options },
      updateFtpAllowedOperationSpec
    );
  }

  /**
   * Description for Returns whether Scm basic auth is allowed on the site or not.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  getScmAllowed(
    resourceGroupName: string,
    name: string,
    options?: WebAppsGetScmAllowedOptionalParams
  ): Promise<WebAppsGetScmAllowedResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      getScmAllowedOperationSpec
    );
  }

  /**
   * Description for Updates whether user publishing credentials are allowed on the site or not.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param csmPublishingAccessPoliciesEntity Publishing Credentials Policies parameters.
   * @param options The options parameters.
   */
  updateScmAllowed(
    resourceGroupName: string,
    name: string,
    csmPublishingAccessPoliciesEntity: CsmPublishingCredentialsPoliciesEntity,
    options?: WebAppsUpdateScmAllowedOptionalParams
  ): Promise<WebAppsUpdateScmAllowedResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, csmPublishingAccessPoliciesEntity, options },
      updateScmAllowedOperationSpec
    );
  }

  /**
   * Description for List the configurations of an app
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  private _listConfigurations(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListConfigurationsOptionalParams
  ): Promise<WebAppsListConfigurationsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      listConfigurationsOperationSpec
    );
  }

  /**
   * Description for Replaces the application settings of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param appSettings Application settings of the app.
   * @param options The options parameters.
   */
  updateApplicationSettings(
    resourceGroupName: string,
    name: string,
    appSettings: StringDictionary,
    options?: WebAppsUpdateApplicationSettingsOptionalParams
  ): Promise<WebAppsUpdateApplicationSettingsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, appSettings, options },
      updateApplicationSettingsOperationSpec
    );
  }

  /**
   * Description for Gets the application settings of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  listApplicationSettings(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListApplicationSettingsOptionalParams
  ): Promise<WebAppsListApplicationSettingsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      listApplicationSettingsOperationSpec
    );
  }

  /**
   * Description for Updates the Authentication / Authorization settings associated with web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param siteAuthSettings Auth settings associated with web app.
   * @param options The options parameters.
   */
  updateAuthSettings(
    resourceGroupName: string,
    name: string,
    siteAuthSettings: SiteAuthSettings,
    options?: WebAppsUpdateAuthSettingsOptionalParams
  ): Promise<WebAppsUpdateAuthSettingsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, siteAuthSettings, options },
      updateAuthSettingsOperationSpec
    );
  }

  /**
   * Description for Gets the Authentication/Authorization settings of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  getAuthSettings(
    resourceGroupName: string,
    name: string,
    options?: WebAppsGetAuthSettingsOptionalParams
  ): Promise<WebAppsGetAuthSettingsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      getAuthSettingsOperationSpec
    );
  }

  /**
   * Description for Gets site's Authentication / Authorization settings for apps via the V2 format
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  getAuthSettingsV2WithoutSecrets(
    resourceGroupName: string,
    name: string,
    options?: WebAppsGetAuthSettingsV2WithoutSecretsOptionalParams
  ): Promise<WebAppsGetAuthSettingsV2WithoutSecretsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      getAuthSettingsV2WithoutSecretsOperationSpec
    );
  }

  /**
   * Description for Updates site's Authentication / Authorization settings for apps via the V2 format
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param siteAuthSettingsV2 Auth settings associated with web app.
   * @param options The options parameters.
   */
  updateAuthSettingsV2(
    resourceGroupName: string,
    name: string,
    siteAuthSettingsV2: SiteAuthSettingsV2,
    options?: WebAppsUpdateAuthSettingsV2OptionalParams
  ): Promise<WebAppsUpdateAuthSettingsV2Response> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, siteAuthSettingsV2, options },
      updateAuthSettingsV2OperationSpec
    );
  }

  /**
   * Description for Gets site's Authentication / Authorization settings for apps via the V2 format
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  getAuthSettingsV2(
    resourceGroupName: string,
    name: string,
    options?: WebAppsGetAuthSettingsV2OptionalParams
  ): Promise<WebAppsGetAuthSettingsV2Response> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      getAuthSettingsV2OperationSpec
    );
  }

  /**
   * Description for Updates the Azure storage account configurations of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param azureStorageAccounts Azure storage accounts of the app.
   * @param options The options parameters.
   */
  updateAzureStorageAccounts(
    resourceGroupName: string,
    name: string,
    azureStorageAccounts: AzureStoragePropertyDictionaryResource,
    options?: WebAppsUpdateAzureStorageAccountsOptionalParams
  ): Promise<WebAppsUpdateAzureStorageAccountsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, azureStorageAccounts, options },
      updateAzureStorageAccountsOperationSpec
    );
  }

  /**
   * Description for Gets the Azure storage account configurations of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  listAzureStorageAccounts(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListAzureStorageAccountsOptionalParams
  ): Promise<WebAppsListAzureStorageAccountsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      listAzureStorageAccountsOperationSpec
    );
  }

  /**
   * Description for Updates the backup configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param request Edited backup configuration.
   * @param options The options parameters.
   */
  updateBackupConfiguration(
    resourceGroupName: string,
    name: string,
    request: BackupRequest,
    options?: WebAppsUpdateBackupConfigurationOptionalParams
  ): Promise<WebAppsUpdateBackupConfigurationResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, request, options },
      updateBackupConfigurationOperationSpec
    );
  }

  /**
   * Description for Deletes the backup configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  deleteBackupConfiguration(
    resourceGroupName: string,
    name: string,
    options?: WebAppsDeleteBackupConfigurationOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      deleteBackupConfigurationOperationSpec
    );
  }

  /**
   * Description for Gets the backup configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  getBackupConfiguration(
    resourceGroupName: string,
    name: string,
    options?: WebAppsGetBackupConfigurationOptionalParams
  ): Promise<WebAppsGetBackupConfigurationResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      getBackupConfigurationOperationSpec
    );
  }

  /**
   * Description for Gets the config reference app settings and status of an app
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  private _getAppSettingsKeyVaultReferences(
    resourceGroupName: string,
    name: string,
    options?: WebAppsGetAppSettingsKeyVaultReferencesOptionalParams
  ): Promise<WebAppsGetAppSettingsKeyVaultReferencesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      getAppSettingsKeyVaultReferencesOperationSpec
    );
  }

  /**
   * Description for Gets the config reference and status of an app
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param appSettingKey App Setting key name.
   * @param options The options parameters.
   */
  getAppSettingKeyVaultReference(
    resourceGroupName: string,
    name: string,
    appSettingKey: string,
    options?: WebAppsGetAppSettingKeyVaultReferenceOptionalParams
  ): Promise<WebAppsGetAppSettingKeyVaultReferenceResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, appSettingKey, options },
      getAppSettingKeyVaultReferenceOperationSpec
    );
  }

  /**
   * Description for Gets the config reference app settings and status of an app
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  private _getSiteConnectionStringKeyVaultReferences(
    resourceGroupName: string,
    name: string,
    options?: WebAppsGetSiteConnectionStringKeyVaultReferencesOptionalParams
  ): Promise<WebAppsGetSiteConnectionStringKeyVaultReferencesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      getSiteConnectionStringKeyVaultReferencesOperationSpec
    );
  }

  /**
   * Description for Gets the config reference and status of an app
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param connectionStringKey
   * @param options The options parameters.
   */
  getSiteConnectionStringKeyVaultReference(
    resourceGroupName: string,
    name: string,
    connectionStringKey: string,
    options?: WebAppsGetSiteConnectionStringKeyVaultReferenceOptionalParams
  ): Promise<WebAppsGetSiteConnectionStringKeyVaultReferenceResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, connectionStringKey, options },
      getSiteConnectionStringKeyVaultReferenceOperationSpec
    );
  }

  /**
   * Description for Replaces the connection strings of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param connectionStrings Connection strings of the app or deployment slot. See example.
   * @param options The options parameters.
   */
  updateConnectionStrings(
    resourceGroupName: string,
    name: string,
    connectionStrings: ConnectionStringDictionary,
    options?: WebAppsUpdateConnectionStringsOptionalParams
  ): Promise<WebAppsUpdateConnectionStringsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, connectionStrings, options },
      updateConnectionStringsOperationSpec
    );
  }

  /**
   * Description for Gets the connection strings of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  listConnectionStrings(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListConnectionStringsOptionalParams
  ): Promise<WebAppsListConnectionStringsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      listConnectionStringsOperationSpec
    );
  }

  /**
   * Description for Gets the logging configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  getDiagnosticLogsConfiguration(
    resourceGroupName: string,
    name: string,
    options?: WebAppsGetDiagnosticLogsConfigurationOptionalParams
  ): Promise<WebAppsGetDiagnosticLogsConfigurationResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      getDiagnosticLogsConfigurationOperationSpec
    );
  }

  /**
   * Description for Updates the logging configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param siteLogsConfig A SiteLogsConfig JSON object that contains the logging configuration to change
   *                       in the "properties" property.
   * @param options The options parameters.
   */
  updateDiagnosticLogsConfig(
    resourceGroupName: string,
    name: string,
    siteLogsConfig: SiteLogsConfig,
    options?: WebAppsUpdateDiagnosticLogsConfigOptionalParams
  ): Promise<WebAppsUpdateDiagnosticLogsConfigResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, siteLogsConfig, options },
      updateDiagnosticLogsConfigOperationSpec
    );
  }

  /**
   * Description for Replaces the metadata of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param metadata Edited metadata of the app or deployment slot. See example.
   * @param options The options parameters.
   */
  updateMetadata(
    resourceGroupName: string,
    name: string,
    metadata: StringDictionary,
    options?: WebAppsUpdateMetadataOptionalParams
  ): Promise<WebAppsUpdateMetadataResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, metadata, options },
      updateMetadataOperationSpec
    );
  }

  /**
   * Description for Gets the metadata of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  listMetadata(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListMetadataOptionalParams
  ): Promise<WebAppsListMetadataResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      listMetadataOperationSpec
    );
  }

  /**
   * Description for Gets the Git/FTP publishing credentials of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  async beginListPublishingCredentials(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListPublishingCredentialsOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<WebAppsListPublishingCredentialsResponse>,
      WebAppsListPublishingCredentialsResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<WebAppsListPublishingCredentialsResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, name, options },
      listPublishingCredentialsOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Description for Gets the Git/FTP publishing credentials of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  async beginListPublishingCredentialsAndWait(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListPublishingCredentialsOptionalParams
  ): Promise<WebAppsListPublishingCredentialsResponse> {
    const poller = await this.beginListPublishingCredentials(
      resourceGroupName,
      name,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Description for Updates the Push settings associated with web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param pushSettings Push settings associated with web app.
   * @param options The options parameters.
   */
  updateSitePushSettings(
    resourceGroupName: string,
    name: string,
    pushSettings: PushSettings,
    options?: WebAppsUpdateSitePushSettingsOptionalParams
  ): Promise<WebAppsUpdateSitePushSettingsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, pushSettings, options },
      updateSitePushSettingsOperationSpec
    );
  }

  /**
   * Description for Gets the Push settings associated with web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param options The options parameters.
   */
  listSitePushSettings(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListSitePushSettingsOptionalParams
  ): Promise<WebAppsListSitePushSettingsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      listSitePushSettingsOperationSpec
    );
  }

  /**
   * Description for Gets the names of app settings and connection strings that stick to the slot (not
   * swapped).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  listSlotConfigurationNames(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListSlotConfigurationNamesOptionalParams
  ): Promise<WebAppsListSlotConfigurationNamesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      listSlotConfigurationNamesOperationSpec
    );
  }

  /**
   * Description for Updates the names of application settings and connection string that remain with the
   * slot during swap operation.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slotConfigNames Names of application settings and connection strings. See example.
   * @param options The options parameters.
   */
  updateSlotConfigurationNames(
    resourceGroupName: string,
    name: string,
    slotConfigNames: SlotConfigNamesResource,
    options?: WebAppsUpdateSlotConfigurationNamesOptionalParams
  ): Promise<WebAppsUpdateSlotConfigurationNamesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slotConfigNames, options },
      updateSlotConfigurationNamesOperationSpec
    );
  }

  /**
   * Description for Gets the configuration of an app, such as platform version and bitness, default
   * documents, virtual applications, Always On, etc.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  getConfiguration(
    resourceGroupName: string,
    name: string,
    options?: WebAppsGetConfigurationOptionalParams
  ): Promise<WebAppsGetConfigurationResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      getConfigurationOperationSpec
    );
  }

  /**
   * Description for Updates the configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param siteConfig JSON representation of a SiteConfig object. See example.
   * @param options The options parameters.
   */
  createOrUpdateConfiguration(
    resourceGroupName: string,
    name: string,
    siteConfig: SiteConfigResource,
    options?: WebAppsCreateOrUpdateConfigurationOptionalParams
  ): Promise<WebAppsCreateOrUpdateConfigurationResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, siteConfig, options },
      createOrUpdateConfigurationOperationSpec
    );
  }

  /**
   * Description for Updates the configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param siteConfig JSON representation of a SiteConfig object. See example.
   * @param options The options parameters.
   */
  updateConfiguration(
    resourceGroupName: string,
    name: string,
    siteConfig: SiteConfigResource,
    options?: WebAppsUpdateConfigurationOptionalParams
  ): Promise<WebAppsUpdateConfigurationResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, siteConfig, options },
      updateConfigurationOperationSpec
    );
  }

  /**
   * Description for Gets a list of web app configuration snapshots identifiers. Each element of the list
   * contains a timestamp and the ID of the snapshot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  private _listConfigurationSnapshotInfo(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListConfigurationSnapshotInfoOptionalParams
  ): Promise<WebAppsListConfigurationSnapshotInfoResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      listConfigurationSnapshotInfoOperationSpec
    );
  }

  /**
   * Description for Gets a snapshot of the configuration of an app at a previous point in time.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param snapshotId The ID of the snapshot to read.
   * @param options The options parameters.
   */
  getConfigurationSnapshot(
    resourceGroupName: string,
    name: string,
    snapshotId: string,
    options?: WebAppsGetConfigurationSnapshotOptionalParams
  ): Promise<WebAppsGetConfigurationSnapshotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, snapshotId, options },
      getConfigurationSnapshotOperationSpec
    );
  }

  /**
   * Description for Reverts the configuration of an app to a previous snapshot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param snapshotId The ID of the snapshot to read.
   * @param options The options parameters.
   */
  recoverSiteConfigurationSnapshot(
    resourceGroupName: string,
    name: string,
    snapshotId: string,
    options?: WebAppsRecoverSiteConfigurationSnapshotOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, snapshotId, options },
      recoverSiteConfigurationSnapshotOperationSpec
    );
  }

  /**
   * Description for Gets the last lines of docker logs for the given site
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param options The options parameters.
   */
  getWebSiteContainerLogs(
    resourceGroupName: string,
    name: string,
    options?: WebAppsGetWebSiteContainerLogsOptionalParams
  ): Promise<WebAppsGetWebSiteContainerLogsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      getWebSiteContainerLogsOperationSpec
    );
  }

  /**
   * Description for Gets the ZIP archived docker log files for the given site
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param options The options parameters.
   */
  getContainerLogsZip(
    resourceGroupName: string,
    name: string,
    options?: WebAppsGetContainerLogsZipOptionalParams
  ): Promise<WebAppsGetContainerLogsZipResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      getContainerLogsZipOperationSpec
    );
  }

  /**
   * Description for List continuous web jobs for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param options The options parameters.
   */
  private _listContinuousWebJobs(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListContinuousWebJobsOptionalParams
  ): Promise<WebAppsListContinuousWebJobsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      listContinuousWebJobsOperationSpec
    );
  }

  /**
   * Description for Gets a continuous web job by its ID for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param options The options parameters.
   */
  getContinuousWebJob(
    resourceGroupName: string,
    name: string,
    webJobName: string,
    options?: WebAppsGetContinuousWebJobOptionalParams
  ): Promise<WebAppsGetContinuousWebJobResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, webJobName, options },
      getContinuousWebJobOperationSpec
    );
  }

  /**
   * Description for Delete a continuous web job by its ID for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param options The options parameters.
   */
  deleteContinuousWebJob(
    resourceGroupName: string,
    name: string,
    webJobName: string,
    options?: WebAppsDeleteContinuousWebJobOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, webJobName, options },
      deleteContinuousWebJobOperationSpec
    );
  }

  /**
   * Description for Start a continuous web job for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param options The options parameters.
   */
  startContinuousWebJob(
    resourceGroupName: string,
    name: string,
    webJobName: string,
    options?: WebAppsStartContinuousWebJobOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, webJobName, options },
      startContinuousWebJobOperationSpec
    );
  }

  /**
   * Description for Stop a continuous web job for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param options The options parameters.
   */
  stopContinuousWebJob(
    resourceGroupName: string,
    name: string,
    webJobName: string,
    options?: WebAppsStopContinuousWebJobOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, webJobName, options },
      stopContinuousWebJobOperationSpec
    );
  }

  /**
   * List deployment statuses for an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  private _listProductionSiteDeploymentStatuses(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListProductionSiteDeploymentStatusesOptionalParams
  ): Promise<WebAppsListProductionSiteDeploymentStatusesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      listProductionSiteDeploymentStatusesOperationSpec
    );
  }

  /**
   * Gets the deployment status for an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param deploymentStatusId GUID of the deployment operation.
   * @param options The options parameters.
   */
  async beginGetProductionSiteDeploymentStatus(
    resourceGroupName: string,
    name: string,
    deploymentStatusId: string,
    options?: WebAppsGetProductionSiteDeploymentStatusOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<WebAppsGetProductionSiteDeploymentStatusResponse>,
      WebAppsGetProductionSiteDeploymentStatusResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<WebAppsGetProductionSiteDeploymentStatusResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, name, deploymentStatusId, options },
      getProductionSiteDeploymentStatusOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Gets the deployment status for an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param deploymentStatusId GUID of the deployment operation.
   * @param options The options parameters.
   */
  async beginGetProductionSiteDeploymentStatusAndWait(
    resourceGroupName: string,
    name: string,
    deploymentStatusId: string,
    options?: WebAppsGetProductionSiteDeploymentStatusOptionalParams
  ): Promise<WebAppsGetProductionSiteDeploymentStatusResponse> {
    const poller = await this.beginGetProductionSiteDeploymentStatus(
      resourceGroupName,
      name,
      deploymentStatusId,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Description for List deployments for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  private _listDeployments(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListDeploymentsOptionalParams
  ): Promise<WebAppsListDeploymentsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      listDeploymentsOperationSpec
    );
  }

  /**
   * Description for Get a deployment by its ID for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param id Deployment ID.
   * @param options The options parameters.
   */
  getDeployment(
    resourceGroupName: string,
    name: string,
    id: string,
    options?: WebAppsGetDeploymentOptionalParams
  ): Promise<WebAppsGetDeploymentResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, id, options },
      getDeploymentOperationSpec
    );
  }

  /**
   * Description for Create a deployment for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param id ID of an existing deployment.
   * @param deployment Deployment details.
   * @param options The options parameters.
   */
  createDeployment(
    resourceGroupName: string,
    name: string,
    id: string,
    deployment: Deployment,
    options?: WebAppsCreateDeploymentOptionalParams
  ): Promise<WebAppsCreateDeploymentResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, id, deployment, options },
      createDeploymentOperationSpec
    );
  }

  /**
   * Description for Delete a deployment by its ID for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param id Deployment ID.
   * @param options The options parameters.
   */
  deleteDeployment(
    resourceGroupName: string,
    name: string,
    id: string,
    options?: WebAppsDeleteDeploymentOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, id, options },
      deleteDeploymentOperationSpec
    );
  }

  /**
   * Description for List deployment log for specific deployment for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param id The ID of a specific deployment. This is the value of the name property in the JSON
   *           response from "GET /api/sites/{siteName}/deployments".
   * @param options The options parameters.
   */
  listDeploymentLog(
    resourceGroupName: string,
    name: string,
    id: string,
    options?: WebAppsListDeploymentLogOptionalParams
  ): Promise<WebAppsListDeploymentLogResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, id, options },
      listDeploymentLogOperationSpec
    );
  }

  /**
   * Description for Discovers an existing app backup that can be restored from a blob in Azure storage.
   * Use this to get information about the databases stored in a backup.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param request A RestoreRequest object that includes Azure storage URL and blog name for discovery
   *                of backup.
   * @param options The options parameters.
   */
  discoverBackup(
    resourceGroupName: string,
    name: string,
    request: RestoreRequest,
    options?: WebAppsDiscoverBackupOptionalParams
  ): Promise<WebAppsDiscoverBackupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, request, options },
      discoverBackupOperationSpec
    );
  }

  /**
   * Description for Lists ownership identifiers for domain associated with web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  private _listDomainOwnershipIdentifiers(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListDomainOwnershipIdentifiersOptionalParams
  ): Promise<WebAppsListDomainOwnershipIdentifiersResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      listDomainOwnershipIdentifiersOperationSpec
    );
  }

  /**
   * Description for Get domain ownership identifier for web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param domainOwnershipIdentifierName Name of domain ownership identifier.
   * @param options The options parameters.
   */
  getDomainOwnershipIdentifier(
    resourceGroupName: string,
    name: string,
    domainOwnershipIdentifierName: string,
    options?: WebAppsGetDomainOwnershipIdentifierOptionalParams
  ): Promise<WebAppsGetDomainOwnershipIdentifierResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, domainOwnershipIdentifierName, options },
      getDomainOwnershipIdentifierOperationSpec
    );
  }

  /**
   * Description for Creates a domain ownership identifier for web app, or updates an existing ownership
   * identifier.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param domainOwnershipIdentifierName Name of domain ownership identifier.
   * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties.
   * @param options The options parameters.
   */
  createOrUpdateDomainOwnershipIdentifier(
    resourceGroupName: string,
    name: string,
    domainOwnershipIdentifierName: string,
    domainOwnershipIdentifier: Identifier,
    options?: WebAppsCreateOrUpdateDomainOwnershipIdentifierOptionalParams
  ): Promise<WebAppsCreateOrUpdateDomainOwnershipIdentifierResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        domainOwnershipIdentifierName,
        domainOwnershipIdentifier,
        options
      },
      createOrUpdateDomainOwnershipIdentifierOperationSpec
    );
  }

  /**
   * Description for Deletes a domain ownership identifier for a web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param domainOwnershipIdentifierName Name of domain ownership identifier.
   * @param options The options parameters.
   */
  deleteDomainOwnershipIdentifier(
    resourceGroupName: string,
    name: string,
    domainOwnershipIdentifierName: string,
    options?: WebAppsDeleteDomainOwnershipIdentifierOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, domainOwnershipIdentifierName, options },
      deleteDomainOwnershipIdentifierOperationSpec
    );
  }

  /**
   * Description for Creates a domain ownership identifier for web app, or updates an existing ownership
   * identifier.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param domainOwnershipIdentifierName Name of domain ownership identifier.
   * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties.
   * @param options The options parameters.
   */
  updateDomainOwnershipIdentifier(
    resourceGroupName: string,
    name: string,
    domainOwnershipIdentifierName: string,
    domainOwnershipIdentifier: Identifier,
    options?: WebAppsUpdateDomainOwnershipIdentifierOptionalParams
  ): Promise<WebAppsUpdateDomainOwnershipIdentifierResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        domainOwnershipIdentifierName,
        domainOwnershipIdentifier,
        options
      },
      updateDomainOwnershipIdentifierOperationSpec
    );
  }

  /**
   * Description for Get the status of the last MSDeploy operation.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param options The options parameters.
   */
  getMSDeployStatus(
    resourceGroupName: string,
    name: string,
    options?: WebAppsGetMSDeployStatusOptionalParams
  ): Promise<WebAppsGetMSDeployStatusResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      getMSDeployStatusOperationSpec
    );
  }

  /**
   * Description for Invoke the MSDeploy web app extension.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param mSDeploy Details of MSDeploy operation
   * @param options The options parameters.
   */
  async beginCreateMSDeployOperation(
    resourceGroupName: string,
    name: string,
    mSDeploy: MSDeploy,
    options?: WebAppsCreateMSDeployOperationOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<WebAppsCreateMSDeployOperationResponse>,
      WebAppsCreateMSDeployOperationResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<WebAppsCreateMSDeployOperationResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, name, mSDeploy, options },
      createMSDeployOperationOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Description for Invoke the MSDeploy web app extension.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param mSDeploy Details of MSDeploy operation
   * @param options The options parameters.
   */
  async beginCreateMSDeployOperationAndWait(
    resourceGroupName: string,
    name: string,
    mSDeploy: MSDeploy,
    options?: WebAppsCreateMSDeployOperationOptionalParams
  ): Promise<WebAppsCreateMSDeployOperationResponse> {
    const poller = await this.beginCreateMSDeployOperation(
      resourceGroupName,
      name,
      mSDeploy,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Description for Get the MSDeploy Log for the last MSDeploy operation.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param options The options parameters.
   */
  getMSDeployLog(
    resourceGroupName: string,
    name: string,
    options?: WebAppsGetMSDeployLogOptionalParams
  ): Promise<WebAppsGetMSDeployLogResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      getMSDeployLogOperationSpec
    );
  }

  /**
   * Description for Invoke onedeploy status API /api/deployments and gets the deployment status for the
   * site
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param options The options parameters.
   */
  getOneDeployStatus(
    resourceGroupName: string,
    name: string,
    options?: WebAppsGetOneDeployStatusOptionalParams
  ): Promise<WebAppsGetOneDeployStatusResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      getOneDeployStatusOperationSpec
    );
  }

  /**
   * Description for Invoke the OneDeploy publish web app extension.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param options The options parameters.
   */
  createOneDeployOperation(
    resourceGroupName: string,
    name: string,
    options?: WebAppsCreateOneDeployOperationOptionalParams
  ): Promise<WebAppsCreateOneDeployOperationResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      createOneDeployOperationOperationSpec
    );
  }

  /**
   * Description for List the functions for a web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param options The options parameters.
   */
  private _listFunctions(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListFunctionsOptionalParams
  ): Promise<WebAppsListFunctionsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      listFunctionsOperationSpec
    );
  }

  /**
   * Description for Fetch a short lived token that can be exchanged for a master key.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param options The options parameters.
   */
  getFunctionsAdminToken(
    resourceGroupName: string,
    name: string,
    options?: WebAppsGetFunctionsAdminTokenOptionalParams
  ): Promise<WebAppsGetFunctionsAdminTokenResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      getFunctionsAdminTokenOperationSpec
    );
  }

  /**
   * Description for Get function information by its ID for web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param options The options parameters.
   */
  getFunction(
    resourceGroupName: string,
    name: string,
    functionName: string,
    options?: WebAppsGetFunctionOptionalParams
  ): Promise<WebAppsGetFunctionResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, functionName, options },
      getFunctionOperationSpec
    );
  }

  /**
   * Description for Create function for web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param functionEnvelope Function details.
   * @param options The options parameters.
   */
  async beginCreateFunction(
    resourceGroupName: string,
    name: string,
    functionName: string,
    functionEnvelope: FunctionEnvelope,
    options?: WebAppsCreateFunctionOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<WebAppsCreateFunctionResponse>,
      WebAppsCreateFunctionResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<WebAppsCreateFunctionResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, name, functionName, functionEnvelope, options },
      createFunctionOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Description for Create function for web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param functionEnvelope Function details.
   * @param options The options parameters.
   */
  async beginCreateFunctionAndWait(
    resourceGroupName: string,
    name: string,
    functionName: string,
    functionEnvelope: FunctionEnvelope,
    options?: WebAppsCreateFunctionOptionalParams
  ): Promise<WebAppsCreateFunctionResponse> {
    const poller = await this.beginCreateFunction(
      resourceGroupName,
      name,
      functionName,
      functionEnvelope,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Description for Delete a function for web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param options The options parameters.
   */
  deleteFunction(
    resourceGroupName: string,
    name: string,
    functionName: string,
    options?: WebAppsDeleteFunctionOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, functionName, options },
      deleteFunctionOperationSpec
    );
  }

  /**
   * Description for Add or update a function secret.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName The name of the function.
   * @param keyName The name of the key.
   * @param key The key to create or update
   * @param options The options parameters.
   */
  createOrUpdateFunctionSecret(
    resourceGroupName: string,
    name: string,
    functionName: string,
    keyName: string,
    key: KeyInfo,
    options?: WebAppsCreateOrUpdateFunctionSecretOptionalParams
  ): Promise<WebAppsCreateOrUpdateFunctionSecretResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, functionName, keyName, key, options },
      createOrUpdateFunctionSecretOperationSpec
    );
  }

  /**
   * Description for Delete a function secret.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName The name of the function.
   * @param keyName The name of the key.
   * @param options The options parameters.
   */
  deleteFunctionSecret(
    resourceGroupName: string,
    name: string,
    functionName: string,
    keyName: string,
    options?: WebAppsDeleteFunctionSecretOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, functionName, keyName, options },
      deleteFunctionSecretOperationSpec
    );
  }

  /**
   * Description for Get function keys for a function in a web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param options The options parameters.
   */
  listFunctionKeys(
    resourceGroupName: string,
    name: string,
    functionName: string,
    options?: WebAppsListFunctionKeysOptionalParams
  ): Promise<WebAppsListFunctionKeysResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, functionName, options },
      listFunctionKeysOperationSpec
    );
  }

  /**
   * Description for Get function secrets for a function in a web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param options The options parameters.
   */
  listFunctionSecrets(
    resourceGroupName: string,
    name: string,
    functionName: string,
    options?: WebAppsListFunctionSecretsOptionalParams
  ): Promise<WebAppsListFunctionSecretsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, functionName, options },
      listFunctionSecretsOperationSpec
    );
  }

  /**
   * Description for Get host secrets for a function app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param options The options parameters.
   */
  listHostKeys(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListHostKeysOptionalParams
  ): Promise<WebAppsListHostKeysResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      listHostKeysOperationSpec
    );
  }

  /**
   * Description for This is to allow calling via powershell and ARM template.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  listSyncStatus(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListSyncStatusOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      listSyncStatusOperationSpec
    );
  }

  /**
   * Description for Syncs function trigger metadata to the management database
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  syncFunctions(
    resourceGroupName: string,
    name: string,
    options?: WebAppsSyncFunctionsOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      syncFunctionsOperationSpec
    );
  }

  /**
   * Description for Add or update a host level secret.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param keyType The type of host key.
   * @param keyName The name of the key.
   * @param key The key to create or update
   * @param options The options parameters.
   */
  createOrUpdateHostSecret(
    resourceGroupName: string,
    name: string,
    keyType: string,
    keyName: string,
    key: KeyInfo,
    options?: WebAppsCreateOrUpdateHostSecretOptionalParams
  ): Promise<WebAppsCreateOrUpdateHostSecretResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, keyType, keyName, key, options },
      createOrUpdateHostSecretOperationSpec
    );
  }

  /**
   * Description for Delete a host level secret.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param keyType The type of host key.
   * @param keyName The name of the key.
   * @param options The options parameters.
   */
  deleteHostSecret(
    resourceGroupName: string,
    name: string,
    keyType: string,
    keyName: string,
    options?: WebAppsDeleteHostSecretOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, keyType, keyName, options },
      deleteHostSecretOperationSpec
    );
  }

  /**
   * Description for Get hostname bindings for an app or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  private _listHostNameBindings(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListHostNameBindingsOptionalParams
  ): Promise<WebAppsListHostNameBindingsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      listHostNameBindingsOperationSpec
    );
  }

  /**
   * Description for Get the named hostname binding for an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param hostName Hostname in the hostname binding.
   * @param options The options parameters.
   */
  getHostNameBinding(
    resourceGroupName: string,
    name: string,
    hostName: string,
    options?: WebAppsGetHostNameBindingOptionalParams
  ): Promise<WebAppsGetHostNameBindingResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, hostName, options },
      getHostNameBindingOperationSpec
    );
  }

  /**
   * Description for Creates a hostname binding for an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param hostName Hostname in the hostname binding.
   * @param hostNameBinding Binding details. This is the JSON representation of a HostNameBinding object.
   * @param options The options parameters.
   */
  createOrUpdateHostNameBinding(
    resourceGroupName: string,
    name: string,
    hostName: string,
    hostNameBinding: HostNameBinding,
    options?: WebAppsCreateOrUpdateHostNameBindingOptionalParams
  ): Promise<WebAppsCreateOrUpdateHostNameBindingResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, hostName, hostNameBinding, options },
      createOrUpdateHostNameBindingOperationSpec
    );
  }

  /**
   * Description for Deletes a hostname binding for an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param hostName Hostname in the hostname binding.
   * @param options The options parameters.
   */
  deleteHostNameBinding(
    resourceGroupName: string,
    name: string,
    hostName: string,
    options?: WebAppsDeleteHostNameBindingOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, hostName, options },
      deleteHostNameBindingOperationSpec
    );
  }

  /**
   * Description for Retrieves a specific Service Bus Hybrid Connection used by this Web App.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param namespaceName The namespace for this hybrid connection.
   * @param relayName The relay name for this hybrid connection.
   * @param options The options parameters.
   */
  getHybridConnection(
    resourceGroupName: string,
    name: string,
    namespaceName: string,
    relayName: string,
    options?: WebAppsGetHybridConnectionOptionalParams
  ): Promise<WebAppsGetHybridConnectionResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, namespaceName, relayName, options },
      getHybridConnectionOperationSpec
    );
  }

  /**
   * Description for Creates a new Hybrid Connection using a Service Bus relay.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param namespaceName The namespace for this hybrid connection.
   * @param relayName The relay name for this hybrid connection.
   * @param connectionEnvelope The details of the hybrid connection.
   * @param options The options parameters.
   */
  createOrUpdateHybridConnection(
    resourceGroupName: string,
    name: string,
    namespaceName: string,
    relayName: string,
    connectionEnvelope: HybridConnection,
    options?: WebAppsCreateOrUpdateHybridConnectionOptionalParams
  ): Promise<WebAppsCreateOrUpdateHybridConnectionResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        namespaceName,
        relayName,
        connectionEnvelope,
        options
      },
      createOrUpdateHybridConnectionOperationSpec
    );
  }

  /**
   * Description for Removes a Hybrid Connection from this site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param namespaceName The namespace for this hybrid connection.
   * @param relayName The relay name for this hybrid connection.
   * @param options The options parameters.
   */
  deleteHybridConnection(
    resourceGroupName: string,
    name: string,
    namespaceName: string,
    relayName: string,
    options?: WebAppsDeleteHybridConnectionOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, namespaceName, relayName, options },
      deleteHybridConnectionOperationSpec
    );
  }

  /**
   * Description for Creates a new Hybrid Connection using a Service Bus relay.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param namespaceName The namespace for this hybrid connection.
   * @param relayName The relay name for this hybrid connection.
   * @param connectionEnvelope The details of the hybrid connection.
   * @param options The options parameters.
   */
  updateHybridConnection(
    resourceGroupName: string,
    name: string,
    namespaceName: string,
    relayName: string,
    connectionEnvelope: HybridConnection,
    options?: WebAppsUpdateHybridConnectionOptionalParams
  ): Promise<WebAppsUpdateHybridConnectionResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        namespaceName,
        relayName,
        connectionEnvelope,
        options
      },
      updateHybridConnectionOperationSpec
    );
  }

  /**
   * Description for Retrieves all Service Bus Hybrid Connections used by this Web App.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param options The options parameters.
   */
  listHybridConnections(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListHybridConnectionsOptionalParams
  ): Promise<WebAppsListHybridConnectionsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      listHybridConnectionsOperationSpec
    );
  }

  /**
   * Description for Gets hybrid connections configured for an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  listRelayServiceConnections(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListRelayServiceConnectionsOptionalParams
  ): Promise<WebAppsListRelayServiceConnectionsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      listRelayServiceConnectionsOperationSpec
    );
  }

  /**
   * Description for Gets a hybrid connection configuration by its name.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param entityName Name of the hybrid connection.
   * @param options The options parameters.
   */
  getRelayServiceConnection(
    resourceGroupName: string,
    name: string,
    entityName: string,
    options?: WebAppsGetRelayServiceConnectionOptionalParams
  ): Promise<WebAppsGetRelayServiceConnectionResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, entityName, options },
      getRelayServiceConnectionOperationSpec
    );
  }

  /**
   * Description for Creates a new hybrid connection configuration (PUT), or updates an existing one
   * (PATCH).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param entityName Name of the hybrid connection configuration.
   * @param connectionEnvelope Details of the hybrid connection configuration.
   * @param options The options parameters.
   */
  createOrUpdateRelayServiceConnection(
    resourceGroupName: string,
    name: string,
    entityName: string,
    connectionEnvelope: RelayServiceConnectionEntity,
    options?: WebAppsCreateOrUpdateRelayServiceConnectionOptionalParams
  ): Promise<WebAppsCreateOrUpdateRelayServiceConnectionResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, entityName, connectionEnvelope, options },
      createOrUpdateRelayServiceConnectionOperationSpec
    );
  }

  /**
   * Description for Deletes a relay service connection by its name.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param entityName Name of the hybrid connection configuration.
   * @param options The options parameters.
   */
  deleteRelayServiceConnection(
    resourceGroupName: string,
    name: string,
    entityName: string,
    options?: WebAppsDeleteRelayServiceConnectionOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, entityName, options },
      deleteRelayServiceConnectionOperationSpec
    );
  }

  /**
   * Description for Creates a new hybrid connection configuration (PUT), or updates an existing one
   * (PATCH).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param entityName Name of the hybrid connection configuration.
   * @param connectionEnvelope Details of the hybrid connection configuration.
   * @param options The options parameters.
   */
  updateRelayServiceConnection(
    resourceGroupName: string,
    name: string,
    entityName: string,
    connectionEnvelope: RelayServiceConnectionEntity,
    options?: WebAppsUpdateRelayServiceConnectionOptionalParams
  ): Promise<WebAppsUpdateRelayServiceConnectionResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, entityName, connectionEnvelope, options },
      updateRelayServiceConnectionOperationSpec
    );
  }

  /**
   * Description for Gets all scale-out instances of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  private _listInstanceIdentifiers(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListInstanceIdentifiersOptionalParams
  ): Promise<WebAppsListInstanceIdentifiersResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      listInstanceIdentifiersOperationSpec
    );
  }

  /**
   * Description for Gets all scale-out instances of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param instanceId
   * @param options The options parameters.
   */
  getInstanceInfo(
    resourceGroupName: string,
    name: string,
    instanceId: string,
    options?: WebAppsGetInstanceInfoOptionalParams
  ): Promise<WebAppsGetInstanceInfoResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, instanceId, options },
      getInstanceInfoOperationSpec
    );
  }

  /**
   * Description for Get the status of the last MSDeploy operation.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param instanceId ID of web app instance.
   * @param options The options parameters.
   */
  getInstanceMsDeployStatus(
    resourceGroupName: string,
    name: string,
    instanceId: string,
    options?: WebAppsGetInstanceMsDeployStatusOptionalParams
  ): Promise<WebAppsGetInstanceMsDeployStatusResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, instanceId, options },
      getInstanceMsDeployStatusOperationSpec
    );
  }

  /**
   * Description for Invoke the MSDeploy web app extension.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param instanceId ID of web app instance.
   * @param mSDeploy Details of MSDeploy operation
   * @param options The options parameters.
   */
  async beginCreateInstanceMSDeployOperation(
    resourceGroupName: string,
    name: string,
    instanceId: string,
    mSDeploy: MSDeploy,
    options?: WebAppsCreateInstanceMSDeployOperationOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<WebAppsCreateInstanceMSDeployOperationResponse>,
      WebAppsCreateInstanceMSDeployOperationResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<WebAppsCreateInstanceMSDeployOperationResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, name, instanceId, mSDeploy, options },
      createInstanceMSDeployOperationOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Description for Invoke the MSDeploy web app extension.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param instanceId ID of web app instance.
   * @param mSDeploy Details of MSDeploy operation
   * @param options The options parameters.
   */
  async beginCreateInstanceMSDeployOperationAndWait(
    resourceGroupName: string,
    name: string,
    instanceId: string,
    mSDeploy: MSDeploy,
    options?: WebAppsCreateInstanceMSDeployOperationOptionalParams
  ): Promise<WebAppsCreateInstanceMSDeployOperationResponse> {
    const poller = await this.beginCreateInstanceMSDeployOperation(
      resourceGroupName,
      name,
      instanceId,
      mSDeploy,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Description for Get the MSDeploy Log for the last MSDeploy operation.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param instanceId ID of web app instance.
   * @param options The options parameters.
   */
  getInstanceMSDeployLog(
    resourceGroupName: string,
    name: string,
    instanceId: string,
    options?: WebAppsGetInstanceMSDeployLogOptionalParams
  ): Promise<WebAppsGetInstanceMSDeployLogResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, instanceId, options },
      getInstanceMSDeployLogOperationSpec
    );
  }

  /**
   * Description for Get list of processes for a web site, or a deployment slot, or for a specific
   * scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in
   *                   the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The options parameters.
   */
  private _listInstanceProcesses(
    resourceGroupName: string,
    name: string,
    instanceId: string,
    options?: WebAppsListInstanceProcessesOptionalParams
  ): Promise<WebAppsListInstanceProcessesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, instanceId, options },
      listInstanceProcessesOperationSpec
    );
  }

  /**
   * Description for Get process information by its ID for a specific scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in
   *                   the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The options parameters.
   */
  getInstanceProcess(
    resourceGroupName: string,
    name: string,
    processId: string,
    instanceId: string,
    options?: WebAppsGetInstanceProcessOptionalParams
  ): Promise<WebAppsGetInstanceProcessResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, processId, instanceId, options },
      getInstanceProcessOperationSpec
    );
  }

  /**
   * Description for Terminate a process by its ID for a web site, or a deployment slot, or specific
   * scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in
   *                   the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The options parameters.
   */
  deleteInstanceProcess(
    resourceGroupName: string,
    name: string,
    processId: string,
    instanceId: string,
    options?: WebAppsDeleteInstanceProcessOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, processId, instanceId, options },
      deleteInstanceProcessOperationSpec
    );
  }

  /**
   * Description for Get a memory dump of a process by its ID for a specific scaled-out instance in a web
   * site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in
   *                   the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The options parameters.
   */
  getInstanceProcessDump(
    resourceGroupName: string,
    name: string,
    processId: string,
    instanceId: string,
    options?: WebAppsGetInstanceProcessDumpOptionalParams
  ): Promise<WebAppsGetInstanceProcessDumpResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, processId, instanceId, options },
      getInstanceProcessDumpOperationSpec
    );
  }

  /**
   * Description for List module information for a process by its ID for a specific scaled-out instance
   * in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in
   *                   the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The options parameters.
   */
  private _listInstanceProcessModules(
    resourceGroupName: string,
    name: string,
    processId: string,
    instanceId: string,
    options?: WebAppsListInstanceProcessModulesOptionalParams
  ): Promise<WebAppsListInstanceProcessModulesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, processId, instanceId, options },
      listInstanceProcessModulesOperationSpec
    );
  }

  /**
   * Description for Get process information by its ID for a specific scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param baseAddress Module base address.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in
   *                   the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The options parameters.
   */
  getInstanceProcessModule(
    resourceGroupName: string,
    name: string,
    processId: string,
    baseAddress: string,
    instanceId: string,
    options?: WebAppsGetInstanceProcessModuleOptionalParams
  ): Promise<WebAppsGetInstanceProcessModuleResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, processId, baseAddress, instanceId, options },
      getInstanceProcessModuleOperationSpec
    );
  }

  /**
   * Description for List the threads in a process by its ID for a specific scaled-out instance in a web
   * site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in
   *                   the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The options parameters.
   */
  private _listInstanceProcessThreads(
    resourceGroupName: string,
    name: string,
    processId: string,
    instanceId: string,
    options?: WebAppsListInstanceProcessThreadsOptionalParams
  ): Promise<WebAppsListInstanceProcessThreadsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, processId, instanceId, options },
      listInstanceProcessThreadsOperationSpec
    );
  }

  /**
   * Description for Shows whether an app can be cloned to another resource group or subscription.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  isCloneable(
    resourceGroupName: string,
    name: string,
    options?: WebAppsIsCloneableOptionalParams
  ): Promise<WebAppsIsCloneableResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      isCloneableOperationSpec
    );
  }

  /**
   * Description for Gets existing backups of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  private _listSiteBackups(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListSiteBackupsOptionalParams
  ): Promise<WebAppsListSiteBackupsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      listSiteBackupsOperationSpec
    );
  }

  /**
   * Description for This is to allow calling via powershell and ARM template.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  listSyncFunctionTriggers(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListSyncFunctionTriggersOptionalParams
  ): Promise<WebAppsListSyncFunctionTriggersResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      listSyncFunctionTriggersOperationSpec
    );
  }

  /**
   * Description for Restores a web app.
   * @param subscriptionName Azure subscription.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param migrationOptions Migration migrationOptions.
   * @param options The options parameters.
   */
  async beginMigrateStorage(
    subscriptionName: string,
    resourceGroupName: string,
    name: string,
    migrationOptions: StorageMigrationOptions,
    options?: WebAppsMigrateStorageOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<WebAppsMigrateStorageResponse>,
      WebAppsMigrateStorageResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<WebAppsMigrateStorageResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { subscriptionName, resourceGroupName, name, migrationOptions, options },
      migrateStorageOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Description for Restores a web app.
   * @param subscriptionName Azure subscription.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param migrationOptions Migration migrationOptions.
   * @param options The options parameters.
   */
  async beginMigrateStorageAndWait(
    subscriptionName: string,
    resourceGroupName: string,
    name: string,
    migrationOptions: StorageMigrationOptions,
    options?: WebAppsMigrateStorageOptionalParams
  ): Promise<WebAppsMigrateStorageResponse> {
    const poller = await this.beginMigrateStorage(
      subscriptionName,
      resourceGroupName,
      name,
      migrationOptions,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Description for Migrates a local (in-app) MySql database to a remote MySql database.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param migrationRequestEnvelope MySql migration options.
   * @param options The options parameters.
   */
  async beginMigrateMySql(
    resourceGroupName: string,
    name: string,
    migrationRequestEnvelope: MigrateMySqlRequest,
    options?: WebAppsMigrateMySqlOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<WebAppsMigrateMySqlResponse>,
      WebAppsMigrateMySqlResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<WebAppsMigrateMySqlResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, name, migrationRequestEnvelope, options },
      migrateMySqlOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Description for Migrates a local (in-app) MySql database to a remote MySql database.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param migrationRequestEnvelope MySql migration options.
   * @param options The options parameters.
   */
  async beginMigrateMySqlAndWait(
    resourceGroupName: string,
    name: string,
    migrationRequestEnvelope: MigrateMySqlRequest,
    options?: WebAppsMigrateMySqlOptionalParams
  ): Promise<WebAppsMigrateMySqlResponse> {
    const poller = await this.beginMigrateMySql(
      resourceGroupName,
      name,
      migrationRequestEnvelope,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Description for Returns the status of MySql in app migration, if one is active, and whether or not
   * MySql in app is enabled
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param options The options parameters.
   */
  getMigrateMySqlStatus(
    resourceGroupName: string,
    name: string,
    options?: WebAppsGetMigrateMySqlStatusOptionalParams
  ): Promise<WebAppsGetMigrateMySqlStatusResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      getMigrateMySqlStatusOperationSpec
    );
  }

  /**
   * Description for Gets a Swift Virtual Network connection.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  getSwiftVirtualNetworkConnection(
    resourceGroupName: string,
    name: string,
    options?: WebAppsGetSwiftVirtualNetworkConnectionOptionalParams
  ): Promise<WebAppsGetSwiftVirtualNetworkConnectionResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      getSwiftVirtualNetworkConnectionOperationSpec
    );
  }

  /**
   * Description for Integrates this Web App with a Virtual Network. This requires that 1)
   * "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has
   * already been delegated, and is not
   * in use by another App Service Plan other than the one this App is in.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param connectionEnvelope Properties of the Virtual Network connection. See example.
   * @param options The options parameters.
   */
  createOrUpdateSwiftVirtualNetworkConnectionWithCheck(
    resourceGroupName: string,
    name: string,
    connectionEnvelope: SwiftVirtualNetwork,
    options?: WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionWithCheckOptionalParams
  ): Promise<
    WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionWithCheckResponse
  > {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, connectionEnvelope, options },
      createOrUpdateSwiftVirtualNetworkConnectionWithCheckOperationSpec
    );
  }

  /**
   * Description for Deletes a Swift Virtual Network connection from an app (or deployment slot).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  deleteSwiftVirtualNetwork(
    resourceGroupName: string,
    name: string,
    options?: WebAppsDeleteSwiftVirtualNetworkOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      deleteSwiftVirtualNetworkOperationSpec
    );
  }

  /**
   * Description for Integrates this Web App with a Virtual Network. This requires that 1)
   * "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has
   * already been delegated, and is not
   * in use by another App Service Plan other than the one this App is in.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param connectionEnvelope Properties of the Virtual Network connection. See example.
   * @param options The options parameters.
   */
  updateSwiftVirtualNetworkConnectionWithCheck(
    resourceGroupName: string,
    name: string,
    connectionEnvelope: SwiftVirtualNetwork,
    options?: WebAppsUpdateSwiftVirtualNetworkConnectionWithCheckOptionalParams
  ): Promise<WebAppsUpdateSwiftVirtualNetworkConnectionWithCheckResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, connectionEnvelope, options },
      updateSwiftVirtualNetworkConnectionWithCheckOperationSpec
    );
  }

  /**
   * Description for Gets all network features used by the app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param view The type of view. Only "summary" is supported at this time.
   * @param options The options parameters.
   */
  listNetworkFeatures(
    resourceGroupName: string,
    name: string,
    view: string,
    options?: WebAppsListNetworkFeaturesOptionalParams
  ): Promise<WebAppsListNetworkFeaturesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, view, options },
      listNetworkFeaturesOperationSpec
    );
  }

  /**
   * Description for Gets a named operation for a network trace capturing (or deployment slot, if
   * specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param operationId GUID of the operation.
   * @param options The options parameters.
   */
  getNetworkTraceOperation(
    resourceGroupName: string,
    name: string,
    operationId: string,
    options?: WebAppsGetNetworkTraceOperationOptionalParams
  ): Promise<WebAppsGetNetworkTraceOperationResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, operationId, options },
      getNetworkTraceOperationOperationSpec
    );
  }

  /**
   * Description for Start capturing network packets for the site (To be deprecated).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param options The options parameters.
   */
  startWebSiteNetworkTrace(
    resourceGroupName: string,
    name: string,
    options?: WebAppsStartWebSiteNetworkTraceOptionalParams
  ): Promise<WebAppsStartWebSiteNetworkTraceResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      startWebSiteNetworkTraceOperationSpec
    );
  }

  /**
   * Description for Start capturing network packets for the site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param options The options parameters.
   */
  async beginStartWebSiteNetworkTraceOperation(
    resourceGroupName: string,
    name: string,
    options?: WebAppsStartWebSiteNetworkTraceOperationOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<WebAppsStartWebSiteNetworkTraceOperationResponse>,
      WebAppsStartWebSiteNetworkTraceOperationResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<WebAppsStartWebSiteNetworkTraceOperationResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, name, options },
      startWebSiteNetworkTraceOperationOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Description for Start capturing network packets for the site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param options The options parameters.
   */
  async beginStartWebSiteNetworkTraceOperationAndWait(
    resourceGroupName: string,
    name: string,
    options?: WebAppsStartWebSiteNetworkTraceOperationOptionalParams
  ): Promise<WebAppsStartWebSiteNetworkTraceOperationResponse> {
    const poller = await this.beginStartWebSiteNetworkTraceOperation(
      resourceGroupName,
      name,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Description for Stop ongoing capturing network packets for the site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param options The options parameters.
   */
  stopWebSiteNetworkTrace(
    resourceGroupName: string,
    name: string,
    options?: WebAppsStopWebSiteNetworkTraceOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      stopWebSiteNetworkTraceOperationSpec
    );
  }

  /**
   * Description for Gets a named operation for a network trace capturing (or deployment slot, if
   * specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param operationId GUID of the operation.
   * @param options The options parameters.
   */
  getNetworkTraces(
    resourceGroupName: string,
    name: string,
    operationId: string,
    options?: WebAppsGetNetworkTracesOptionalParams
  ): Promise<WebAppsGetNetworkTracesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, operationId, options },
      getNetworkTracesOperationSpec
    );
  }

  /**
   * Description for Gets a named operation for a network trace capturing (or deployment slot, if
   * specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param operationId GUID of the operation.
   * @param options The options parameters.
   */
  getNetworkTraceOperationV2(
    resourceGroupName: string,
    name: string,
    operationId: string,
    options?: WebAppsGetNetworkTraceOperationV2OptionalParams
  ): Promise<WebAppsGetNetworkTraceOperationV2Response> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, operationId, options },
      getNetworkTraceOperationV2OperationSpec
    );
  }

  /**
   * Description for Gets a named operation for a network trace capturing (or deployment slot, if
   * specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param operationId GUID of the operation.
   * @param options The options parameters.
   */
  getNetworkTracesV2(
    resourceGroupName: string,
    name: string,
    operationId: string,
    options?: WebAppsGetNetworkTracesV2OptionalParams
  ): Promise<WebAppsGetNetworkTracesV2Response> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, operationId, options },
      getNetworkTracesV2OperationSpec
    );
  }

  /**
   * Description for Generates a new publishing password for an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  generateNewSitePublishingPassword(
    resourceGroupName: string,
    name: string,
    options?: WebAppsGenerateNewSitePublishingPasswordOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      generateNewSitePublishingPasswordOperationSpec
    );
  }

  /**
   * Description for Gets perfmon counters for web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param options The options parameters.
   */
  private _listPerfMonCounters(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListPerfMonCountersOptionalParams
  ): Promise<WebAppsListPerfMonCountersResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      listPerfMonCountersOperationSpec
    );
  }

  /**
   * Description for Gets web app's event logs.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param options The options parameters.
   */
  getSitePhpErrorLogFlag(
    resourceGroupName: string,
    name: string,
    options?: WebAppsGetSitePhpErrorLogFlagOptionalParams
  ): Promise<WebAppsGetSitePhpErrorLogFlagResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      getSitePhpErrorLogFlagOperationSpec
    );
  }

  /**
   * Description for Gets the premier add-ons of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  listPremierAddOns(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListPremierAddOnsOptionalParams
  ): Promise<WebAppsListPremierAddOnsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      listPremierAddOnsOperationSpec
    );
  }

  /**
   * Description for Gets a named add-on of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param premierAddOnName Add-on name.
   * @param options The options parameters.
   */
  getPremierAddOn(
    resourceGroupName: string,
    name: string,
    premierAddOnName: string,
    options?: WebAppsGetPremierAddOnOptionalParams
  ): Promise<WebAppsGetPremierAddOnResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, premierAddOnName, options },
      getPremierAddOnOperationSpec
    );
  }

  /**
   * Description for Updates a named add-on of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param premierAddOnName Add-on name.
   * @param premierAddOn A JSON representation of the edited premier add-on.
   * @param options The options parameters.
   */
  addPremierAddOn(
    resourceGroupName: string,
    name: string,
    premierAddOnName: string,
    premierAddOn: PremierAddOn,
    options?: WebAppsAddPremierAddOnOptionalParams
  ): Promise<WebAppsAddPremierAddOnResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, premierAddOnName, premierAddOn, options },
      addPremierAddOnOperationSpec
    );
  }

  /**
   * Description for Delete a premier add-on from an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param premierAddOnName Add-on name.
   * @param options The options parameters.
   */
  deletePremierAddOn(
    resourceGroupName: string,
    name: string,
    premierAddOnName: string,
    options?: WebAppsDeletePremierAddOnOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, premierAddOnName, options },
      deletePremierAddOnOperationSpec
    );
  }

  /**
   * Description for Updates a named add-on of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param premierAddOnName Add-on name.
   * @param premierAddOn A JSON representation of the edited premier add-on.
   * @param options The options parameters.
   */
  updatePremierAddOn(
    resourceGroupName: string,
    name: string,
    premierAddOnName: string,
    premierAddOn: PremierAddOnPatchResource,
    options?: WebAppsUpdatePremierAddOnOptionalParams
  ): Promise<WebAppsUpdatePremierAddOnResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, premierAddOnName, premierAddOn, options },
      updatePremierAddOnOperationSpec
    );
  }

  /**
   * Description for Gets data around private site access enablement and authorized Virtual Networks that
   * can access the site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param options The options parameters.
   */
  getPrivateAccess(
    resourceGroupName: string,
    name: string,
    options?: WebAppsGetPrivateAccessOptionalParams
  ): Promise<WebAppsGetPrivateAccessResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      getPrivateAccessOperationSpec
    );
  }

  /**
   * Description for Sets data around private site access enablement and authorized Virtual Networks that
   * can access the site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param access The information for the private access
   * @param options The options parameters.
   */
  putPrivateAccessVnet(
    resourceGroupName: string,
    name: string,
    access: PrivateAccess,
    options?: WebAppsPutPrivateAccessVnetOptionalParams
  ): Promise<WebAppsPutPrivateAccessVnetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, access, options },
      putPrivateAccessVnetOperationSpec
    );
  }

  /**
   * Description for Gets the list of private endpoint connections associated with a site
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the site.
   * @param options The options parameters.
   */
  private _getPrivateEndpointConnectionList(
    resourceGroupName: string,
    name: string,
    options?: WebAppsGetPrivateEndpointConnectionListOptionalParams
  ): Promise<WebAppsGetPrivateEndpointConnectionListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      getPrivateEndpointConnectionListOperationSpec
    );
  }

  /**
   * Description for Gets a private endpoint connection
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the site.
   * @param privateEndpointConnectionName Name of the private endpoint connection.
   * @param options The options parameters.
   */
  getPrivateEndpointConnection(
    resourceGroupName: string,
    name: string,
    privateEndpointConnectionName: string,
    options?: WebAppsGetPrivateEndpointConnectionOptionalParams
  ): Promise<WebAppsGetPrivateEndpointConnectionResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, privateEndpointConnectionName, options },
      getPrivateEndpointConnectionOperationSpec
    );
  }

  /**
   * Description for Approves or rejects a private endpoint connection
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the site.
   * @param privateEndpointConnectionName
   * @param privateEndpointWrapper Private Endpoint Connection Approval ARM resource.
   * @param options The options parameters.
   */
  async beginApproveOrRejectPrivateEndpointConnection(
    resourceGroupName: string,
    name: string,
    privateEndpointConnectionName: string,
    privateEndpointWrapper: PrivateLinkConnectionApprovalRequestResource,
    options?: WebAppsApproveOrRejectPrivateEndpointConnectionOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<
        WebAppsApproveOrRejectPrivateEndpointConnectionResponse
      >,
      WebAppsApproveOrRejectPrivateEndpointConnectionResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<WebAppsApproveOrRejectPrivateEndpointConnectionResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        name,
        privateEndpointConnectionName,
        privateEndpointWrapper,
        options
      },
      approveOrRejectPrivateEndpointConnectionOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Description for Approves or rejects a private endpoint connection
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the site.
   * @param privateEndpointConnectionName
   * @param privateEndpointWrapper Private Endpoint Connection Approval ARM resource.
   * @param options The options parameters.
   */
  async beginApproveOrRejectPrivateEndpointConnectionAndWait(
    resourceGroupName: string,
    name: string,
    privateEndpointConnectionName: string,
    privateEndpointWrapper: PrivateLinkConnectionApprovalRequestResource,
    options?: WebAppsApproveOrRejectPrivateEndpointConnectionOptionalParams
  ): Promise<WebAppsApproveOrRejectPrivateEndpointConnectionResponse> {
    const poller = await this.beginApproveOrRejectPrivateEndpointConnection(
      resourceGroupName,
      name,
      privateEndpointConnectionName,
      privateEndpointWrapper,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Description for Deletes a private endpoint connection
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the site.
   * @param privateEndpointConnectionName
   * @param options The options parameters.
   */
  async beginDeletePrivateEndpointConnection(
    resourceGroupName: string,
    name: string,
    privateEndpointConnectionName: string,
    options?: WebAppsDeletePrivateEndpointConnectionOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<WebAppsDeletePrivateEndpointConnectionResponse>,
      WebAppsDeletePrivateEndpointConnectionResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<WebAppsDeletePrivateEndpointConnectionResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, name, privateEndpointConnectionName, options },
      deletePrivateEndpointConnectionOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Description for Deletes a private endpoint connection
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the site.
   * @param privateEndpointConnectionName
   * @param options The options parameters.
   */
  async beginDeletePrivateEndpointConnectionAndWait(
    resourceGroupName: string,
    name: string,
    privateEndpointConnectionName: string,
    options?: WebAppsDeletePrivateEndpointConnectionOptionalParams
  ): Promise<WebAppsDeletePrivateEndpointConnectionResponse> {
    const poller = await this.beginDeletePrivateEndpointConnection(
      resourceGroupName,
      name,
      privateEndpointConnectionName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Description for Gets the private link resources
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the site.
   * @param options The options parameters.
   */
  getPrivateLinkResources(
    resourceGroupName: string,
    name: string,
    options?: WebAppsGetPrivateLinkResourcesOptionalParams
  ): Promise<WebAppsGetPrivateLinkResourcesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      getPrivateLinkResourcesOperationSpec
    );
  }

  /**
   * Description for Get list of processes for a web site, or a deployment slot, or for a specific
   * scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param options The options parameters.
   */
  private _listProcesses(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListProcessesOptionalParams
  ): Promise<WebAppsListProcessesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      listProcessesOperationSpec
    );
  }

  /**
   * Description for Get process information by its ID for a specific scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param options The options parameters.
   */
  getProcess(
    resourceGroupName: string,
    name: string,
    processId: string,
    options?: WebAppsGetProcessOptionalParams
  ): Promise<WebAppsGetProcessResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, processId, options },
      getProcessOperationSpec
    );
  }

  /**
   * Description for Terminate a process by its ID for a web site, or a deployment slot, or specific
   * scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param options The options parameters.
   */
  deleteProcess(
    resourceGroupName: string,
    name: string,
    processId: string,
    options?: WebAppsDeleteProcessOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, processId, options },
      deleteProcessOperationSpec
    );
  }

  /**
   * Description for Get a memory dump of a process by its ID for a specific scaled-out instance in a web
   * site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param options The options parameters.
   */
  getProcessDump(
    resourceGroupName: string,
    name: string,
    processId: string,
    options?: WebAppsGetProcessDumpOptionalParams
  ): Promise<WebAppsGetProcessDumpResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, processId, options },
      getProcessDumpOperationSpec
    );
  }

  /**
   * Description for List module information for a process by its ID for a specific scaled-out instance
   * in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param options The options parameters.
   */
  private _listProcessModules(
    resourceGroupName: string,
    name: string,
    processId: string,
    options?: WebAppsListProcessModulesOptionalParams
  ): Promise<WebAppsListProcessModulesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, processId, options },
      listProcessModulesOperationSpec
    );
  }

  /**
   * Description for Get process information by its ID for a specific scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param baseAddress Module base address.
   * @param options The options parameters.
   */
  getProcessModule(
    resourceGroupName: string,
    name: string,
    processId: string,
    baseAddress: string,
    options?: WebAppsGetProcessModuleOptionalParams
  ): Promise<WebAppsGetProcessModuleResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, processId, baseAddress, options },
      getProcessModuleOperationSpec
    );
  }

  /**
   * Description for List the threads in a process by its ID for a specific scaled-out instance in a web
   * site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param options The options parameters.
   */
  private _listProcessThreads(
    resourceGroupName: string,
    name: string,
    processId: string,
    options?: WebAppsListProcessThreadsOptionalParams
  ): Promise<WebAppsListProcessThreadsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, processId, options },
      listProcessThreadsOperationSpec
    );
  }

  /**
   * Description for Get public certificates for an app or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  private _listPublicCertificates(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListPublicCertificatesOptionalParams
  ): Promise<WebAppsListPublicCertificatesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      listPublicCertificatesOperationSpec
    );
  }

  /**
   * Description for Get the named public certificate for an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param publicCertificateName Public certificate name.
   * @param options The options parameters.
   */
  getPublicCertificate(
    resourceGroupName: string,
    name: string,
    publicCertificateName: string,
    options?: WebAppsGetPublicCertificateOptionalParams
  ): Promise<WebAppsGetPublicCertificateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, publicCertificateName, options },
      getPublicCertificateOperationSpec
    );
  }

  /**
   * Description for Creates a hostname binding for an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param publicCertificateName Public certificate name.
   * @param publicCertificate Public certificate details. This is the JSON representation of a
   *                          PublicCertificate object.
   * @param options The options parameters.
   */
  createOrUpdatePublicCertificate(
    resourceGroupName: string,
    name: string,
    publicCertificateName: string,
    publicCertificate: PublicCertificate,
    options?: WebAppsCreateOrUpdatePublicCertificateOptionalParams
  ): Promise<WebAppsCreateOrUpdatePublicCertificateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        publicCertificateName,
        publicCertificate,
        options
      },
      createOrUpdatePublicCertificateOperationSpec
    );
  }

  /**
   * Description for Deletes a hostname binding for an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param publicCertificateName Public certificate name.
   * @param options The options parameters.
   */
  deletePublicCertificate(
    resourceGroupName: string,
    name: string,
    publicCertificateName: string,
    options?: WebAppsDeletePublicCertificateOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, publicCertificateName, options },
      deletePublicCertificateOperationSpec
    );
  }

  /**
   * Description for Gets the publishing profile for an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param publishingProfileOptions Specifies publishingProfileOptions for publishing profile. For
   *                                 example, use {"format": "FileZilla3"} to get a FileZilla publishing profile.
   * @param options The options parameters.
   */
  listPublishingProfileXmlWithSecrets(
    resourceGroupName: string,
    name: string,
    publishingProfileOptions: CsmPublishingProfileOptions,
    options?: WebAppsListPublishingProfileXmlWithSecretsOptionalParams
  ): Promise<WebAppsListPublishingProfileXmlWithSecretsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, publishingProfileOptions, options },
      listPublishingProfileXmlWithSecretsOperationSpec
    );
  }

  /**
   * Description for Resets the configuration settings of the current slot if they were previously
   * modified by calling the API with POST.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  resetProductionSlotConfig(
    resourceGroupName: string,
    name: string,
    options?: WebAppsResetProductionSlotConfigOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      resetProductionSlotConfigOperationSpec
    );
  }

  /**
   * Description for Restarts an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  restart(
    resourceGroupName: string,
    name: string,
    options?: WebAppsRestartOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      restartOperationSpec
    );
  }

  /**
   * Description for Restores an app from a backup blob in Azure Storage.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param request Information on restore request .
   * @param options The options parameters.
   */
  async beginRestoreFromBackupBlob(
    resourceGroupName: string,
    name: string,
    request: RestoreRequest,
    options?: WebAppsRestoreFromBackupBlobOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, name, request, options },
      restoreFromBackupBlobOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Description for Restores an app from a backup blob in Azure Storage.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param request Information on restore request .
   * @param options The options parameters.
   */
  async beginRestoreFromBackupBlobAndWait(
    resourceGroupName: string,
    name: string,
    request: RestoreRequest,
    options?: WebAppsRestoreFromBackupBlobOptionalParams
  ): Promise<void> {
    const poller = await this.beginRestoreFromBackupBlob(
      resourceGroupName,
      name,
      request,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Description for Restores a deleted web app to this web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param restoreRequest Deleted web app restore information.
   * @param options The options parameters.
   */
  async beginRestoreFromDeletedApp(
    resourceGroupName: string,
    name: string,
    restoreRequest: DeletedAppRestoreRequest,
    options?: WebAppsRestoreFromDeletedAppOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, name, restoreRequest, options },
      restoreFromDeletedAppOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Description for Restores a deleted web app to this web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param restoreRequest Deleted web app restore information.
   * @param options The options parameters.
   */
  async beginRestoreFromDeletedAppAndWait(
    resourceGroupName: string,
    name: string,
    restoreRequest: DeletedAppRestoreRequest,
    options?: WebAppsRestoreFromDeletedAppOptionalParams
  ): Promise<void> {
    const poller = await this.beginRestoreFromDeletedApp(
      resourceGroupName,
      name,
      restoreRequest,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Description for Restores a web app from a snapshot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param restoreRequest Snapshot restore settings. Snapshot information can be obtained by calling
   *                       GetDeletedSites or GetSiteSnapshots API.
   * @param options The options parameters.
   */
  async beginRestoreSnapshot(
    resourceGroupName: string,
    name: string,
    restoreRequest: SnapshotRestoreRequest,
    options?: WebAppsRestoreSnapshotOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, name, restoreRequest, options },
      restoreSnapshotOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Description for Restores a web app from a snapshot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param restoreRequest Snapshot restore settings. Snapshot information can be obtained by calling
   *                       GetDeletedSites or GetSiteSnapshots API.
   * @param options The options parameters.
   */
  async beginRestoreSnapshotAndWait(
    resourceGroupName: string,
    name: string,
    restoreRequest: SnapshotRestoreRequest,
    options?: WebAppsRestoreSnapshotOptionalParams
  ): Promise<void> {
    const poller = await this.beginRestoreSnapshot(
      resourceGroupName,
      name,
      restoreRequest,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Description for Get list of siteextensions for a web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param options The options parameters.
   */
  private _listSiteExtensions(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListSiteExtensionsOptionalParams
  ): Promise<WebAppsListSiteExtensionsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      listSiteExtensionsOperationSpec
    );
  }

  /**
   * Description for Get site extension information by its ID for a web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param siteExtensionId Site extension name.
   * @param options The options parameters.
   */
  getSiteExtension(
    resourceGroupName: string,
    name: string,
    siteExtensionId: string,
    options?: WebAppsGetSiteExtensionOptionalParams
  ): Promise<WebAppsGetSiteExtensionResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, siteExtensionId, options },
      getSiteExtensionOperationSpec
    );
  }

  /**
   * Description for Install site extension on a web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param siteExtensionId Site extension name.
   * @param options The options parameters.
   */
  async beginInstallSiteExtension(
    resourceGroupName: string,
    name: string,
    siteExtensionId: string,
    options?: WebAppsInstallSiteExtensionOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<WebAppsInstallSiteExtensionResponse>,
      WebAppsInstallSiteExtensionResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<WebAppsInstallSiteExtensionResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, name, siteExtensionId, options },
      installSiteExtensionOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Description for Install site extension on a web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param siteExtensionId Site extension name.
   * @param options The options parameters.
   */
  async beginInstallSiteExtensionAndWait(
    resourceGroupName: string,
    name: string,
    siteExtensionId: string,
    options?: WebAppsInstallSiteExtensionOptionalParams
  ): Promise<WebAppsInstallSiteExtensionResponse> {
    const poller = await this.beginInstallSiteExtension(
      resourceGroupName,
      name,
      siteExtensionId,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Description for Remove a site extension from a web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param siteExtensionId Site extension name.
   * @param options The options parameters.
   */
  deleteSiteExtension(
    resourceGroupName: string,
    name: string,
    siteExtensionId: string,
    options?: WebAppsDeleteSiteExtensionOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, siteExtensionId, options },
      deleteSiteExtensionOperationSpec
    );
  }

  /**
   * Description for Gets an app's deployment slots.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param options The options parameters.
   */
  private _listSlots(
    resourceGroupName: string,
    name: string,
    options?: WebAppsListSlotsOptionalParams
  ): Promise<WebAppsListSlotsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, options },
      listSlotsOperationSpec
    );
  }

  /**
   * Description for Gets the details of a web, mobile, or API app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. By default, this API returns the production slot.
   * @param options The options parameters.
   */
  getSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsGetSlotOptionalParams
  ): Promise<WebAppsGetSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      getSlotOperationSpec
    );
  }

  /**
   * Description for Creates a new web, mobile, or API app in an existing resource group, or updates an
   * existing app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Unique name of the app to create or update. To create or update a deployment slot, use
   *             the {slot} parameter.
   * @param slot Name of the deployment slot to create or update. By default, this API attempts to create
   *             or modify the production slot.
   * @param siteEnvelope A JSON representation of the app properties. See example.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    siteEnvelope: Site,
    options?: WebAppsCreateOrUpdateSlotOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<WebAppsCreateOrUpdateSlotResponse>,
      WebAppsCreateOrUpdateSlotResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<WebAppsCreateOrUpdateSlotResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, name, slot, siteEnvelope, options },
      createOrUpdateSlotOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Description for Creates a new web, mobile, or API app in an existing resource group, or updates an
   * existing app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Unique name of the app to create or update. To create or update a deployment slot, use
   *             the {slot} parameter.
   * @param slot Name of the deployment slot to create or update. By default, this API attempts to create
   *             or modify the production slot.
   * @param siteEnvelope A JSON representation of the app properties. See example.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateSlotAndWait(
    resourceGroupName: string,
    name: string,
    slot: string,
    siteEnvelope: Site,
    options?: WebAppsCreateOrUpdateSlotOptionalParams
  ): Promise<WebAppsCreateOrUpdateSlotResponse> {
    const poller = await this.beginCreateOrUpdateSlot(
      resourceGroupName,
      name,
      slot,
      siteEnvelope,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Description for Deletes a web, mobile, or API app, or one of the deployment slots.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app to delete.
   * @param slot Name of the deployment slot to delete. By default, the API deletes the production slot.
   * @param options The options parameters.
   */
  deleteSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsDeleteSlotOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      deleteSlotOperationSpec
    );
  }

  /**
   * Description for Creates a new web, mobile, or API app in an existing resource group, or updates an
   * existing app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Unique name of the app to create or update. To create or update a deployment slot, use
   *             the {slot} parameter.
   * @param slot Name of the deployment slot to create or update. By default, this API attempts to create
   *             or modify the production slot.
   * @param siteEnvelope A JSON representation of the app properties. See example.
   * @param options The options parameters.
   */
  updateSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    siteEnvelope: SitePatchResource,
    options?: WebAppsUpdateSlotOptionalParams
  ): Promise<WebAppsUpdateSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, siteEnvelope, options },
      updateSlotOperationSpec
    );
  }

  /**
   * Description for Analyze a custom hostname.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The options parameters.
   */
  analyzeCustomHostnameSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsAnalyzeCustomHostnameSlotOptionalParams
  ): Promise<WebAppsAnalyzeCustomHostnameSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      analyzeCustomHostnameSlotOperationSpec
    );
  }

  /**
   * Description for Applies the configuration settings from the target slot onto the current slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the source slot. If a slot is not specified, the production slot is used as the
   *             source slot.
   * @param slotSwapEntity JSON object that contains the target slot name. See example.
   * @param options The options parameters.
   */
  applySlotConfigurationSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    slotSwapEntity: CsmSlotEntity,
    options?: WebAppsApplySlotConfigurationSlotOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, slotSwapEntity, options },
      applySlotConfigurationSlotOperationSpec
    );
  }

  /**
   * Description for Creates a backup of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will create a backup
   *             for the production slot.
   * @param request Backup configuration. You can use the JSON response from the POST action as input
   *                here.
   * @param options The options parameters.
   */
  backupSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    request: BackupRequest,
    options?: WebAppsBackupSlotOptionalParams
  ): Promise<WebAppsBackupSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, request, options },
      backupSlotOperationSpec
    );
  }

  /**
   * Description for Gets existing backups of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get backups of the
   *             production slot.
   * @param options The options parameters.
   */
  private _listBackupsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListBackupsSlotOptionalParams
  ): Promise<WebAppsListBackupsSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      listBackupsSlotOperationSpec
    );
  }

  /**
   * Description for Gets a backup of an app by its ID.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param backupId ID of the backup.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get a backup of
   *             the production slot.
   * @param options The options parameters.
   */
  getBackupStatusSlot(
    resourceGroupName: string,
    name: string,
    backupId: string,
    slot: string,
    options?: WebAppsGetBackupStatusSlotOptionalParams
  ): Promise<WebAppsGetBackupStatusSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, backupId, slot, options },
      getBackupStatusSlotOperationSpec
    );
  }

  /**
   * Description for Deletes a backup of an app by its ID.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param backupId ID of the backup.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete a backup of
   *             the production slot.
   * @param options The options parameters.
   */
  deleteBackupSlot(
    resourceGroupName: string,
    name: string,
    backupId: string,
    slot: string,
    options?: WebAppsDeleteBackupSlotOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, backupId, slot, options },
      deleteBackupSlotOperationSpec
    );
  }

  /**
   * Description for Gets status of a web app backup that may be in progress, including secrets
   * associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS
   * URL for the backup if a new URL is passed in the request body.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param backupId ID of backup.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param request Information on backup request.
   * @param options The options parameters.
   */
  listBackupStatusSecretsSlot(
    resourceGroupName: string,
    name: string,
    backupId: string,
    slot: string,
    request: BackupRequest,
    options?: WebAppsListBackupStatusSecretsSlotOptionalParams
  ): Promise<WebAppsListBackupStatusSecretsSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, backupId, slot, request, options },
      listBackupStatusSecretsSlotOperationSpec
    );
  }

  /**
   * Description for Restores a specific backup to another app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param backupId ID of the backup.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will restore a backup
   *             of the production slot.
   * @param request Information on restore request .
   * @param options The options parameters.
   */
  async beginRestoreSlot(
    resourceGroupName: string,
    name: string,
    backupId: string,
    slot: string,
    request: RestoreRequest,
    options?: WebAppsRestoreSlotOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, name, backupId, slot, request, options },
      restoreSlotOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Description for Restores a specific backup to another app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param backupId ID of the backup.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will restore a backup
   *             of the production slot.
   * @param request Information on restore request .
   * @param options The options parameters.
   */
  async beginRestoreSlotAndWait(
    resourceGroupName: string,
    name: string,
    backupId: string,
    slot: string,
    request: RestoreRequest,
    options?: WebAppsRestoreSlotOptionalParams
  ): Promise<void> {
    const poller = await this.beginRestoreSlot(
      resourceGroupName,
      name,
      backupId,
      slot,
      request,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Description for Returns whether Scm basic auth is allowed and whether Ftp is allowed for a given
   * site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot
   * @param options The options parameters.
   */
  private _listBasicPublishingCredentialsPoliciesSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListBasicPublishingCredentialsPoliciesSlotOptionalParams
  ): Promise<WebAppsListBasicPublishingCredentialsPoliciesSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      listBasicPublishingCredentialsPoliciesSlotOperationSpec
    );
  }

  /**
   * Description for Returns whether FTP is allowed on the site or not.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot
   * @param options The options parameters.
   */
  getFtpAllowedSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsGetFtpAllowedSlotOptionalParams
  ): Promise<WebAppsGetFtpAllowedSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      getFtpAllowedSlotOperationSpec
    );
  }

  /**
   * Description for Updates whether FTP is allowed on the site or not.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot
   * @param csmPublishingAccessPoliciesEntity Publishing Credentials Policies parameters.
   * @param options The options parameters.
   */
  updateFtpAllowedSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    csmPublishingAccessPoliciesEntity: CsmPublishingCredentialsPoliciesEntity,
    options?: WebAppsUpdateFtpAllowedSlotOptionalParams
  ): Promise<WebAppsUpdateFtpAllowedSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        csmPublishingAccessPoliciesEntity,
        options
      },
      updateFtpAllowedSlotOperationSpec
    );
  }

  /**
   * Description for Returns whether Scm basic auth is allowed on the site or not.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot
   * @param options The options parameters.
   */
  getScmAllowedSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsGetScmAllowedSlotOptionalParams
  ): Promise<WebAppsGetScmAllowedSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      getScmAllowedSlotOperationSpec
    );
  }

  /**
   * Description for Updates whether user publishing credentials are allowed on the site or not.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot
   * @param csmPublishingAccessPoliciesEntity Publishing Credentials Policies parameters.
   * @param options The options parameters.
   */
  updateScmAllowedSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    csmPublishingAccessPoliciesEntity: CsmPublishingCredentialsPoliciesEntity,
    options?: WebAppsUpdateScmAllowedSlotOptionalParams
  ): Promise<WebAppsUpdateScmAllowedSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        slot,
        csmPublishingAccessPoliciesEntity,
        options
      },
      updateScmAllowedSlotOperationSpec
    );
  }

  /**
   * Description for List the configurations of an app
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will return
   *             configuration for the production slot.
   * @param options The options parameters.
   */
  private _listConfigurationsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListConfigurationsSlotOptionalParams
  ): Promise<WebAppsListConfigurationsSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      listConfigurationsSlotOperationSpec
    );
  }

  /**
   * Description for Replaces the application settings of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
   *             application settings for the production slot.
   * @param appSettings Application settings of the app.
   * @param options The options parameters.
   */
  updateApplicationSettingsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    appSettings: StringDictionary,
    options?: WebAppsUpdateApplicationSettingsSlotOptionalParams
  ): Promise<WebAppsUpdateApplicationSettingsSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, appSettings, options },
      updateApplicationSettingsSlotOperationSpec
    );
  }

  /**
   * Description for Gets the application settings of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the
   *             application settings for the production slot.
   * @param options The options parameters.
   */
  listApplicationSettingsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListApplicationSettingsSlotOptionalParams
  ): Promise<WebAppsListApplicationSettingsSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      listApplicationSettingsSlotOperationSpec
    );
  }

  /**
   * Description for Updates the Authentication / Authorization settings associated with web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param siteAuthSettings Auth settings associated with web app.
   * @param options The options parameters.
   */
  updateAuthSettingsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    siteAuthSettings: SiteAuthSettings,
    options?: WebAppsUpdateAuthSettingsSlotOptionalParams
  ): Promise<WebAppsUpdateAuthSettingsSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, siteAuthSettings, options },
      updateAuthSettingsSlotOperationSpec
    );
  }

  /**
   * Description for Gets the Authentication/Authorization settings of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the settings
   *             for the production slot.
   * @param options The options parameters.
   */
  getAuthSettingsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsGetAuthSettingsSlotOptionalParams
  ): Promise<WebAppsGetAuthSettingsSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      getAuthSettingsSlotOperationSpec
    );
  }

  /**
   * Gets site's Authentication / Authorization settings for apps via the V2 format
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the settings
   *             for the production slot.
   * @param options The options parameters.
   */
  getAuthSettingsV2WithoutSecretsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsGetAuthSettingsV2WithoutSecretsSlotOptionalParams
  ): Promise<WebAppsGetAuthSettingsV2WithoutSecretsSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      getAuthSettingsV2WithoutSecretsSlotOperationSpec
    );
  }

  /**
   * Description for Updates site's Authentication / Authorization settings for apps via the V2 format
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param siteAuthSettingsV2 Auth settings associated with web app.
   * @param options The options parameters.
   */
  updateAuthSettingsV2Slot(
    resourceGroupName: string,
    name: string,
    slot: string,
    siteAuthSettingsV2: SiteAuthSettingsV2,
    options?: WebAppsUpdateAuthSettingsV2SlotOptionalParams
  ): Promise<WebAppsUpdateAuthSettingsV2SlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, siteAuthSettingsV2, options },
      updateAuthSettingsV2SlotOperationSpec
    );
  }

  /**
   * Description for Gets site's Authentication / Authorization settings for apps via the V2 format
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the settings
   *             for the production slot.
   * @param options The options parameters.
   */
  getAuthSettingsV2Slot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsGetAuthSettingsV2SlotOptionalParams
  ): Promise<WebAppsGetAuthSettingsV2SlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      getAuthSettingsV2SlotOperationSpec
    );
  }

  /**
   * Description for Updates the Azure storage account configurations of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the Azure
   *             storage account configurations for the production slot.
   * @param azureStorageAccounts Azure storage accounts of the app.
   * @param options The options parameters.
   */
  updateAzureStorageAccountsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    azureStorageAccounts: AzureStoragePropertyDictionaryResource,
    options?: WebAppsUpdateAzureStorageAccountsSlotOptionalParams
  ): Promise<WebAppsUpdateAzureStorageAccountsSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, azureStorageAccounts, options },
      updateAzureStorageAccountsSlotOperationSpec
    );
  }

  /**
   * Description for Gets the Azure storage account configurations of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the Azure
   *             storage account configurations for the production slot.
   * @param options The options parameters.
   */
  listAzureStorageAccountsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListAzureStorageAccountsSlotOptionalParams
  ): Promise<WebAppsListAzureStorageAccountsSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      listAzureStorageAccountsSlotOperationSpec
    );
  }

  /**
   * Description for Updates the backup configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the backup
   *             configuration for the production slot.
   * @param request Edited backup configuration.
   * @param options The options parameters.
   */
  updateBackupConfigurationSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    request: BackupRequest,
    options?: WebAppsUpdateBackupConfigurationSlotOptionalParams
  ): Promise<WebAppsUpdateBackupConfigurationSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, request, options },
      updateBackupConfigurationSlotOperationSpec
    );
  }

  /**
   * Description for Deletes the backup configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the backup
   *             configuration for the production slot.
   * @param options The options parameters.
   */
  deleteBackupConfigurationSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsDeleteBackupConfigurationSlotOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      deleteBackupConfigurationSlotOperationSpec
    );
  }

  /**
   * Description for Gets the backup configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the backup
   *             configuration for the production slot.
   * @param options The options parameters.
   */
  getBackupConfigurationSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsGetBackupConfigurationSlotOptionalParams
  ): Promise<WebAppsGetBackupConfigurationSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      getBackupConfigurationSlotOperationSpec
    );
  }

  /**
   * Description for Gets the config reference app settings and status of an app
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot
   * @param options The options parameters.
   */
  private _getAppSettingsKeyVaultReferencesSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsGetAppSettingsKeyVaultReferencesSlotOptionalParams
  ): Promise<WebAppsGetAppSettingsKeyVaultReferencesSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      getAppSettingsKeyVaultReferencesSlotOperationSpec
    );
  }

  /**
   * Description for Gets the config reference and status of an app
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param appSettingKey App Setting key name.
   * @param slot
   * @param options The options parameters.
   */
  getAppSettingKeyVaultReferenceSlot(
    resourceGroupName: string,
    name: string,
    appSettingKey: string,
    slot: string,
    options?: WebAppsGetAppSettingKeyVaultReferenceSlotOptionalParams
  ): Promise<WebAppsGetAppSettingKeyVaultReferenceSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, appSettingKey, slot, options },
      getAppSettingKeyVaultReferenceSlotOperationSpec
    );
  }

  /**
   * Description for Gets the config reference app settings and status of an app
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot
   * @param options The options parameters.
   */
  private _getSiteConnectionStringKeyVaultReferencesSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsGetSiteConnectionStringKeyVaultReferencesSlotOptionalParams
  ): Promise<WebAppsGetSiteConnectionStringKeyVaultReferencesSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      getSiteConnectionStringKeyVaultReferencesSlotOperationSpec
    );
  }

  /**
   * Description for Gets the config reference and status of an app
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param connectionStringKey
   * @param slot
   * @param options The options parameters.
   */
  getSiteConnectionStringKeyVaultReferenceSlot(
    resourceGroupName: string,
    name: string,
    connectionStringKey: string,
    slot: string,
    options?: WebAppsGetSiteConnectionStringKeyVaultReferenceSlotOptionalParams
  ): Promise<WebAppsGetSiteConnectionStringKeyVaultReferenceSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, connectionStringKey, slot, options },
      getSiteConnectionStringKeyVaultReferenceSlotOperationSpec
    );
  }

  /**
   * Description for Replaces the connection strings of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
   *             connection settings for the production slot.
   * @param connectionStrings Connection strings of the app or deployment slot. See example.
   * @param options The options parameters.
   */
  updateConnectionStringsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    connectionStrings: ConnectionStringDictionary,
    options?: WebAppsUpdateConnectionStringsSlotOptionalParams
  ): Promise<WebAppsUpdateConnectionStringsSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, connectionStrings, options },
      updateConnectionStringsSlotOperationSpec
    );
  }

  /**
   * Description for Gets the connection strings of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the connection
   *             settings for the production slot.
   * @param options The options parameters.
   */
  listConnectionStringsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListConnectionStringsSlotOptionalParams
  ): Promise<WebAppsListConnectionStringsSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      listConnectionStringsSlotOperationSpec
    );
  }

  /**
   * Description for Gets the logging configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the logging
   *             configuration for the production slot.
   * @param options The options parameters.
   */
  getDiagnosticLogsConfigurationSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsGetDiagnosticLogsConfigurationSlotOptionalParams
  ): Promise<WebAppsGetDiagnosticLogsConfigurationSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      getDiagnosticLogsConfigurationSlotOperationSpec
    );
  }

  /**
   * Description for Updates the logging configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the logging
   *             configuration for the production slot.
   * @param siteLogsConfig A SiteLogsConfig JSON object that contains the logging configuration to change
   *                       in the "properties" property.
   * @param options The options parameters.
   */
  updateDiagnosticLogsConfigSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    siteLogsConfig: SiteLogsConfig,
    options?: WebAppsUpdateDiagnosticLogsConfigSlotOptionalParams
  ): Promise<WebAppsUpdateDiagnosticLogsConfigSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, siteLogsConfig, options },
      updateDiagnosticLogsConfigSlotOperationSpec
    );
  }

  /**
   * Description for Replaces the metadata of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the
   *             metadata for the production slot.
   * @param metadata Edited metadata of the app or deployment slot. See example.
   * @param options The options parameters.
   */
  updateMetadataSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    metadata: StringDictionary,
    options?: WebAppsUpdateMetadataSlotOptionalParams
  ): Promise<WebAppsUpdateMetadataSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, metadata, options },
      updateMetadataSlotOperationSpec
    );
  }

  /**
   * Description for Gets the metadata of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the metadata
   *             for the production slot.
   * @param options The options parameters.
   */
  listMetadataSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListMetadataSlotOptionalParams
  ): Promise<WebAppsListMetadataSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      listMetadataSlotOperationSpec
    );
  }

  /**
   * Description for Gets the Git/FTP publishing credentials of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the publishing
   *             credentials for the production slot.
   * @param options The options parameters.
   */
  async beginListPublishingCredentialsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListPublishingCredentialsSlotOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<WebAppsListPublishingCredentialsSlotResponse>,
      WebAppsListPublishingCredentialsSlotResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<WebAppsListPublishingCredentialsSlotResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, name, slot, options },
      listPublishingCredentialsSlotOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Description for Gets the Git/FTP publishing credentials of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the publishing
   *             credentials for the production slot.
   * @param options The options parameters.
   */
  async beginListPublishingCredentialsSlotAndWait(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListPublishingCredentialsSlotOptionalParams
  ): Promise<WebAppsListPublishingCredentialsSlotResponse> {
    const poller = await this.beginListPublishingCredentialsSlot(
      resourceGroupName,
      name,
      slot,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Description for Updates the Push settings associated with web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param pushSettings Push settings associated with web app.
   * @param options The options parameters.
   */
  updateSitePushSettingsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    pushSettings: PushSettings,
    options?: WebAppsUpdateSitePushSettingsSlotOptionalParams
  ): Promise<WebAppsUpdateSitePushSettingsSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, pushSettings, options },
      updateSitePushSettingsSlotOperationSpec
    );
  }

  /**
   * Description for Gets the Push settings associated with web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The options parameters.
   */
  listSitePushSettingsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListSitePushSettingsSlotOptionalParams
  ): Promise<WebAppsListSitePushSettingsSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      listSitePushSettingsSlotOperationSpec
    );
  }

  /**
   * Description for Gets the configuration of an app, such as platform version and bitness, default
   * documents, virtual applications, Always On, etc.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will return
   *             configuration for the production slot.
   * @param options The options parameters.
   */
  getConfigurationSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsGetConfigurationSlotOptionalParams
  ): Promise<WebAppsGetConfigurationSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      getConfigurationSlotOperationSpec
    );
  }

  /**
   * Description for Updates the configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update
   *             configuration for the production slot.
   * @param siteConfig JSON representation of a SiteConfig object. See example.
   * @param options The options parameters.
   */
  createOrUpdateConfigurationSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    siteConfig: SiteConfigResource,
    options?: WebAppsCreateOrUpdateConfigurationSlotOptionalParams
  ): Promise<WebAppsCreateOrUpdateConfigurationSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, siteConfig, options },
      createOrUpdateConfigurationSlotOperationSpec
    );
  }

  /**
   * Description for Updates the configuration of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update
   *             configuration for the production slot.
   * @param siteConfig JSON representation of a SiteConfig object. See example.
   * @param options The options parameters.
   */
  updateConfigurationSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    siteConfig: SiteConfigResource,
    options?: WebAppsUpdateConfigurationSlotOptionalParams
  ): Promise<WebAppsUpdateConfigurationSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, siteConfig, options },
      updateConfigurationSlotOperationSpec
    );
  }

  /**
   * Description for Gets a list of web app configuration snapshots identifiers. Each element of the list
   * contains a timestamp and the ID of the snapshot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will return
   *             configuration for the production slot.
   * @param options The options parameters.
   */
  private _listConfigurationSnapshotInfoSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListConfigurationSnapshotInfoSlotOptionalParams
  ): Promise<WebAppsListConfigurationSnapshotInfoSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      listConfigurationSnapshotInfoSlotOperationSpec
    );
  }

  /**
   * Description for Gets a snapshot of the configuration of an app at a previous point in time.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param snapshotId The ID of the snapshot to read.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will return
   *             configuration for the production slot.
   * @param options The options parameters.
   */
  getConfigurationSnapshotSlot(
    resourceGroupName: string,
    name: string,
    snapshotId: string,
    slot: string,
    options?: WebAppsGetConfigurationSnapshotSlotOptionalParams
  ): Promise<WebAppsGetConfigurationSnapshotSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, snapshotId, slot, options },
      getConfigurationSnapshotSlotOperationSpec
    );
  }

  /**
   * Description for Reverts the configuration of an app to a previous snapshot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param snapshotId The ID of the snapshot to read.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will return
   *             configuration for the production slot.
   * @param options The options parameters.
   */
  recoverSiteConfigurationSnapshotSlot(
    resourceGroupName: string,
    name: string,
    snapshotId: string,
    slot: string,
    options?: WebAppsRecoverSiteConfigurationSnapshotSlotOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, snapshotId, slot, options },
      recoverSiteConfigurationSnapshotSlotOperationSpec
    );
  }

  /**
   * Description for Gets the last lines of docker logs for the given site
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The options parameters.
   */
  getWebSiteContainerLogsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsGetWebSiteContainerLogsSlotOptionalParams
  ): Promise<WebAppsGetWebSiteContainerLogsSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      getWebSiteContainerLogsSlotOperationSpec
    );
  }

  /**
   * Description for Gets the ZIP archived docker log files for the given site
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The options parameters.
   */
  getContainerLogsZipSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsGetContainerLogsZipSlotOptionalParams
  ): Promise<WebAppsGetContainerLogsZipSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      getContainerLogsZipSlotOperationSpec
    );
  }

  /**
   * Description for List continuous web jobs for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment
   *             for the production slot.
   * @param options The options parameters.
   */
  private _listContinuousWebJobsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListContinuousWebJobsSlotOptionalParams
  ): Promise<WebAppsListContinuousWebJobsSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      listContinuousWebJobsSlotOperationSpec
    );
  }

  /**
   * Description for Gets a continuous web job by its ID for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment
   *             for the production slot.
   * @param options The options parameters.
   */
  getContinuousWebJobSlot(
    resourceGroupName: string,
    name: string,
    webJobName: string,
    slot: string,
    options?: WebAppsGetContinuousWebJobSlotOptionalParams
  ): Promise<WebAppsGetContinuousWebJobSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, webJobName, slot, options },
      getContinuousWebJobSlotOperationSpec
    );
  }

  /**
   * Description for Delete a continuous web job by its ID for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment
   *             for the production slot.
   * @param options The options parameters.
   */
  deleteContinuousWebJobSlot(
    resourceGroupName: string,
    name: string,
    webJobName: string,
    slot: string,
    options?: WebAppsDeleteContinuousWebJobSlotOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, webJobName, slot, options },
      deleteContinuousWebJobSlotOperationSpec
    );
  }

  /**
   * Description for Start a continuous web job for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment
   *             for the production slot.
   * @param options The options parameters.
   */
  startContinuousWebJobSlot(
    resourceGroupName: string,
    name: string,
    webJobName: string,
    slot: string,
    options?: WebAppsStartContinuousWebJobSlotOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, webJobName, slot, options },
      startContinuousWebJobSlotOperationSpec
    );
  }

  /**
   * Description for Stop a continuous web job for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param webJobName Name of Web Job.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment
   *             for the production slot.
   * @param options The options parameters.
   */
  stopContinuousWebJobSlot(
    resourceGroupName: string,
    name: string,
    webJobName: string,
    slot: string,
    options?: WebAppsStopContinuousWebJobSlotOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, webJobName, slot, options },
      stopContinuousWebJobSlotOperationSpec
    );
  }

  /**
   * List deployment statuses for an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the deployment
   *             status for the production slot.
   * @param options The options parameters.
   */
  private _listSlotSiteDeploymentStatusesSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListSlotSiteDeploymentStatusesSlotOptionalParams
  ): Promise<WebAppsListSlotSiteDeploymentStatusesSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      listSlotSiteDeploymentStatusesSlotOperationSpec
    );
  }

  /**
   * Gets the deployment status for an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the deployment
   *             status for the production slot.
   * @param deploymentStatusId GUID of the deployment operation.
   * @param options The options parameters.
   */
  async beginGetSlotSiteDeploymentStatusSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    deploymentStatusId: string,
    options?: WebAppsGetSlotSiteDeploymentStatusSlotOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<WebAppsGetSlotSiteDeploymentStatusSlotResponse>,
      WebAppsGetSlotSiteDeploymentStatusSlotResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<WebAppsGetSlotSiteDeploymentStatusSlotResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, name, slot, deploymentStatusId, options },
      getSlotSiteDeploymentStatusSlotOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Gets the deployment status for an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the deployment
   *             status for the production slot.
   * @param deploymentStatusId GUID of the deployment operation.
   * @param options The options parameters.
   */
  async beginGetSlotSiteDeploymentStatusSlotAndWait(
    resourceGroupName: string,
    name: string,
    slot: string,
    deploymentStatusId: string,
    options?: WebAppsGetSlotSiteDeploymentStatusSlotOptionalParams
  ): Promise<WebAppsGetSlotSiteDeploymentStatusSlotResponse> {
    const poller = await this.beginGetSlotSiteDeploymentStatusSlot(
      resourceGroupName,
      name,
      slot,
      deploymentStatusId,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Description for List deployments for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for
   *             the production slot.
   * @param options The options parameters.
   */
  private _listDeploymentsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListDeploymentsSlotOptionalParams
  ): Promise<WebAppsListDeploymentsSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      listDeploymentsSlotOperationSpec
    );
  }

  /**
   * Description for Get a deployment by its ID for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param id Deployment ID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API gets a deployment for
   *             the production slot.
   * @param options The options parameters.
   */
  getDeploymentSlot(
    resourceGroupName: string,
    name: string,
    id: string,
    slot: string,
    options?: WebAppsGetDeploymentSlotOptionalParams
  ): Promise<WebAppsGetDeploymentSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, id, slot, options },
      getDeploymentSlotOperationSpec
    );
  }

  /**
   * Description for Create a deployment for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param id ID of an existing deployment.
   * @param slot Name of the deployment slot. If a slot is not specified, the API creates a deployment
   *             for the production slot.
   * @param deployment Deployment details.
   * @param options The options parameters.
   */
  createDeploymentSlot(
    resourceGroupName: string,
    name: string,
    id: string,
    slot: string,
    deployment: Deployment,
    options?: WebAppsCreateDeploymentSlotOptionalParams
  ): Promise<WebAppsCreateDeploymentSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, id, slot, deployment, options },
      createDeploymentSlotOperationSpec
    );
  }

  /**
   * Description for Delete a deployment by its ID for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param id Deployment ID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API deletes a deployment
   *             for the production slot.
   * @param options The options parameters.
   */
  deleteDeploymentSlot(
    resourceGroupName: string,
    name: string,
    id: string,
    slot: string,
    options?: WebAppsDeleteDeploymentSlotOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, id, slot, options },
      deleteDeploymentSlotOperationSpec
    );
  }

  /**
   * Description for List deployment log for specific deployment for an app, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param id The ID of a specific deployment. This is the value of the name property in the JSON
   *           response from "GET /api/sites/{siteName}/deployments".
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for
   *             the production slot.
   * @param options The options parameters.
   */
  listDeploymentLogSlot(
    resourceGroupName: string,
    name: string,
    id: string,
    slot: string,
    options?: WebAppsListDeploymentLogSlotOptionalParams
  ): Promise<WebAppsListDeploymentLogSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, id, slot, options },
      listDeploymentLogSlotOperationSpec
    );
  }

  /**
   * Description for Discovers an existing app backup that can be restored from a blob in Azure storage.
   * Use this to get information about the databases stored in a backup.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will perform discovery
   *             for the production slot.
   * @param request A RestoreRequest object that includes Azure storage URL and blog name for discovery
   *                of backup.
   * @param options The options parameters.
   */
  discoverBackupSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    request: RestoreRequest,
    options?: WebAppsDiscoverBackupSlotOptionalParams
  ): Promise<WebAppsDiscoverBackupSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, request, options },
      discoverBackupSlotOperationSpec
    );
  }

  /**
   * Description for Lists ownership identifiers for domain associated with web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding
   *             for the production slot.
   * @param options The options parameters.
   */
  private _listDomainOwnershipIdentifiersSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListDomainOwnershipIdentifiersSlotOptionalParams
  ): Promise<WebAppsListDomainOwnershipIdentifiersSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      listDomainOwnershipIdentifiersSlotOperationSpec
    );
  }

  /**
   * Description for Get domain ownership identifier for web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param domainOwnershipIdentifierName Name of domain ownership identifier.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding
   *             for the production slot.
   * @param options The options parameters.
   */
  getDomainOwnershipIdentifierSlot(
    resourceGroupName: string,
    name: string,
    domainOwnershipIdentifierName: string,
    slot: string,
    options?: WebAppsGetDomainOwnershipIdentifierSlotOptionalParams
  ): Promise<WebAppsGetDomainOwnershipIdentifierSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, domainOwnershipIdentifierName, slot, options },
      getDomainOwnershipIdentifierSlotOperationSpec
    );
  }

  /**
   * Description for Creates a domain ownership identifier for web app, or updates an existing ownership
   * identifier.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param domainOwnershipIdentifierName Name of domain ownership identifier.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding
   *             for the production slot.
   * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties.
   * @param options The options parameters.
   */
  createOrUpdateDomainOwnershipIdentifierSlot(
    resourceGroupName: string,
    name: string,
    domainOwnershipIdentifierName: string,
    slot: string,
    domainOwnershipIdentifier: Identifier,
    options?: WebAppsCreateOrUpdateDomainOwnershipIdentifierSlotOptionalParams
  ): Promise<WebAppsCreateOrUpdateDomainOwnershipIdentifierSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        domainOwnershipIdentifierName,
        slot,
        domainOwnershipIdentifier,
        options
      },
      createOrUpdateDomainOwnershipIdentifierSlotOperationSpec
    );
  }

  /**
   * Description for Deletes a domain ownership identifier for a web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param domainOwnershipIdentifierName Name of domain ownership identifier.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding
   *             for the production slot.
   * @param options The options parameters.
   */
  deleteDomainOwnershipIdentifierSlot(
    resourceGroupName: string,
    name: string,
    domainOwnershipIdentifierName: string,
    slot: string,
    options?: WebAppsDeleteDomainOwnershipIdentifierSlotOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, domainOwnershipIdentifierName, slot, options },
      deleteDomainOwnershipIdentifierSlotOperationSpec
    );
  }

  /**
   * Description for Creates a domain ownership identifier for web app, or updates an existing ownership
   * identifier.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param domainOwnershipIdentifierName Name of domain ownership identifier.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding
   *             for the production slot.
   * @param domainOwnershipIdentifier A JSON representation of the domain ownership properties.
   * @param options The options parameters.
   */
  updateDomainOwnershipIdentifierSlot(
    resourceGroupName: string,
    name: string,
    domainOwnershipIdentifierName: string,
    slot: string,
    domainOwnershipIdentifier: Identifier,
    options?: WebAppsUpdateDomainOwnershipIdentifierSlotOptionalParams
  ): Promise<WebAppsUpdateDomainOwnershipIdentifierSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        domainOwnershipIdentifierName,
        slot,
        domainOwnershipIdentifier,
        options
      },
      updateDomainOwnershipIdentifierSlotOperationSpec
    );
  }

  /**
   * Description for Get the status of the last MSDeploy operation.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The options parameters.
   */
  getMSDeployStatusSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsGetMSDeployStatusSlotOptionalParams
  ): Promise<WebAppsGetMSDeployStatusSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      getMSDeployStatusSlotOperationSpec
    );
  }

  /**
   * Description for Invoke the MSDeploy web app extension.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param mSDeploy Details of MSDeploy operation
   * @param options The options parameters.
   */
  async beginCreateMSDeployOperationSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    mSDeploy: MSDeploy,
    options?: WebAppsCreateMSDeployOperationSlotOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<WebAppsCreateMSDeployOperationSlotResponse>,
      WebAppsCreateMSDeployOperationSlotResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<WebAppsCreateMSDeployOperationSlotResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, name, slot, mSDeploy, options },
      createMSDeployOperationSlotOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Description for Invoke the MSDeploy web app extension.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param mSDeploy Details of MSDeploy operation
   * @param options The options parameters.
   */
  async beginCreateMSDeployOperationSlotAndWait(
    resourceGroupName: string,
    name: string,
    slot: string,
    mSDeploy: MSDeploy,
    options?: WebAppsCreateMSDeployOperationSlotOptionalParams
  ): Promise<WebAppsCreateMSDeployOperationSlotResponse> {
    const poller = await this.beginCreateMSDeployOperationSlot(
      resourceGroupName,
      name,
      slot,
      mSDeploy,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Description for Get the MSDeploy Log for the last MSDeploy operation.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The options parameters.
   */
  getMSDeployLogSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsGetMSDeployLogSlotOptionalParams
  ): Promise<WebAppsGetMSDeployLogSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      getMSDeployLogSlotOperationSpec
    );
  }

  /**
   * Description for List the functions for a web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot.
   * @param options The options parameters.
   */
  private _listInstanceFunctionsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListInstanceFunctionsSlotOptionalParams
  ): Promise<WebAppsListInstanceFunctionsSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      listInstanceFunctionsSlotOperationSpec
    );
  }

  /**
   * Description for Fetch a short lived token that can be exchanged for a master key.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The options parameters.
   */
  getFunctionsAdminTokenSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsGetFunctionsAdminTokenSlotOptionalParams
  ): Promise<WebAppsGetFunctionsAdminTokenSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      getFunctionsAdminTokenSlotOperationSpec
    );
  }

  /**
   * Description for Get function information by its ID for web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param slot Name of the deployment slot.
   * @param options The options parameters.
   */
  getInstanceFunctionSlot(
    resourceGroupName: string,
    name: string,
    functionName: string,
    slot: string,
    options?: WebAppsGetInstanceFunctionSlotOptionalParams
  ): Promise<WebAppsGetInstanceFunctionSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, functionName, slot, options },
      getInstanceFunctionSlotOperationSpec
    );
  }

  /**
   * Description for Create function for web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param slot Name of the deployment slot.
   * @param functionEnvelope Function details.
   * @param options The options parameters.
   */
  async beginCreateInstanceFunctionSlot(
    resourceGroupName: string,
    name: string,
    functionName: string,
    slot: string,
    functionEnvelope: FunctionEnvelope,
    options?: WebAppsCreateInstanceFunctionSlotOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<WebAppsCreateInstanceFunctionSlotResponse>,
      WebAppsCreateInstanceFunctionSlotResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<WebAppsCreateInstanceFunctionSlotResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        name,
        functionName,
        slot,
        functionEnvelope,
        options
      },
      createInstanceFunctionSlotOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Description for Create function for web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param slot Name of the deployment slot.
   * @param functionEnvelope Function details.
   * @param options The options parameters.
   */
  async beginCreateInstanceFunctionSlotAndWait(
    resourceGroupName: string,
    name: string,
    functionName: string,
    slot: string,
    functionEnvelope: FunctionEnvelope,
    options?: WebAppsCreateInstanceFunctionSlotOptionalParams
  ): Promise<WebAppsCreateInstanceFunctionSlotResponse> {
    const poller = await this.beginCreateInstanceFunctionSlot(
      resourceGroupName,
      name,
      functionName,
      slot,
      functionEnvelope,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Description for Delete a function for web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param slot Name of the deployment slot.
   * @param options The options parameters.
   */
  deleteInstanceFunctionSlot(
    resourceGroupName: string,
    name: string,
    functionName: string,
    slot: string,
    options?: WebAppsDeleteInstanceFunctionSlotOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, functionName, slot, options },
      deleteInstanceFunctionSlotOperationSpec
    );
  }

  /**
   * Description for Add or update a function secret.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName The name of the function.
   * @param keyName The name of the key.
   * @param slot Name of the deployment slot.
   * @param key The key to create or update
   * @param options The options parameters.
   */
  createOrUpdateFunctionSecretSlot(
    resourceGroupName: string,
    name: string,
    functionName: string,
    keyName: string,
    slot: string,
    key: KeyInfo,
    options?: WebAppsCreateOrUpdateFunctionSecretSlotOptionalParams
  ): Promise<WebAppsCreateOrUpdateFunctionSecretSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, functionName, keyName, slot, key, options },
      createOrUpdateFunctionSecretSlotOperationSpec
    );
  }

  /**
   * Description for Delete a function secret.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName The name of the function.
   * @param keyName The name of the key.
   * @param slot Name of the deployment slot.
   * @param options The options parameters.
   */
  deleteFunctionSecretSlot(
    resourceGroupName: string,
    name: string,
    functionName: string,
    keyName: string,
    slot: string,
    options?: WebAppsDeleteFunctionSecretSlotOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, functionName, keyName, slot, options },
      deleteFunctionSecretSlotOperationSpec
    );
  }

  /**
   * Description for Get function keys for a function in a web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param slot Name of the deployment slot.
   * @param options The options parameters.
   */
  listFunctionKeysSlot(
    resourceGroupName: string,
    name: string,
    functionName: string,
    slot: string,
    options?: WebAppsListFunctionKeysSlotOptionalParams
  ): Promise<WebAppsListFunctionKeysSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, functionName, slot, options },
      listFunctionKeysSlotOperationSpec
    );
  }

  /**
   * Description for Get function secrets for a function in a web site, or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param functionName Function name.
   * @param slot Name of the deployment slot.
   * @param options The options parameters.
   */
  listFunctionSecretsSlot(
    resourceGroupName: string,
    name: string,
    functionName: string,
    slot: string,
    options?: WebAppsListFunctionSecretsSlotOptionalParams
  ): Promise<WebAppsListFunctionSecretsSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, functionName, slot, options },
      listFunctionSecretsSlotOperationSpec
    );
  }

  /**
   * Description for Get host secrets for a function app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot.
   * @param options The options parameters.
   */
  listHostKeysSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListHostKeysSlotOptionalParams
  ): Promise<WebAppsListHostKeysSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      listHostKeysSlotOperationSpec
    );
  }

  /**
   * Description for This is to allow calling via powershell and ARM template.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot.
   * @param options The options parameters.
   */
  listSyncStatusSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListSyncStatusSlotOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      listSyncStatusSlotOperationSpec
    );
  }

  /**
   * Description for Syncs function trigger metadata to the management database
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot.
   * @param options The options parameters.
   */
  syncFunctionsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsSyncFunctionsSlotOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      syncFunctionsSlotOperationSpec
    );
  }

  /**
   * Description for Add or update a host level secret.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param keyType The type of host key.
   * @param keyName The name of the key.
   * @param slot Name of the deployment slot.
   * @param key The key to create or update
   * @param options The options parameters.
   */
  createOrUpdateHostSecretSlot(
    resourceGroupName: string,
    name: string,
    keyType: string,
    keyName: string,
    slot: string,
    key: KeyInfo,
    options?: WebAppsCreateOrUpdateHostSecretSlotOptionalParams
  ): Promise<WebAppsCreateOrUpdateHostSecretSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, keyType, keyName, slot, key, options },
      createOrUpdateHostSecretSlotOperationSpec
    );
  }

  /**
   * Description for Delete a host level secret.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param keyType The type of host key.
   * @param keyName The name of the key.
   * @param slot Name of the deployment slot.
   * @param options The options parameters.
   */
  deleteHostSecretSlot(
    resourceGroupName: string,
    name: string,
    keyType: string,
    keyName: string,
    slot: string,
    options?: WebAppsDeleteHostSecretSlotOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, keyType, keyName, slot, options },
      deleteHostSecretSlotOperationSpec
    );
  }

  /**
   * Description for Get hostname bindings for an app or a deployment slot.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API gets hostname bindings
   *             for the production slot.
   * @param options The options parameters.
   */
  private _listHostNameBindingsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListHostNameBindingsSlotOptionalParams
  ): Promise<WebAppsListHostNameBindingsSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      listHostNameBindingsSlotOperationSpec
    );
  }

  /**
   * Description for Get the named hostname binding for an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API the named binding for
   *             the production slot.
   * @param hostName Hostname in the hostname binding.
   * @param options The options parameters.
   */
  getHostNameBindingSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    hostName: string,
    options?: WebAppsGetHostNameBindingSlotOptionalParams
  ): Promise<WebAppsGetHostNameBindingSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, hostName, options },
      getHostNameBindingSlotOperationSpec
    );
  }

  /**
   * Description for Creates a hostname binding for an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param hostName Hostname in the hostname binding.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will create a binding
   *             for the production slot.
   * @param hostNameBinding Binding details. This is the JSON representation of a HostNameBinding object.
   * @param options The options parameters.
   */
  createOrUpdateHostNameBindingSlot(
    resourceGroupName: string,
    name: string,
    hostName: string,
    slot: string,
    hostNameBinding: HostNameBinding,
    options?: WebAppsCreateOrUpdateHostNameBindingSlotOptionalParams
  ): Promise<WebAppsCreateOrUpdateHostNameBindingSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, hostName, slot, hostNameBinding, options },
      createOrUpdateHostNameBindingSlotOperationSpec
    );
  }

  /**
   * Description for Deletes a hostname binding for an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the binding
   *             for the production slot.
   * @param hostName Hostname in the hostname binding.
   * @param options The options parameters.
   */
  deleteHostNameBindingSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    hostName: string,
    options?: WebAppsDeleteHostNameBindingSlotOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, hostName, options },
      deleteHostNameBindingSlotOperationSpec
    );
  }

  /**
   * Description for Retrieves a specific Service Bus Hybrid Connection used by this Web App.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param namespaceName The namespace for this hybrid connection.
   * @param relayName The relay name for this hybrid connection.
   * @param slot The name of the slot for the web app.
   * @param options The options parameters.
   */
  getHybridConnectionSlot(
    resourceGroupName: string,
    name: string,
    namespaceName: string,
    relayName: string,
    slot: string,
    options?: WebAppsGetHybridConnectionSlotOptionalParams
  ): Promise<WebAppsGetHybridConnectionSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, namespaceName, relayName, slot, options },
      getHybridConnectionSlotOperationSpec
    );
  }

  /**
   * Description for Creates a new Hybrid Connection using a Service Bus relay.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param namespaceName The namespace for this hybrid connection.
   * @param relayName The relay name for this hybrid connection.
   * @param slot The name of the slot for the web app.
   * @param connectionEnvelope The details of the hybrid connection.
   * @param options The options parameters.
   */
  createOrUpdateHybridConnectionSlot(
    resourceGroupName: string,
    name: string,
    namespaceName: string,
    relayName: string,
    slot: string,
    connectionEnvelope: HybridConnection,
    options?: WebAppsCreateOrUpdateHybridConnectionSlotOptionalParams
  ): Promise<WebAppsCreateOrUpdateHybridConnectionSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        namespaceName,
        relayName,
        slot,
        connectionEnvelope,
        options
      },
      createOrUpdateHybridConnectionSlotOperationSpec
    );
  }

  /**
   * Description for Removes a Hybrid Connection from this site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param namespaceName The namespace for this hybrid connection.
   * @param relayName The relay name for this hybrid connection.
   * @param slot The name of the slot for the web app.
   * @param options The options parameters.
   */
  deleteHybridConnectionSlot(
    resourceGroupName: string,
    name: string,
    namespaceName: string,
    relayName: string,
    slot: string,
    options?: WebAppsDeleteHybridConnectionSlotOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, namespaceName, relayName, slot, options },
      deleteHybridConnectionSlotOperationSpec
    );
  }

  /**
   * Description for Creates a new Hybrid Connection using a Service Bus relay.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param namespaceName The namespace for this hybrid connection.
   * @param relayName The relay name for this hybrid connection.
   * @param slot The name of the slot for the web app.
   * @param connectionEnvelope The details of the hybrid connection.
   * @param options The options parameters.
   */
  updateHybridConnectionSlot(
    resourceGroupName: string,
    name: string,
    namespaceName: string,
    relayName: string,
    slot: string,
    connectionEnvelope: HybridConnection,
    options?: WebAppsUpdateHybridConnectionSlotOptionalParams
  ): Promise<WebAppsUpdateHybridConnectionSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        namespaceName,
        relayName,
        slot,
        connectionEnvelope,
        options
      },
      updateHybridConnectionSlotOperationSpec
    );
  }

  /**
   * Description for Retrieves all Service Bus Hybrid Connections used by this Web App.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param slot The name of the slot for the web app.
   * @param options The options parameters.
   */
  listHybridConnectionsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListHybridConnectionsSlotOptionalParams
  ): Promise<WebAppsListHybridConnectionsSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      listHybridConnectionsSlotOperationSpec
    );
  }

  /**
   * Description for Gets hybrid connections configured for an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get hybrid
   *             connections for the production slot.
   * @param options The options parameters.
   */
  listRelayServiceConnectionsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListRelayServiceConnectionsSlotOptionalParams
  ): Promise<WebAppsListRelayServiceConnectionsSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      listRelayServiceConnectionsSlotOperationSpec
    );
  }

  /**
   * Description for Gets a hybrid connection configuration by its name.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param entityName Name of the hybrid connection.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get a hybrid
   *             connection for the production slot.
   * @param options The options parameters.
   */
  getRelayServiceConnectionSlot(
    resourceGroupName: string,
    name: string,
    entityName: string,
    slot: string,
    options?: WebAppsGetRelayServiceConnectionSlotOptionalParams
  ): Promise<WebAppsGetRelayServiceConnectionSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, entityName, slot, options },
      getRelayServiceConnectionSlotOperationSpec
    );
  }

  /**
   * Description for Creates a new hybrid connection configuration (PUT), or updates an existing one
   * (PATCH).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param entityName Name of the hybrid connection configuration.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will create or update a
   *             hybrid connection for the production slot.
   * @param connectionEnvelope Details of the hybrid connection configuration.
   * @param options The options parameters.
   */
  createOrUpdateRelayServiceConnectionSlot(
    resourceGroupName: string,
    name: string,
    entityName: string,
    slot: string,
    connectionEnvelope: RelayServiceConnectionEntity,
    options?: WebAppsCreateOrUpdateRelayServiceConnectionSlotOptionalParams
  ): Promise<WebAppsCreateOrUpdateRelayServiceConnectionSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        entityName,
        slot,
        connectionEnvelope,
        options
      },
      createOrUpdateRelayServiceConnectionSlotOperationSpec
    );
  }

  /**
   * Description for Deletes a relay service connection by its name.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param entityName Name of the hybrid connection configuration.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete a hybrid
   *             connection for the production slot.
   * @param options The options parameters.
   */
  deleteRelayServiceConnectionSlot(
    resourceGroupName: string,
    name: string,
    entityName: string,
    slot: string,
    options?: WebAppsDeleteRelayServiceConnectionSlotOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, entityName, slot, options },
      deleteRelayServiceConnectionSlotOperationSpec
    );
  }

  /**
   * Description for Creates a new hybrid connection configuration (PUT), or updates an existing one
   * (PATCH).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param entityName Name of the hybrid connection configuration.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will create or update a
   *             hybrid connection for the production slot.
   * @param connectionEnvelope Details of the hybrid connection configuration.
   * @param options The options parameters.
   */
  updateRelayServiceConnectionSlot(
    resourceGroupName: string,
    name: string,
    entityName: string,
    slot: string,
    connectionEnvelope: RelayServiceConnectionEntity,
    options?: WebAppsUpdateRelayServiceConnectionSlotOptionalParams
  ): Promise<WebAppsUpdateRelayServiceConnectionSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        entityName,
        slot,
        connectionEnvelope,
        options
      },
      updateRelayServiceConnectionSlotOperationSpec
    );
  }

  /**
   * Description for Gets all scale-out instances of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API gets the production
   *             slot instances.
   * @param options The options parameters.
   */
  private _listInstanceIdentifiersSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListInstanceIdentifiersSlotOptionalParams
  ): Promise<WebAppsListInstanceIdentifiersSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      listInstanceIdentifiersSlotOperationSpec
    );
  }

  /**
   * Description for Gets all scale-out instances of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param instanceId
   * @param slot Name of the deployment slot. If a slot is not specified, the API gets the production
   *             slot instances.
   * @param options The options parameters.
   */
  getInstanceInfoSlot(
    resourceGroupName: string,
    name: string,
    instanceId: string,
    slot: string,
    options?: WebAppsGetInstanceInfoSlotOptionalParams
  ): Promise<WebAppsGetInstanceInfoSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, instanceId, slot, options },
      getInstanceInfoSlotOperationSpec
    );
  }

  /**
   * Description for Get the status of the last MSDeploy operation.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param instanceId ID of web app instance.
   * @param options The options parameters.
   */
  getInstanceMsDeployStatusSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    instanceId: string,
    options?: WebAppsGetInstanceMsDeployStatusSlotOptionalParams
  ): Promise<WebAppsGetInstanceMsDeployStatusSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, instanceId, options },
      getInstanceMsDeployStatusSlotOperationSpec
    );
  }

  /**
   * Description for Invoke the MSDeploy web app extension.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param instanceId ID of web app instance.
   * @param mSDeploy Details of MSDeploy operation
   * @param options The options parameters.
   */
  async beginCreateInstanceMSDeployOperationSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    instanceId: string,
    mSDeploy: MSDeploy,
    options?: WebAppsCreateInstanceMSDeployOperationSlotOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<WebAppsCreateInstanceMSDeployOperationSlotResponse>,
      WebAppsCreateInstanceMSDeployOperationSlotResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<WebAppsCreateInstanceMSDeployOperationSlotResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, name, slot, instanceId, mSDeploy, options },
      createInstanceMSDeployOperationSlotOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Description for Invoke the MSDeploy web app extension.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param instanceId ID of web app instance.
   * @param mSDeploy Details of MSDeploy operation
   * @param options The options parameters.
   */
  async beginCreateInstanceMSDeployOperationSlotAndWait(
    resourceGroupName: string,
    name: string,
    slot: string,
    instanceId: string,
    mSDeploy: MSDeploy,
    options?: WebAppsCreateInstanceMSDeployOperationSlotOptionalParams
  ): Promise<WebAppsCreateInstanceMSDeployOperationSlotResponse> {
    const poller = await this.beginCreateInstanceMSDeployOperationSlot(
      resourceGroupName,
      name,
      slot,
      instanceId,
      mSDeploy,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Description for Get the MSDeploy Log for the last MSDeploy operation.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param instanceId ID of web app instance.
   * @param options The options parameters.
   */
  getInstanceMSDeployLogSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    instanceId: string,
    options?: WebAppsGetInstanceMSDeployLogSlotOptionalParams
  ): Promise<WebAppsGetInstanceMSDeployLogSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, instanceId, options },
      getInstanceMSDeployLogSlotOperationSpec
    );
  }

  /**
   * Description for Get list of processes for a web site, or a deployment slot, or for a specific
   * scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for
   *             the production slot.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in
   *                   the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The options parameters.
   */
  private _listInstanceProcessesSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    instanceId: string,
    options?: WebAppsListInstanceProcessesSlotOptionalParams
  ): Promise<WebAppsListInstanceProcessesSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, instanceId, options },
      listInstanceProcessesSlotOperationSpec
    );
  }

  /**
   * Description for Get process information by its ID for a specific scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for
   *             the production slot.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in
   *                   the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The options parameters.
   */
  getInstanceProcessSlot(
    resourceGroupName: string,
    name: string,
    processId: string,
    slot: string,
    instanceId: string,
    options?: WebAppsGetInstanceProcessSlotOptionalParams
  ): Promise<WebAppsGetInstanceProcessSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, processId, slot, instanceId, options },
      getInstanceProcessSlotOperationSpec
    );
  }

  /**
   * Description for Terminate a process by its ID for a web site, or a deployment slot, or specific
   * scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for
   *             the production slot.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in
   *                   the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The options parameters.
   */
  deleteInstanceProcessSlot(
    resourceGroupName: string,
    name: string,
    processId: string,
    slot: string,
    instanceId: string,
    options?: WebAppsDeleteInstanceProcessSlotOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, processId, slot, instanceId, options },
      deleteInstanceProcessSlotOperationSpec
    );
  }

  /**
   * Description for Get a memory dump of a process by its ID for a specific scaled-out instance in a web
   * site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for
   *             the production slot.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in
   *                   the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The options parameters.
   */
  getInstanceProcessDumpSlot(
    resourceGroupName: string,
    name: string,
    processId: string,
    slot: string,
    instanceId: string,
    options?: WebAppsGetInstanceProcessDumpSlotOptionalParams
  ): Promise<WebAppsGetInstanceProcessDumpSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, processId, slot, instanceId, options },
      getInstanceProcessDumpSlotOperationSpec
    );
  }

  /**
   * Description for List module information for a process by its ID for a specific scaled-out instance
   * in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for
   *             the production slot.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in
   *                   the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The options parameters.
   */
  private _listInstanceProcessModulesSlot(
    resourceGroupName: string,
    name: string,
    processId: string,
    slot: string,
    instanceId: string,
    options?: WebAppsListInstanceProcessModulesSlotOptionalParams
  ): Promise<WebAppsListInstanceProcessModulesSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, processId, slot, instanceId, options },
      listInstanceProcessModulesSlotOperationSpec
    );
  }

  /**
   * Description for Get process information by its ID for a specific scaled-out instance in a web site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param baseAddress Module base address.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for
   *             the production slot.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in
   *                   the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The options parameters.
   */
  getInstanceProcessModuleSlot(
    resourceGroupName: string,
    name: string,
    processId: string,
    baseAddress: string,
    slot: string,
    instanceId: string,
    options?: WebAppsGetInstanceProcessModuleSlotOptionalParams
  ): Promise<WebAppsGetInstanceProcessModuleSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        processId,
        baseAddress,
        slot,
        instanceId,
        options
      },
      getInstanceProcessModuleSlotOperationSpec
    );
  }

  /**
   * Description for List the threads in a process by its ID for a specific scaled-out instance in a web
   * site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site name.
   * @param processId PID.
   * @param slot Name of the deployment slot. If a slot is not specified, the API returns deployments for
   *             the production slot.
   * @param instanceId ID of a specific scaled-out instance. This is the value of the name property in
   *                   the JSON response from "GET api/sites/{siteName}/instances".
   * @param options The options parameters.
   */
  private _listInstanceProcessThreadsSlot(
    resourceGroupName: string,
    name: string,
    processId: string,
    slot: string,
    instanceId: string,
    options?: WebAppsListInstanceProcessThreadsSlotOptionalParams
  ): Promise<WebAppsListInstanceProcessThreadsSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, processId, slot, instanceId, options },
      listInstanceProcessThreadsSlotOperationSpec
    );
  }

  /**
   * Description for Shows whether an app can be cloned to another resource group or subscription.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. By default, this API returns information on the production
   *             slot.
   * @param options The options parameters.
   */
  isCloneableSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsIsCloneableSlotOptionalParams
  ): Promise<WebAppsIsCloneableSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      isCloneableSlotOperationSpec
    );
  }

  /**
   * Description for Gets existing backups of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get backups of the
   *             production slot.
   * @param options The options parameters.
   */
  private _listSiteBackupsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListSiteBackupsSlotOptionalParams
  ): Promise<WebAppsListSiteBackupsSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      listSiteBackupsSlotOperationSpec
    );
  }

  /**
   * Description for This is to allow calling via powershell and ARM template.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot.
   * @param options The options parameters.
   */
  listSyncFunctionTriggersSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListSyncFunctionTriggersSlotOptionalParams
  ): Promise<WebAppsListSyncFunctionTriggersSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      listSyncFunctionTriggersSlotOperationSpec
    );
  }

  /**
   * Description for Returns the status of MySql in app migration, if one is active, and whether or not
   * MySql in app is enabled
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of the deployment slot.
   * @param options The options parameters.
   */
  getMigrateMySqlStatusSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsGetMigrateMySqlStatusSlotOptionalParams
  ): Promise<WebAppsGetMigrateMySqlStatusSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      getMigrateMySqlStatusSlotOperationSpec
    );
  }

  /**
   * Description for Gets a Swift Virtual Network connection.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get a gateway for
   *             the production slot's Virtual Network.
   * @param options The options parameters.
   */
  getSwiftVirtualNetworkConnectionSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsGetSwiftVirtualNetworkConnectionSlotOptionalParams
  ): Promise<WebAppsGetSwiftVirtualNetworkConnectionSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      getSwiftVirtualNetworkConnectionSlotOperationSpec
    );
  }

  /**
   * Description for Integrates this Web App with a Virtual Network. This requires that 1)
   * "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has
   * already been delegated, and is not
   * in use by another App Service Plan other than the one this App is in.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update
   *             connections for the production slot.
   * @param connectionEnvelope Properties of the Virtual Network connection. See example.
   * @param options The options parameters.
   */
  createOrUpdateSwiftVirtualNetworkConnectionWithCheckSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    connectionEnvelope: SwiftVirtualNetwork,
    options?: WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionWithCheckSlotOptionalParams
  ): Promise<
    WebAppsCreateOrUpdateSwiftVirtualNetworkConnectionWithCheckSlotResponse
  > {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, connectionEnvelope, options },
      createOrUpdateSwiftVirtualNetworkConnectionWithCheckSlotOperationSpec
    );
  }

  /**
   * Description for Deletes a Swift Virtual Network connection from an app (or deployment slot).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the
   *             connection for the production slot.
   * @param options The options parameters.
   */
  deleteSwiftVirtualNetworkSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsDeleteSwiftVirtualNetworkSlotOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      deleteSwiftVirtualNetworkSlotOperationSpec
    );
  }

  /**
   * Description for Integrates this Web App with a Virtual Network. This requires that 1)
   * "swiftSupported" is true when doing a GET against this resource, and 2) that the target Subnet has
   * already been delegated, and is not
   * in use by another App Service Plan other than the one this App is in.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will add or update
   *             connections for the production slot.
   * @param connectionEnvelope Properties of the Virtual Network connection. See example.
   * @param options The options parameters.
   */
  updateSwiftVirtualNetworkConnectionWithCheckSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    connectionEnvelope: SwiftVirtualNetwork,
    options?: WebAppsUpdateSwiftVirtualNetworkConnectionWithCheckSlotOptionalParams
  ): Promise<WebAppsUpdateSwiftVirtualNetworkConnectionWithCheckSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, connectionEnvelope, options },
      updateSwiftVirtualNetworkConnectionWithCheckSlotOperationSpec
    );
  }

  /**
   * Description for Gets all network features used by the app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param view The type of view. Only "summary" is supported at this time.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get network
   *             features for the production slot.
   * @param options The options parameters.
   */
  listNetworkFeaturesSlot(
    resourceGroupName: string,
    name: string,
    view: string,
    slot: string,
    options?: WebAppsListNetworkFeaturesSlotOptionalParams
  ): Promise<WebAppsListNetworkFeaturesSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, view, slot, options },
      listNetworkFeaturesSlotOperationSpec
    );
  }

  /**
   * Description for Gets a named operation for a network trace capturing (or deployment slot, if
   * specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param operationId GUID of the operation.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get an operation
   *             for the production slot.
   * @param options The options parameters.
   */
  getNetworkTraceOperationSlot(
    resourceGroupName: string,
    name: string,
    operationId: string,
    slot: string,
    options?: WebAppsGetNetworkTraceOperationSlotOptionalParams
  ): Promise<WebAppsGetNetworkTraceOperationSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, operationId, slot, options },
      getNetworkTraceOperationSlotOperationSpec
    );
  }

  /**
   * Description for Start capturing network packets for the site (To be deprecated).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param slot The name of the slot for this web app.
   * @param options The options parameters.
   */
  startWebSiteNetworkTraceSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsStartWebSiteNetworkTraceSlotOptionalParams
  ): Promise<WebAppsStartWebSiteNetworkTraceSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      startWebSiteNetworkTraceSlotOperationSpec
    );
  }

  /**
   * Description for Start capturing network packets for the site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param slot The name of the slot for this web app.
   * @param options The options parameters.
   */
  async beginStartWebSiteNetworkTraceOperationSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsStartWebSiteNetworkTraceOperationSlotOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<WebAppsStartWebSiteNetworkTraceOperationSlotResponse>,
      WebAppsStartWebSiteNetworkTraceOperationSlotResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<WebAppsStartWebSiteNetworkTraceOperationSlotResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, name, slot, options },
      startWebSiteNetworkTraceOperationSlotOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Description for Start capturing network packets for the site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param slot The name of the slot for this web app.
   * @param options The options parameters.
   */
  async beginStartWebSiteNetworkTraceOperationSlotAndWait(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsStartWebSiteNetworkTraceOperationSlotOptionalParams
  ): Promise<WebAppsStartWebSiteNetworkTraceOperationSlotResponse> {
    const poller = await this.beginStartWebSiteNetworkTraceOperationSlot(
      resourceGroupName,
      name,
      slot,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Description for Stop ongoing capturing network packets for the site.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name The name of the web app.
   * @param slot The name of the slot for this web app.
   * @param options The options parameters.
   */
  stopWebSiteNetworkTraceSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsStopWebSiteNetworkTraceSlotOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      stopWebSiteNetworkTraceSlotOperationSpec
    );
  }

  /**
   * Description for Gets a named operation for a network trace capturing (or deployment slot, if
   * specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param operationId GUID of the operation.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get an operation
   *             for the production slot.
   * @param options The options parameters.
   */
  getNetworkTracesSlot(
    resourceGroupName: string,
    name: string,
    operationId: string,
    slot: string,
    options?: WebAppsGetNetworkTracesSlotOptionalParams
  ): Promise<WebAppsGetNetworkTracesSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, operationId, slot, options },
      getNetworkTracesSlotOperationSpec
    );
  }

  /**
   * Description for Gets a named operation for a network trace capturing (or deployment slot, if
   * specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param operationId GUID of the operation.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get an operation
   *             for the production slot.
   * @param options The options parameters.
   */
  getNetworkTraceOperationSlotV2(
    resourceGroupName: string,
    name: string,
    operationId: string,
    slot: string,
    options?: WebAppsGetNetworkTraceOperationSlotV2OptionalParams
  ): Promise<WebAppsGetNetworkTraceOperationSlotV2Response> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, operationId, slot, options },
      getNetworkTraceOperationSlotV2OperationSpec
    );
  }

  /**
   * Description for Gets a named operation for a network trace capturing (or deployment slot, if
   * specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param operationId GUID of the operation.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get an operation
   *             for the production slot.
   * @param options The options parameters.
   */
  getNetworkTracesSlotV2(
    resourceGroupName: string,
    name: string,
    operationId: string,
    slot: string,
    options?: WebAppsGetNetworkTracesSlotV2OptionalParams
  ): Promise<WebAppsGetNetworkTracesSlotV2Response> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, operationId, slot, options },
      getNetworkTracesSlotV2OperationSpec
    );
  }

  /**
   * Description for Generates a new publishing password for an app (or deployment slot, if specified).
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API generate a new
   *             publishing password for the production slot.
   * @param options The options parameters.
   */
  generateNewSitePublishingPasswordSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsGenerateNewSitePublishingPasswordSlotOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      generateNewSitePublishingPasswordSlotOperationSpec
    );
  }

  /**
   * Description for Gets perfmon counters for web app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The options parameters.
   */
  private _listPerfMonCountersSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListPerfMonCountersSlotOptionalParams
  ): Promise<WebAppsListPerfMonCountersSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      listPerfMonCountersSlotOperationSpec
    );
  }

  /**
   * Description for Gets web app's event logs.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of web app.
   * @param slot Name of web app slot. If not specified then will default to production slot.
   * @param options The options parameters.
   */
  getSitePhpErrorLogFlagSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsGetSitePhpErrorLogFlagSlotOptionalParams
  ): Promise<WebAppsGetSitePhpErrorLogFlagSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      getSitePhpErrorLogFlagSlotOperationSpec
    );
  }

  /**
   * Description for Gets the premier add-ons of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the premier
   *             add-ons for the production slot.
   * @param options The options parameters.
   */
  listPremierAddOnsSlot(
    resourceGroupName: string,
    name: string,
    slot: string,
    options?: WebAppsListPremierAddOnsSlotOptionalParams
  ): Promise<WebAppsListPremierAddOnsSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, slot, options },
      listPremierAddOnsSlotOperationSpec
    );
  }

  /**
   * Description for Gets a named add-on of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param premierAddOnName Add-on name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will get the named
   *             add-on for the production slot.
   * @param options The options parameters.
   */
  getPremierAddOnSlot(
    resourceGroupName: string,
    name: string,
    premierAddOnName: string,
    slot: string,
    options?: WebAppsGetPremierAddOnSlotOptionalParams
  ): Promise<WebAppsGetPremierAddOnSlotResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, premierAddOnName, slot, options },
      getPremierAddOnSlotOperationSpec
    );
  }

  /**
   * Description for Updates a named add-on of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param premierAddOnName Add-on name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the named
   *             add-on for the production slot.
   * @param premierAddOn A JSON representation of the edited premier add-on.
   * @param options The options parameters.
   */
  addPremierAddOnSlot(
    resourceGroupName: string,
    name: string,
    premierAddOnName: string,
    slot: string,
    premierAddOn: PremierAddOn,
    options?: WebAppsAddPremierAddOnSlotOptionalParams
  ): Promise<WebAppsAddPremierAddOnSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        premierAddOnName,
        slot,
        premierAddOn,
        options
      },
      addPremierAddOnSlotOperationSpec
    );
  }

  /**
   * Description for Delete a premier add-on from an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param premierAddOnName Add-on name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will delete the named
   *             add-on for the production slot.
   * @param options The options parameters.
   */
  deletePremierAddOnSlot(
    resourceGroupName: string,
    name: string,
    premierAddOnName: string,
    slot: string,
    options?: WebAppsDeletePremierAddOnSlotOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, name, premierAddOnName, slot, options },
      deletePremierAddOnSlotOperationSpec
    );
  }

  /**
   * Description for Updates a named add-on of an app.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Name of the app.
   * @param premierAddOnName Add-on name.
   * @param slot Name of the deployment slot. If a slot is not specified, the API will update the named
   *             add-on for the production slot.
   * @param premierAddOn A JSON representation of the edited premier add-on.
   * @param options The options parameters.
   */
  updatePremierAddOnSlot(
    resourceGroupName: string,
    name: string,
    premierAddOnName: string,
    slot: string,
    premierAddOn: PremierAddOnPatchResource,
    options?: WebAppsUpdatePremierAddOnSlotOptionalParams
  ): Promise<WebAppsUpdatePremierAddOnSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        premierAddOnName,
        slot,
        premierAddOn,
        options
      },
      updatePremierAddOnSlotOperationSpec
    );
  }

  /**
   * Description for Gets data around private site access enablement and authorized Virtual Networks that
   * can access the site.
   * @param resourceGroupName Name of t